/**
 * This file was auto-generated by rebilly-sdk-generator.
 * Do not make direct changes to this file.
 */

import AccountResource from './account-resource';
import AuthorizationResource from './authorization-resource';
import BillingPortalsResource from './billing-portals-resource';
import CheckoutFormsResource from './checkout-forms-resource';
import InvoicesResource from './invoices-resource';
import KycDocumentsResource from './kyc-documents-resource';
import KycRequestsResource from './kyc-requests-resource';
import OrdersResource from './orders-resource';
import PaymentInstrumentsResource from './payment-instruments-resource';
import PlansResource from './plans-resource';
import ProductsResource from './products-resource';
import PurchaseResource from './purchase-resource';
import TransactionsResource from './transactions-resource';
import WebsitesResource from './websites-resource';

export class StorefrontApiInstance {
  constructor({apiHandler}) {
    this.account = AccountResource({apiHandler});
    this.authorization = AuthorizationResource({apiHandler});
    this.billingPortals = BillingPortalsResource({apiHandler});
    this.checkoutForms = CheckoutFormsResource({apiHandler});
    this.invoices = InvoicesResource({apiHandler});
    this.kycDocuments = KycDocumentsResource({apiHandler});
    this.kycRequests = KycRequestsResource({apiHandler});
    this.orders = OrdersResource({apiHandler});
    this.paymentInstruments = PaymentInstrumentsResource({apiHandler});
    this.plans = PlansResource({apiHandler});
    this.products = ProductsResource({apiHandler});
    this.purchase = PurchaseResource({apiHandler});
    this.transactions = TransactionsResource({apiHandler});
    this.websites = WebsitesResource({apiHandler});

    // Adding aliases for backwards compatibility
    this.checkoutForm = this.checkoutForms;
    this.billingPortal = this.billingPortals;

    //expose apiHandler methods to the API instance
    this.addRequestInterceptor = apiHandler.addRequestInterceptor;
    this.removeRequestInterceptor = apiHandler.removeRequestInterceptor;
    this.addResponseInterceptor = apiHandler.addResponseInterceptor;
    this.removeResponseInterceptor = apiHandler.removeResponseInterceptor;
    this.setTimeout = apiHandler.setTimeout;
    this.setProxyAgent = apiHandler.setProxyAgent;
    this.setSessionToken = apiHandler.setSessionToken;
    this.setPublishableKey = apiHandler.setPublishableKey;
    this.setEndpoints = apiHandler.setEndpoints;
    this.getCancellationToken = apiHandler.getCancellationToken;
    this.generateSignature = apiHandler.generateSignature;
  }
}

/** TODO: Update the README.md with the follow once API is ready for public consumption.
 ## Rebilly Storefront API
 The Rebilly Storefront API is available as a tertiary API within the library. Unlike the main API or the Experimental API, this API allows customers to query information from Rebilly.
 Mostly used for customer self-service applications.

 ```js
 import RebillyAPI, {RebillyStorefrontAPI} from 'rebilly-js-sdk';

 const storefrontApi = RebillyStorefrontAPI({apiKey: 'secret-api-key', sandbox: true, timeout: 10000});
 ```
 **/

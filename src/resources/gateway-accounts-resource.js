/**
* This file was auto-generated by rebilly-sdk-generator.
* Do not make direct changes to this file.
*/

export default function GatewayAccountsResource({apiHandler}) {
  return {
    /**
     * @param { rebilly.GetGatewayAccountCollectionRequest } request
     * @returns { rebilly.GetGatewayAccountCollectionResponsePromise } response
     */
    getAll({
      limit = null,
      offset = null,
      sort = null,
      filter = null,
      q = null,
      fields = null,
    } = {}) {
      const params = {limit, offset, sort, filter, q, fields};
      return apiHandler.getAll(`gateway-accounts`, params);
    },
    /**
     * @param { rebilly.CreateGatewayAccountRequest } request
     * @returns { rebilly.PostGatewayAccountResponsePromise } response
     */
    create({id = '', data}) {
      return apiHandler.create(`gateway-accounts/${id}`, id, data);
    },
    /**
     * @returns { rebilly.GetGatewayAccountResponsePromise } response
     */
    get({id}) {
      return apiHandler.get(`gateway-accounts/${id}`);
    },
    update({id, data}) {
      return apiHandler.patch(`gateway-accounts/${id}`, data);
    },
    delete({id}) {
      return apiHandler.delete(`gateway-accounts/${id}`);
    },
    close({id}) {
      return apiHandler.post(`gateway-accounts/${id}/close`);
    },
    disable({id}) {
      return apiHandler.post(`gateway-accounts/${id}/disable`);
    },
    /**
     * @returns { rebilly.GetGatewayAccountDowntimeScheduleCollectionResponsePromise } response
     */
    getAllDowntimeSchedules({
      id,
      limit = null,
      offset = null,
      filter = null,
      sort = null,
    }) {
      const params = {limit, offset, filter, sort};
      return apiHandler.getAll(
        `gateway-accounts/${id}/downtime-schedules`,
        params
      );
    },
    createDowntimeSchedule({id, data}) {
      return apiHandler.post(`gateway-accounts/${id}/downtime-schedules`, data);
    },
    /**
     * @returns { rebilly.GetGatewayAccountDowntimeScheduleResponsePromise } response
     */
    getDowntimeSchedule({id, downtimeId}) {
      return apiHandler.get(
        `gateway-accounts/${id}/downtime-schedules/${downtimeId}`
      );
    },
    /**
     * @returns { rebilly.PutGatewayAccountDowntimeScheduleResponsePromise } response
     */
    updateDowntimeSchedule({id, downtimeId, data}) {
      return apiHandler.put(
        `gateway-accounts/${id}/downtime-schedules/${downtimeId}`,
        data
      );
    },
    deleteDowntimeSchedule({id, downtimeId}) {
      return apiHandler.delete(
        `gateway-accounts/${id}/downtime-schedules/${downtimeId}`
      );
    },
    enable({id}) {
      return apiHandler.post(`gateway-accounts/${id}/enable`);
    },
    /**
     * @returns { rebilly.GetGatewayAccountLimitCollectionResponsePromise } response
     */
    getAllVolumeLimits({id}) {
      return apiHandler.getAll(`gateway-accounts/${id}/limits`);
    },
    /**
     * @returns { rebilly.GetGatewayAccountLimitResponsePromise } response
     */
    getVolumeLimit({id, limitId}) {
      return apiHandler.get(`gateway-accounts/${id}/limits/${limitId}`);
    },
    /**
     * @returns { rebilly.PutGatewayAccountLimitResponsePromise } response
     */
    updateVolumeLimit({id, limitId, data}) {
      return apiHandler.put(`gateway-accounts/${id}/limits/${limitId}`, data);
    },
    deleteVolumeLimit({id, limitId}) {
      return apiHandler.delete(`gateway-accounts/${id}/limits/${limitId}`);
    },
    /**
     * @returns { rebilly.GetGatewayAccountTimelineCollectionResponsePromise } response
     */
    getAllTimelineMessages({
      id,
      limit = null,
      offset = null,
      filter = null,
      sort = null,
      q = null,
    }) {
      const params = {limit, offset, filter, sort, q};
      return apiHandler.getAll(`gateway-accounts/${id}/timeline`, params);
    },
    createTimelineComment({id, data}) {
      return apiHandler.post(`gateway-accounts/${id}/timeline`, data);
    },
    /**
     * @returns { rebilly.GetGatewayAccountTimelineResponsePromise } response
     */
    getTimelineMessage({id, messageId}) {
      return apiHandler.get(`gateway-accounts/${id}/timeline/${messageId}`);
    },
    deleteTimelineMessage({id, messageId}) {
      return apiHandler.delete(`gateway-accounts/${id}/timeline/${messageId}`);
    },
    checkCredentials({id}) {
      return apiHandler.post(`gateway-accounts/${id}/check-credentials`);
    },
    /**
     * @returns { rebilly.GetGatewayAccountFinancialSettingsResponsePromise } response
     */
    getFinancialSettings({id}) {
      return apiHandler.get(`gateway-accounts/${id}/financial-settings`);
    },
    /**
     * @returns { rebilly.PutGatewayAccountFinancialSettingsResponsePromise } response
     */
    setFinancialSettings({id, data}) {
      return apiHandler.put(`gateway-accounts/${id}/financial-settings`, data);
    },
  };
}

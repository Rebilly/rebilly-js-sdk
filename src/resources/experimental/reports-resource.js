/**
* This file was auto-generated by rebilly-sdk-generator.
* Do not make direct changes to this file.
*/

export default function ReportsResource({apiHandler}) {
  return {
    /**
     * @returns { rebilly.GetApiLogSummaryReportResponsePromise } response
     */
    getApiLogSummary({periodStart, periodEnd, limit = null, offset = null}) {
      const params = {periodStart, periodEnd, limit, offset};
      return apiHandler.get(`reports/api-log-summary`, params);
    },
    /**
     * @returns { rebilly.GetCumulativeSubscriptionReportResponsePromise } response
     */
    getCumulativeSubscriptions({
      aggregationField,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {
        aggregationField,
        periodStart,
        periodEnd,
        limit,
        offset,
        filter,
      };
      return apiHandler.get(`reports/cumulative-subscriptions`, params);
    },
    /**
     * @returns { rebilly.GetDashboardReportResponsePromise } response
     */
    getDashboardMetrics({
      periodStart,
      periodEnd,
      metrics = null,
      segments = null,
    }) {
      const params = {periodStart, periodEnd, metrics, segments};
      return apiHandler.get(`reports/dashboard`, params);
    },
    /**
     * @returns { rebilly.GetDccMarkupReportResponsePromise } response
     */
    getDccMarkup({
      aggregationField,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {
        aggregationField,
        periodStart,
        periodEnd,
        limit,
        offset,
        filter,
      };
      return apiHandler.get(`reports/dcc-markup`, params);
    },
    /**
     * @returns { rebilly.GetDisputeReportResponsePromise } response
     */
    getDisputes({
      aggregationField,
      periodMonth,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {aggregationField, periodMonth, limit, offset, filter};
      return apiHandler.get(`reports/disputes`, params);
    },
    /**
     * @returns { rebilly.GetTriggeredEventReportResponsePromise } response
     */
    getEventsTriggeredSummary({
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
    }) {
      const params = {periodStart, periodEnd, limit, offset};
      return apiHandler.get(`reports/events-triggered`, params);
    },
    /**
     * @returns { rebilly.GetTriggeredEventRuleReportResponsePromise } response
     */
    getTriggeredEventRuleReport({
      eventType,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
    }) {
      const params = {periodStart, periodEnd, limit, offset};
      return apiHandler.get(
        `reports/events-triggered/${eventType}/rules`,
        params
      );
    },
    /**
     * @returns { rebilly.GetFutureRenewalReportResponsePromise } response
     */
    getFutureRenewals({periodStart, periodEnd, limit = null, offset = null}) {
      const params = {periodStart, periodEnd, limit, offset};
      return apiHandler.get(`reports/future-renewals`, params);
    },
    /**
     * @returns { rebilly.GetJournalReportResponsePromise } response
     */
    getJournal({
      currency,
      bookedFrom = null,
      bookedTo = null,
      recognizedAt,
      aggregationField,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {
        currency,
        bookedFrom,
        bookedTo,
        recognizedAt,
        aggregationField,
        limit,
        offset,
        filter,
      };
      return apiHandler.get(`reports/journal`, params);
    },
    /**
     * @returns { rebilly.GetKycAcceptanceSummaryReportResponsePromise } response
     */
    getKycAcceptanceSummary({periodStart, periodEnd}) {
      const params = {periodStart, periodEnd};
      return apiHandler.get(`reports/kyc-acceptance-summary`, params);
    },
    /**
     * @returns { rebilly.GetKycRejectionSummaryReportResponsePromise } response
     */
    getKycRejectionSummary({periodStart, periodEnd}) {
      const params = {periodStart, periodEnd};
      return apiHandler.get(`reports/kyc-rejection-summary`, params);
    },
    /**
     * @returns { rebilly.GetKycRequestSummaryReportResponsePromise } response
     */
    getKycRequestSummary({periodStart, periodEnd}) {
      const params = {periodStart, periodEnd};
      return apiHandler.get(`reports/kyc-request-summary`, params);
    },
    /**
     * @returns { rebilly.GetMonthlyRecurringRevenueReportResponsePromise } response
     */
    getMonthlyRecurringRevenue({
      currency,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
    }) {
      const params = {currency, periodStart, periodEnd, limit, offset};
      return apiHandler.get(`reports/monthly-recurring-revenue`, params);
    },
    /**
     * @returns { rebilly.GetRenewalSaleReportResponsePromise } response
     */
    getRenewalSales({periodStart, periodEnd, limit = null, offset = null}) {
      const params = {periodStart, periodEnd, limit, offset};
      return apiHandler.get(`reports/renewal-sales`, params);
    },
    /**
     * @returns { rebilly.GetRetentionPercentageReportResponsePromise } response
     */
    getRetentionPercentage({
      aggregationField,
      aggregationPeriod,
      includeSwitchedSubscriptions = null,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
      filter = null,
      criteria = null,
    }) {
      const params = {
        aggregationField,
        aggregationPeriod,
        includeSwitchedSubscriptions,
        periodStart,
        periodEnd,
        limit,
        offset,
        filter,
        criteria,
      };
      return apiHandler.get(`reports/retention-percentage`, params);
    },
    /**
     * @returns { rebilly.GetRetentionValueReportResponsePromise } response
     */
    getRetentionValue({
      aggregationField,
      aggregationPeriod,
      includeRefunds = null,
      includeDisputes = null,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
      filter = null,
      sort = null,
      criteria = null,
    }) {
      const params = {
        aggregationField,
        aggregationPeriod,
        includeRefunds,
        includeDisputes,
        periodStart,
        periodEnd,
        limit,
        offset,
        filter,
        sort,
        criteria,
      };
      return apiHandler.get(`reports/retention-value`, params);
    },
    /**
     * @returns { rebilly.GetRevenueWaterfallReportResponsePromise } response
     */
    getRevenueWaterfall({currency, issuedFrom, issuedTo, recognizedTo}) {
      const params = {currency, issuedFrom, issuedTo, recognizedTo};
      return apiHandler.get(`reports/revenue-waterfall`, params);
    },
    /**
     * @returns { rebilly.GetSubscriptionCancellationReportResponsePromise } response
     */
    getSubscriptionCancellation({
      periodStart,
      periodEnd,
      aggregationField,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {
        periodStart,
        periodEnd,
        aggregationField,
        limit,
        offset,
        filter,
      };
      return apiHandler.get(`reports/subscription-cancellation`, params);
    },
    /**
     * @returns { rebilly.GetSubscriptionRenewalReportResponsePromise } response
     */
    getSubscriptionRenewal({
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
    }) {
      const params = {periodStart, periodEnd, limit, offset};
      return apiHandler.get(`reports/subscription-renewal`, params);
    },
    /**
     * @returns { rebilly.GetTimeSeriesTransactionReportResponsePromise } response
     */
    getTimeSeriesTransaction({type, subaggregate, periodStart, periodEnd}) {
      const params = {type, subaggregate, periodStart, periodEnd};
      return apiHandler.get(`reports/time-series-transaction`, params);
    },
    /**
     * @returns { rebilly.GetTransactionTimeDisputeReportResponsePromise } response
     */
    getTransactionsTimeDispute({
      aggregationField,
      periodStart,
      periodEnd,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {
        aggregationField,
        periodStart,
        periodEnd,
        limit,
        offset,
        filter,
      };
      return apiHandler.get(`reports/transactions-time-dispute`, params);
    },
    /**
     * @returns { rebilly.GetTransactionReportResponsePromise } response
     */
    getTransactions({
      periodStart,
      periodEnd,
      aggregationField,
      limit = null,
      offset = null,
      filter = null,
    }) {
      const params = {
        periodStart,
        periodEnd,
        aggregationField,
        limit,
        offset,
        filter,
      };
      return apiHandler.get(`reports/transactions`, params);
    },
  };
}

/**
* This file was auto-generated by rebilly-sdk-generator.
* Do not make direct changes to this file.
*/

export default function EventsResource({apiHandler}) {
  return {
    /**
     * @param { rebilly.GetEventCollectionRequest } request
     * @returns { rebilly.GetEventCollectionResponse } response
     */
    getAll() {
      return apiHandler.getAll(`events`);
    },
    /**
     * @returns { rebilly.GetEventResponse } response
     */
    get({eventType}) {
      return apiHandler.get(`events/${eventType}`);
    },
    /**
     * @returns { rebilly.GetEventRuleCollectionResponse } response
     */
    getRules({eventType}) {
      return apiHandler.get(`events/${eventType}/rules`);
    },
    /**
     * @returns { rebilly.PutEventRuleResponse } response
     */
    createRules({eventType, data}) {
      return apiHandler.put(`events/${eventType}/rules`, data);
    },
    /**
     * @returns { rebilly.PutEventRuleResponse } response
     */
    updateRules({eventType, data}) {
      return apiHandler.put(`events/${eventType}/rules`, data);
    },
    /**
     * @returns { rebilly.GetRulesEngineTimelineCollectionResponse } response
     */
    getAllTimelineMessages({
      eventType,
      limit = null,
      offset = null,
      filter = null,
      sort = null,
      q = null,
    }) {
      const params = {limit, offset, filter, sort, q};
      return apiHandler.getAll(`events/${eventType}/timeline`, params);
    },
    createTimelineComment({eventType, data}) {
      return apiHandler.post(`events/${eventType}/timeline`, data);
    },
    /**
     * @returns { rebilly.GetRulesEngineTimelineResponse } response
     */
    getTimelineMessage({eventType, messageId}) {
      return apiHandler.get(`events/${eventType}/timeline/${messageId}`);
    },
    deleteTimelineMessage({eventType, messageId}) {
      return apiHandler.delete(`events/${eventType}/timeline/${messageId}`);
    },
    /**
     * @returns { rebilly.GetEventRuleHistoryCollectionResponse } response
     */
    getRulesHistory({
      eventType,
      limit = null,
      offset = null,
      filter = null,
      q = null,
      sort = null,
      fields = null,
      expand = null,
    }) {
      const params = {limit, offset, filter, q, sort, fields, expand};
      return apiHandler.getAll(`events/${eventType}/rules/history`, params);
    },
    /**
     * @returns { rebilly.GetEventRuleHistoryVersionResponse } response
     */
    getRulesVersionNumber({eventType, version, fields = null, expand = null}) {
      const params = {fields, expand};
      return apiHandler.get(
        `events/${eventType}/rules/history/${version}`,
        params
      );
    },
    /**
     * @returns { rebilly.GetEventRuleVersionResponse } response
     */
    getRulesVersionDetail({eventType, version, fields = null, expand = null}) {
      const params = {fields, expand};
      return apiHandler.get(
        `events/${eventType}/rules/versions/${version}`,
        params
      );
    },
    /**
     * @returns { rebilly.GetEventRuleSetDraftCollectionResponse } response
     */
    getAllDraftRulesets({
      eventType,
      limit = null,
      offset = null,
      filter = null,
      q = null,
      sort = null,
      fields = null,
      expand = null,
    }) {
      const params = {limit, offset, filter, q, sort, fields, expand};
      return apiHandler.getAll(`events/${eventType}/rules/drafts`, params);
    },
    createDraftRuleset({eventType, data}) {
      return apiHandler.post(`events/${eventType}/rules/drafts`, data);
    },
    /**
     * @returns { rebilly.GetEventRuleSetDraftResponse } response
     */
    getDraftRuleset({eventType, id, fields = null, expand = null}) {
      const params = {fields, expand};
      return apiHandler.get(`events/${eventType}/rules/drafts/${id}`, params);
    },
    /**
     * @returns { rebilly.PutEventRuleSetDraftResponse } response
     */
    updateDraftRuleset({eventType, id, data}) {
      return apiHandler.put(`events/${eventType}/rules/drafts/${id}`, data);
    },
    deleteDraftRuleset({eventType, id}) {
      return apiHandler.delete(`events/${eventType}/rules/drafts/${id}`);
    },
  };
}

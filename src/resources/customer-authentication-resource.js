/**
* This file was auto-generated by rebilly-sdk-generator.
* Do not make direct changes to this file.
*/

export default function CustomerAuthenticationResource({apiHandler}) {
  return {
    /**
     * @returns { rebilly.GetAuthenticationOptionResponse } response
     */
    getAuthOptions() {
      return apiHandler.get(`authentication-options`);
    },
    /**
     * @returns { rebilly.PutAuthenticationOptionResponse } response
     */
    updateAuthOptions({data}) {
      return apiHandler.put(`authentication-options`, data);
    },
    /**
     * @param { rebilly.GetAuthenticationTokenCollectionRequest } request
     * @returns { rebilly.GetAuthenticationTokenCollectionResponse } response
     */
    getAllAuthTokens({limit = null, offset = null} = {}) {
      const params = {limit, offset};
      return apiHandler.getAll(`authentication-tokens`, params);
    },
    login({data}) {
      return apiHandler.post(`authentication-tokens`, data);
    },
    /**
     * @returns { rebilly.GetAuthenticationTokenVerificationResponse } response
     */
    verify({token}) {
      return apiHandler.get(`authentication-tokens/${token}`);
    },
    logout({token}) {
      return apiHandler.delete(`authentication-tokens/${token}`);
    },
    exchangeToken({token, data}) {
      return apiHandler.post(`authentication-tokens/${token}/exchange`, data);
    },
    /**
     * @param { rebilly.GetCredentialCollectionRequest } request
     * @returns { rebilly.GetCredentialCollectionResponse } response
     */
    getAllCredentials({limit = null, offset = null} = {}) {
      const params = {limit, offset};
      return apiHandler.getAll(`credentials`, params);
    },
    /**
     * @param { rebilly.CreateCredentialRequest } request
     * @returns { rebilly.PostCredentialResponse } response
     */
    createCredential({id = '', data}) {
      return apiHandler.create(`credentials/${id}`, id, data);
    },
    /**
     * @returns { rebilly.GetCredentialResponse } response
     */
    getCredential({id}) {
      return apiHandler.get(`credentials/${id}`);
    },
    /**
     * @returns { rebilly.PutCredentialResponse } response
     */
    updateCredential({id, data}) {
      return apiHandler.put(`credentials/${id}`, data);
    },
    deleteCredential({id}) {
      return apiHandler.delete(`credentials/${id}`);
    },
    /**
     * @param { rebilly.GetPasswordTokenCollectionRequest } request
     * @returns { rebilly.GetPasswordTokenCollectionResponse } response
     */
    getAllResetPasswordTokens({limit = null, offset = null} = {}) {
      const params = {limit, offset};
      return apiHandler.getAll(`password-tokens`, params);
    },
    createResetPasswordToken({data}) {
      return apiHandler.post(`password-tokens`, data);
    },
    /**
     * @returns { rebilly.GetPasswordTokenResponse } response
     */
    getResetPasswordToken({id}) {
      return apiHandler.get(`password-tokens/${id}`);
    },
    deleteResetPasswordToken({id}) {
      return apiHandler.delete(`password-tokens/${id}`);
    },
  };
}

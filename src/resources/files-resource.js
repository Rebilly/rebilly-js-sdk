/**
* This file was auto-generated by rebilly-sdk-generator.
* Do not make direct changes to this file.
*/

export default function FilesResource({apiHandler}) {
    return {
      getAllAttachments({
        limit = null,
        offset = null,
        filter = null,
        q = null,
        expand = null,
        fields = null,
        sort = null,
      } = {}) {
        const params = {limit, offset, filter, q, expand, fields, sort};
        return apiHandler.getAll(`attachments`, params);
      },
      attach({id = '', data, expand = null}) {
        const params = {expand};
        return apiHandler.create(`attachments/${id}`, id, data, params);
      },
      getAttachment({id}) {
        return apiHandler.get(`attachments/${id}`);
      },
      updateAttachment({id, data, expand = null}) {
        const params = {expand};
        return apiHandler.put(`attachments/${id}`, data, params);
      },
      detach({id}) {
        return apiHandler.delete(`attachments/${id}`);
      },
      getAll({
        limit = null,
        offset = null,
        filter = null,
        q = null,
        expand = null,
        fields = null,
        sort = null,
      } = {}) {
        const params = {limit, offset, filter, q, expand, fields, sort};
        return apiHandler.getAll(`files`, params);
      },
      upload({fileObject}) {
        return apiHandler.post('files', fileObject);
      },
      get({id}) {
        return apiHandler.get(`files/${id}`);
      },
      update({id, data}) {
        return apiHandler.put(`files/${id}`, data);
      },
      delete({id}) {
        return apiHandler.delete(`files/${id}`);
      },
      download({id}) {
        const config = {
          responseType: 'arraybuffer',
        };
        return apiHandler.download(`files/${id}/download`, config);
      },
      detachAndDelete({id}) {
        const params = {
          filter: `fileId:${id}`,
        };
        let requests = [];
        const handler = async () => {
          const attachments = this.getAllAttachments(params);
          requests.push(attachments);
          const attachmentsResult = await attachments;
  
          const promises = attachmentsResult.items.map((attachment) =>
            this.detach({id: attachment.fields.id})
          );
          requests = [...requests, promises];
          await Promise.all(promises);
  
          const result = apiHandler.delete(`files/${id}`);
          requests.push(result);
          return result;
        };
  
        const result = handler();
        // @ts-ignore
        result.cancel = () => {
          requests.forEach((req) => req.cancel());
        };
        return result;
      },
      uploadAndUpdate({fileObject, data = {description: '', tags: ['']}}) {
        const requests = [];
        const handler = async () => {
          const file = this.upload({fileObject});
          requests.push(file);
  
          await file;
          const params = {
            name: file.name,
            extension: file.extension,
            description: data.description,
            tags: data.tags,
            url: '',
          };
  
          const result = this.update({id: file.fields.id, data: params});
          requests.push(result);
          return result;
        };
  
        const result = handler();
        // @ts-ignore
        result.cancel = () => {
          requests.forEach((req) => req.cancel());
        };
        return result;
      },
    };
  }

  
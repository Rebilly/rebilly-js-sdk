{
    "openapi": "3.0.3",
    "info": {
      "version": "2.1",
      "title": "Rebilly REST API",
      "contact": {
        "name": "Rebilly API Support",
        "url": "https://www.rebilly.com/contact/",
        "email": "integrations@rebilly.com"
      },
      "license": {
        "name": "Rebilly",
        "url": "https://www.rebilly.com/api-license/"
      },
      "termsOfService": "https://www.rebilly.com/terms-of-use/",
      "x-logo": {
        "url": "https://rebilly-core.redoc.ly/rb_apiLogo.svg",
        "backgroundColor": "#0033A0"
      },
      "description": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).\n\nWe have other APIs that are also available.  Every action from our [app](https://app.rebilly.com)\nis supported by an API which is documented and available for use so that you\nmay automate any workflows necessary.  This document contains the most commonly\nintegrated resources.\n\n# Authentication\n\nWhen you sign up for an account, you are given your first secret API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.\n- [Secret API key](#section/Authentication/SecretApiKey): used for requests made\n  from the server side. Never share these keys. Keep them guarded and secure.\n- [Publishable API key](#section/Authentication/PublishableApiKey): used for \n  requests from the client side. For now can only be used to create \n  a [Payment Token](#operation/PostToken) and \n  a [File token](#operation/PostFile).\n- [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time.\n\nNever share your secret keys. Keep them guarded and secure.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Errors\nRebilly follow's the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs.  As with our normal API responses, your client must be prepared to gracefully handle additional members of the response.\n\n## Forbidden\n<RedocResponse pointer={\"#/components/responses/Forbidden\"} />\n\n## Conflict\n<RedocResponse pointer={\"#/components/responses/Conflict\"} />\n\n## NotFound\n<RedocResponse pointer={\"#/components/responses/NotFound\"} />\n\n## Unauthorized\n<RedocResponse pointer={\"#/components/responses/Unauthorized\"} />\n\n## ValidationError\n<RedocResponse pointer={\"#/components/responses/ValidationError\"} />\n\n# SDKs\n\nRebilly offers a Javascript SDK and a PHP SDK to help interact with\nthe API.  However, no SDK is required to use the API.\n\nRebilly also offers [FramePay](https://docs.rebilly.com/docs/developer-docs/framepay/),\n a client-side iFrame-based solution to help\ncreate payment tokens while minimizing PCI DSS compliance burdens\nand maximizing the customizability. [FramePay](https://docs.rebilly.com/docs/developer-docs/framepay/)\nis interacting with the [payment tokens creation operation](#operation/PostToken).\n\n## Javascript SDK\n\nInstallation and usage instructions can be found [here](https://docs.rebilly.com/docs/developer-docs/sdks).\nSDK code examples are included in these docs.\n\n## PHP SDK\nFor all PHP SDK examples provided in these docs you will need to configure the `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n\n# Using filter with collections\nRebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.\n\nHere is filter format description:\n\n- Fields and values in filter are separated with `:`: `?filter=firstName:John`.\n\n- Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.\n\n- You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.\n\n- To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.\n\n- You can use range filters like this: `?filter=amount:1..10`.\n\n- You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.\n\n- You can create some [predefined values lists](https://user-api-docs.rebilly.com/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`\n\n# Expand to include embedded objects\nRebilly provides the ability to pre-load additional \nobjects with a request. \n\nYou can use `?expand` param on most requests to expand\nand include embedded objects within the\n`_embedded` property of the response.\n\nThe `_embedded` property contains an array of \nobjects keyed by the expand parameter value(s).\n\nYou may expand multiple objects by passing them\nas comma-separated to the expand value like so:\n\n```\n?expand=recentInvoice,customer\n```\n\nAnd in the response, you would see:\n\n```\n\"_embedded\": [\n    \"recentInvoice\": {...},\n    \"customer\": {...}\n]\n```\nExpand may be utilitized not only on `GET` requests but also on `PATCH`, `POST`, `PUT` requests too.\n\n\n# Getting started guide\n\nRebilly's API has over 300 operations.  That's more than you'll \nneed to implement your use cases.  If you have a use \ncase you would like to implement, please consult us for\nfeedback on the best API operations for the task.\n\nOur getting started guide will demonstrate a basic order form use\ncase.  It will allow us to highlight core resources\nin Rebilly that will be helpful for many other use cases\ntoo.\n\nWithin 25 minutes, you'll have sent API requests (via our console)\nto create a subscription order.\n\n[Click here to visit our API Guide Tutorial](https://api-guides.rebilly.com/).\n"
    },
    "servers": [
      {
        "url": "https://api-sandbox.rebilly.com",
        "description": "Sandbox Server."
      },
      {
        "url": "https://api.rebilly.com",
        "description": "Live Server."
      }
    ],
    "tags": [
      {
        "name": "3D Secure",
        "description": "3D Secure is a way to authenticate and protect transactions.  Typically,\nit's only possible to protect the initial transaction in an order\nwith 3D Secure.\n"
      },
      {
        "name": "AML",
        "description": "AML, also known as Anti-Money-Laundering is an endpoint that searches multiple\nPEP, Sanctions, and Adverse Media lists for listed identities or media for screening\npurposes. Used during some transaction processing and on Contact creation, it helps\ndetermine whether someone is blocklisted or has political or economic sanctions against\nthem.\n"
      },
      {
        "name": "Bank Accounts",
        "description": "Bank Accounts are a type of payment instrument used to collect\nACH (echeck) payments, similar to how a payment\ncard would be used to for a credit card payment.\n"
      },
      {
        "name": "Blocklists",
        "description": "Your blocklists contains values of customerIds, email addresses,\nipAddresses, bank identification numbers, countries or payment cards that\nyou do NOT want to do business with. They are a good tool for managing\nrisk. A blocklist entry that expires after a period of time we call a\ngreylist.\n"
      },
      {
        "name": "Coupons",
        "description": "Coupons allows to apply different types of discounts to Invoices, Orders and Plans. Redeemed Coupons will be applied only to Invoices with the same currency.\n"
      },
      {
        "name": "Customers",
        "description": "Customers are your customers, sometimes known as accounts, clients,\nmembers, patrons, or players in other systems.\n"
      },
      {
        "name": "Customers Timeline",
        "description": "The customers timeline keeps an audit trail of changes and activity for each customer.\n"
      },
      {
        "name": "KYC Documents",
        "description": "Customer KYC files uploaded on behalf of a customer, tagged with a document type and submitted for validation.\n"
      },
      {
        "name": "Customer Authentication",
        "description": "Create authentication credentials, login, logout, and verify your customers.\n"
      },
      {
        "name": "Custom Fields",
        "description": "Create additional custom fields for particular resources.  You may name,\ndescribe, and determine the type of the schema.\n"
      },
      {
        "name": "Disputes",
        "description": "Handle disputes (chargebacks and retrievals).\n"
      },
      {
        "name": "Files",
        "description": "A File is an entity that can store a physical file and some metadata. It also provides an easy access to\nits size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored\nfiles.\nThere are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending\nfile contents as POST body), fetching from URL (by providing the file URL via 'url' param)\nAttachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,\nTransaction, Order, Plan, Product, Invoice, Note. That allows to quickly find and use files related to\nthose specific entities.\n"
      },
      {
        "name": "Invoices",
        "description": "Invoices leave a record for both you and your customer of the products sold.\n"
      },
      {
        "name": "Payment Instruments",
        "description": "The Payment Instrument allows you to accept a variety of payment methods through a single API.\n"
      },
      {
        "name": "Payment Cards",
        "description": "Payment cards are a type of payment instrument used for credit and debit card\nsales.  Rebilly securely vaults the full payment card number, and can pass it\nonward securely to any gateway account to transact business.\n"
      },
      {
        "name": "PayPal Accounts",
        "description": "PayPal Accounts are used for paying with PayPal.  We can generate a BAID (billing\nagreement id) which will allow for recurring billing.\n"
      },
      {
        "name": "Payment Tokens",
        "description": "Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment\ntoken can be made using a different authentication scheme (refer to the public key\nauthentication scheme in the Authentication section), which allows you to\ncreate a payment token directly from the browser, bypassing the need to send\nsensitive cardholder info to your servers.  We recommend using this with our\nRebilly.js library, which helps you wire a form into this API resource and create\npayment tokens.\n"
      },
      {
        "name": "Plans",
        "description": "Plans are a template for making a subscription.  For example, you may have a plan\nthat has a 30-day free trial followed by a recurring charge of $19.95 per month\nuntil canceled.  The combination of the plan and a request to make an order\nwill apply those instructions to create the invoices according to the plan's\nschedule.\n"
      },
      {
        "name": "Products",
        "description": "A product describes what you sell (goods or services).\nA product determines how what you sell appears on invoices and receipts.\nThe pricing for products is set in Plans.  One product can have many\nplans.\n"
      },
      {
        "name": "Reports",
        "description": "The Rebilly Reporting API is currently experimental. You may see\nthe [Reports API Documentation here](https://reports-api-docs.rebilly.com).\n"
      },
      {
        "name": "Search",
        "description": "Search data including customers, invoices, orders, transactions and more.\n"
      },
      {
        "name": "Shipping Zones",
        "description": "A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.\n"
      },
      {
        "name": "Orders",
        "description": "An order applies a plan's template to create invoice(s) for a customer, optionally at the appropriate scheduled intervals. A subscription order may also determine if the payment is collected automatically (with autopay set true).\n"
      },
      {
        "name": "Tags",
        "description": "Tag customers to better organize your data.\n"
      },
      {
        "name": "Taxes",
        "description": "You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n"
      },
      {
        "name": "Transactions",
        "description": "Get and refund transactions.\n"
      },
      {
        "name": "Users",
        "description": "The Rebilly User API is primarily for our GUI apps.  You may see\nthe [User API Documentation here](https://user-api-docs.rebilly.com).\nA User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.  It has resources less commonly integrated by\n3rd parties.\n"
      }
    ],
    "x-tagGroups": [
      {
        "name": "Customers",
        "tags": [
          "Customers",
          "Customer Authentication",
          "KYC Documents",
          "AML",
          "Tags",
          "Customers Timeline"
        ]
      },
      {
        "name": "Payment Instruments",
        "tags": [
          "Payment Instruments",
          "Payment Tokens",
          "Payment Cards",
          "Bank Accounts",
          "PayPal Accounts"
        ]
      },
      {
        "name": "Payments",
        "tags": [
          "Transactions",
          "3D Secure",
          "Disputes",
          "Blocklists"
        ]
      },
      {
        "name": "Orders & Invoices",
        "tags": [
          "Orders",
          "Invoices",
          "Plans",
          "Products",
          "Coupons",
          "Shipping Zones",
          "Taxes"
        ]
      },
      {
        "name": "Misc",
        "tags": [
          "Custom Fields",
          "Files",
          "Reports",
          "Search",
          "Users"
        ]
      }
    ],
    "security": [
      {
        "SecretApiKey": []
      },
      {
        "JWT": []
      }
    ],
    "paths": {
      "/3dsecure": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "3D Secure"
          ],
          "summary": "Retrieve a list of ThreeDSecure entries",
          "operationId": "Get3DSecureCollection",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ThreeDSecure"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.threeDSecure.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100}; \nconst secondCollection = await api.threeDSecure.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(entry => console.log(entry.fields.customerId));"
            }
          ]
        },
        "post": {
          "tags": [
            "3D Secure"
          ],
          "summary": "Create a ThreeDSecure entry",
          "operationId": "Post3DSecure",
          "description": "Create a ThreeDSecure entry.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreeDSecure"
                }
              }
            },
            "description": "ThreeDSecure resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "ThreeDSecure entry was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ThreeDSecure"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new entry\nconst data = {\n    customerId: 'foobar-001',\n    websiteId: 'my-website-id',\n    paymentCardId: 'a-certain-card-id',\n    gatewayAccountId: 'main-gateway-id',\n    enrolled: 'Y',\n    // enrollment electronic \n    // commerce indicator\n    enrollmentEci: 'abc',\n    // electronic commerce indicator\n    eci: 0,\n    // cardholder authentication verification value\n    cavv: '1234',\n    // transaction Id\n    xid: 'er9349gju09u40394guj',\n    payerAuthResponseStatus: 'Y',\n    signatureVerification: 'Y',\n    amount: 12.99,\n    currency: 'USD'\n};\n\nconst entry = await api.threeDSecure.create({data});"
            }
          ]
        }
      },
      "/3dsecure/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "3D Secure"
          ],
          "summary": "Retrieve a ThreeDSecure entry",
          "operationId": "Get3DSecure",
          "description": "Retrieve a ThreeDSecure entry with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "ThreeDSecure entry was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ThreeDSecure"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const entry = await api.threeDSecure.get({id: 'foobar-001'});\nconsole.log(entry.fields.customerId);"
            }
          ]
        }
      },
      "/aml": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "AML"
          ],
          "summary": "Search PEP/Sanctions/Adverse Media lists",
          "operationId": "GetAmlEntry",
          "description": "Search multiple PEP/Sanctions/Adverse Media lists with first and last name to find any blocklisted identities.\nPerforms a fuzzy search including soundex. Not all fields are guaranteed to be filled.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/organizationId"
            },
            {
              "name": "firstName",
              "in": "query",
              "description": "First name of individual to search."
            },
            {
              "name": "lastName",
              "in": "query",
              "description": "Last name of individual to search."
            },
            {
              "name": "dob",
              "in": "query",
              "required": false,
              "description": "Date of birth in format YYYY-MM-DD."
            },
            {
              "name": "country",
              "in": "query",
              "required": false,
              "description": "Country of individual as an ISO Alpha-2 code."
            }
          ],
          "responses": {
            "200": {
              "description": "An array of objects representing hits, or an empty array if none are found.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AML"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/attachments": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Retrieve a list of Attachments",
          "operationId": "GetAttachmentCollection",
          "description": "Retrieve a list of attachments.\nYou may sort by the id, name, relatedId, relatedType, fileId, createdTime, and updatedTime.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionExpand"
            },
            {
              "$ref": "#/components/parameters/collectionFields"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Attachments was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Attachment"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$attachments = $client->attachments()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.files.getAllAttachments();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.files.getAllAttachments(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(attachment => console.log(attachment.fields.relatedType));"
            }
          ]
        },
        "post": {
          "tags": [
            "Files"
          ],
          "summary": "Create an Attachment",
          "operationId": "PostAttachment",
          "description": "Create an Attachment.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Attachment"
          },
          "responses": {
            "201": {
              "description": "Attachment was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->create($attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// define the attachment\nconst data = {\n    // previously uploaded file ID\n    fileId: 'my-file-id',\n    relatedType: 'customer',\n    relatedId: 'my-customer-id',\n    name: 'an attachment',\n    description: `the customer's file`\n};\n\nconst attachment = await api.files.attach({data});\nconsole.log(attachment.fields.id);"
            }
          ]
        }
      },
      "/attachments/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Retrieve an Attachment",
          "operationId": "GetAttachment",
          "description": "Retrieve a Attachment with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Attachment was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$attachment = $client->attachments()->load('attachmentId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const attachment = await api.files.getAttachment({id: 'foobar-001'});\nconsole.log(attachment.fields.relatedType);"
            }
          ]
        },
        "put": {
          "tags": [
            "Files"
          ],
          "summary": "Update the Attachment with predefined ID",
          "operationId": "PutAttachment",
          "description": "Update the Attachment with predefined ID.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Attachment"
          },
          "responses": {
            "200": {
              "description": "Attachment was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            },
            "201": {
              "description": "Attachment was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->update('attachmentId', $attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// define the values to update\nconst data = {\n    relatedType: 'customer',\n    relatedId: 'my-customer-id',\n    name: 'an attachment',\n    description: `the customer's file`\n};\n\nconst attachment = await api.files.updateAttachment({id: 'foobar-001', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Files"
          ],
          "summary": "Delete an Attachment",
          "operationId": "DeleteAttachment",
          "description": "Delete the Attachment with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Attachment was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->attachments()->delete('attachmentId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const request = await api.files.detach({id: 'my-attachment-id'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/authentication-options": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Read current authentication options",
          "operationId": "GetAuthenticationOption",
          "description": "Read current authentication options.\n",
          "responses": {
            "200": {
              "description": "Current authentication options was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthenticationOptions"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$authenticationOptions = $client->authenticationOptions()->load();\n"
            },
            {
              "lang": "JavaScript",
              "source": "const options = await api.customerAuthentication.getAuthOptions();\nconsole.log(options.fields.credentialTtl);"
            }
          ]
        },
        "put": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Change authentication options",
          "operationId": "PutAuthenticationOption",
          "description": "Change options.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationOptions"
                }
              }
            },
            "description": "Authentication Options resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Authentication Options were updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationOptions"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$authenticationOptionsForm = new Rebilly\\Entities\\AuthenticationOptions();\n// Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.\n$authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');\n\ntry {\n    $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the authentication options\nconst data = {\n    passwordPattern: null,\n    credentialTtl: 10,\n    authTokenTtl: 20,\n    resetTokenTtl: 30\n};\n\nconst options = await api.customerAuthentication.updateAuthOptions({data});\nconsole.log(options.fields.credentialTtl);"
            }
          ]
        }
      },
      "/authentication-tokens": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Retrieve a list of auth tokens",
          "operationId": "GetAuthenticationTokenCollection",
          "description": "Retrieve a list of auth tokens.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of auth tokens was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthenticationToken"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$authenticationTokens = $client->authenticationTokens()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.customerAuthentication.getAllAuthTokens();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100}; \nconst secondCollection = await api.customerAuthentication.getAllAuthTokens(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(token => console.log(token.fields.username));"
            }
          ]
        },
        "post": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Login",
          "operationId": "PostAuthenticationToken",
          "description": "Login a customer.\n",
          "security": [
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationToken"
                }
              }
            },
            "description": "AuthenticationToken resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Login successful.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationToken"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$authenticationForm = new Rebilly\\Entities\\AuthenticationToken();\n$authenticationForm->setUsername('username');\n$authenticationForm->setPassword('test123');\n\ntry {\n    $authenticationToken = $client->authenticationTokens()->login($authenticationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "const data = {\n    username: 'foobar',\n    password: 'fuubar'\n\n    // optionally you can define an `expiredTime` to \n    // limit the duration of the session token\n\n    //expiredTime: '2017-09-18T19:17:39Z'\n};\nconst session = await api.customerAuthentication.login({data});\nconsole.log(session.fields.token);"
            }
          ]
        }
      },
      "/authentication-tokens/{token}": {
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The token identifier string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Verify",
          "operationId": "GetAuthenticationTokenVerification",
          "description": "Verify an authentication token.\n",
          "security": [
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "responses": {
            "200": {
              "description": "Authentication Token was verified.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthenticationToken"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$isVerified = $client->authenticationTokens()->verify('token');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const token = 'dcf6e32f2daee457a1db8ce5fdfbe200';\nconst verification = await api.customerAuthentication.verify({token});\n// if the the token is valid then no error will be thrown\nconsole.log(verification.reponse.status) // 200"
            }
          ]
        },
        "delete": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Logout a customer",
          "operationId": "DeleteAuthenticationToken",
          "description": "Logout a customer.\n",
          "security": [
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "responses": {
            "204": {
              "description": "Customer was logged out.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->authenticationTokens()->logout('token');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const token = 'dcf6e32f2daee457a1db8ce5fdfbe200';\nconst request = await api.customerAuthentication.logout({token});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/authentication-tokens/{token}/exchange": {
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The token identifier string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Exchange",
          "operationId": "PostAuthenticationTokenExchange",
          "description": "Exchange Authentication Token for JWT.\n\nIt will also invalidate an Authentication Token by default (so it can only be exchanged once).\n",
          "security": [
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerJWT"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Authentication Token exchanged for JWT.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerJWT"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/bank-accounts": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Bank Accounts"
          ],
          "summary": "Create a Bank Account",
          "operationId": "PostBankAccount",
          "description": "Create a Bank Account.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BankAccountCreateToken"
                    },
                    {
                      "$ref": "#/components/schemas/BankAccountCreatePlain"
                    }
                  ]
                }
              }
            },
            "description": "BankAccount resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Bank Account was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->bankAccounts()->create($bankAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new bank account\nconst data = {\n    bankName: 'My Fake Financial',\n    routingNumber: '12345678',\n    accountNumber: '12345678',\n    accountType: 'checking',\n    customerId: 'acme-001'\n};\n\n// the ID is optional\nconst firstKey = await api.bankAccounts.create({data});\n\n// or you can provide one\nconst secondKey = await api.bankAccounts.create({id: 'my-second-id', data});"
            }
          ]
        },
        "get": {
          "tags": [
            "Bank Accounts"
          ],
          "summary": "Retrieve a list of bank accounts",
          "operationId": "GetBankAccountCollection",
          "description": "Retrieve a list of Bank Accounts.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Bank Accounts was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BankAccount"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$bankAccounts = $client->bankAccounts()->search([\n    'filter' => 'customerId:testId',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.bankAccounts.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.bankAccounts.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(bankAccount => console.log(bankAccount.fields.status));"
            }
          ]
        }
      },
      "/bank-accounts/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Bank Accounts"
          ],
          "summary": "Retrieve a Bank Account",
          "operationId": "GetBankAccount",
          "description": "Retrieve a Bank Account with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Bank Account was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$bankAccount = $client->bankAccounts()->load('bankAccountId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const bankAccount = await api.bankAccounts.get({id: 'foobar-001'});\nconsole.log(bankAccount.fields.status);"
            }
          ]
        },
        "patch": {
          "tags": [
            "Bank Accounts"
          ],
          "summary": "Update a bank account's values",
          "operationId": "PatchBankAccount",
          "description": "Update bank account's values except for the account number and routing. number.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountUpdatePlain"
                }
              }
            },
            "description": "Bank Account."
          },
          "responses": {
            "200": {
              "description": "Bank Account was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// properties to be updated\nconst data = {\n    bankName: 'Your Fake Financial',\n    accountType: 'savings',\n    billingAddress: {\n        firstName: 'John'\n    }\n};\n\napi.bankAccounts.patch({id: 'id-to-update', data});\n"
            }
          ]
        },
        "put": {
          "tags": [
            "Bank Accounts"
          ],
          "summary": "Create a Bank Account with predefined ID",
          "operationId": "PutBankAccount",
          "description": "Create or update a BankAccount with predefined identifier string.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BankAccountCreateToken"
                    },
                    {
                      "$ref": "#/components/schemas/BankAccountCreatePlain"
                    }
                  ]
                }
              }
            },
            "description": "BankAccount resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "BankAccount was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            },
            "201": {
              "description": "BankAccount was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->customers()->create($bankAccountForm, 'bankAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new bank account\nconst data = {\n    bankName: 'My Fake Financial',\n    routingNumber: '12345678',\n    accountNumber: '12345678',\n    accountType: 'checking',\n    customerId: 'acme-001'\n};\n\n// the ID is optional\nconst firstKey = await api.bankAccounts.create({data});\n\n// or you can provide one\nconst secondKey = await api.bankAccounts.create({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/bank-accounts/{id}/deactivation": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Bank Accounts"
          ],
          "summary": "Deactivate a Bank Account",
          "operationId": "PostBankAccountDeactivation",
          "description": "Deactivate a Bank Account.\n",
          "responses": {
            "201": {
              "description": "Bank Account was deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$bankAccount = $client->bankAccounts()->deactivate('bankAccountId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const bankAccount = await api.bankAccounts.deactivate({id: 'id-to-deactivate'});\n\n// the bank account status will be updated to reflect the modification\nconsole.log(bankAccount.fields.status);"
            }
          ]
        }
      },
      "/blocklists": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Blocklists"
          ],
          "summary": "Retrieve a list of blocklists",
          "operationId": "GetBlocklistCollection",
          "description": "Retrieve a list of blocklists.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Blocklists was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Blocklist"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$blocklists = $client->blocklists()->search([\n    'filter' => 'value:testValue',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.blocklists.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'};\nconst secondCollection = await api.blocklists.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(blocklistItem => console.log(blocklistItem.fields.status));\n"
            }
          ]
        },
        "post": {
          "tags": [
            "Blocklists"
          ],
          "summary": "Create a blocklist",
          "operationId": "PostBlocklist",
          "description": "Create a blocklist.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Blocklist"
          },
          "responses": {
            "201": {
              "description": "Blocklist was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Blocklist"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$blocklistForm = new Rebilly\\Entities\\Blocklist();\n$blocklistForm->setType($blocklistForm::TYPE_EMAIL);\n$blocklistForm->setValue('test@test.com');\n$blocklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blocklist = $client->blocklists()->create($blocklistForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new blocklist item\nconst data = {\n    type: 'ip-address',\n    value: '63.118.98.100'\n\n    // optionally provide an `expirationTime` to make\n    // the item expire and function like a `greylist`\n\n    // expirationTime: '2017-09-18T21:50:44Z'\n};\n\n// the ID is optional\nconst firstKey = await api.blocklists.create({data});\n\n// or you can provide one\nconst secondKey = await api.blocklists.create({id: 'my-second-id', data});\n"
            }
          ]
        }
      },
      "/blocklists/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Blocklists"
          ],
          "summary": "Retrieve a blocklist",
          "operationId": "GetBlocklist",
          "description": "Retrieve a blocklist with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Blocklist was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Blocklist"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$blocklist = $client->blocklists()->load('blocklistId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const blocklistItem = await api.blocklists.get({id: 'foobar-001'});\nconsole.log(blocklistItem.fields.status);\n"
            }
          ]
        },
        "put": {
          "tags": [
            "Blocklists"
          ],
          "summary": "Create a blocklist with predefined ID",
          "operationId": "PutBlocklist",
          "description": "Create a blocklist with predefined identifier string.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Blocklist"
          },
          "responses": {
            "201": {
              "description": "Blocklist was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Blocklist"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "description": "Blocklist exist and cannot be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$blocklistForm = new Rebilly\\Entities\\Blocklist();\n$blocklistForm->setType($blocklistForm::TYPE_EMAIL);\n$blocklistForm->setValue('test@test.com');\n$blocklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blocklist = $client->blocklists()->create($blocklistForm, 'blocklistId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new blocklist item\nconst data = {\n    type: 'ip-address',\n    value: '63.118.98.100'\n\n    // optionally provide an `expirationTime` to make\n    // the item expire and function like a `greylist`\n\n    // expirationTime: '2017-09-18T21:50:44Z'\n};\n\n// the ID is optional\nconst firstKey = await api.blocklists.create({data});\n\n// or you can provide one\nconst secondKey = await api.blocklists.create({id: 'my-second-id', data});\n"
            }
          ]
        },
        "delete": {
          "tags": [
            "Blocklists"
          ],
          "summary": "Delete a blocklist",
          "operationId": "DeleteBlocklist",
          "description": "Delete a blocklist with predefined identifier string.\n",
          "responses": {
            "204": {
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "description": "Blocklist was deleted."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->blocklists()->delete('blocklistId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const request = await api.blocklists.delete({id: 'my-second-key'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204\n"
            }
          ]
        }
      },
      "/coupons-redemptions": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Coupons"
          ],
          "summary": "Retrieve a list of coupon redemptions",
          "operationId": "GetCouponRedemptionCollection",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "Coupons redemptions were retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CouponRedemption"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$couponRedemptions = $client->couponsRedemptions()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.coupons.getAllRedemptions();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.coupons.getAllRedemptions(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(coupon => console.log(coupon.fields.status));"
            }
          ]
        },
        "post": {
          "tags": [
            "Coupons"
          ],
          "summary": "Redeem a coupon",
          "operationId": "PostCouponRedemption",
          "description": "Redeem a coupon.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponRedemption"
                }
              }
            },
            "description": "Redeem a coupon.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Coupon was redeemed.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CouponRedemption"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$redemptionForm = new Rebilly\\Entities\\Coupons\\Redemption();\n$redemptionForm->setCustomerId('customerId');\n$redemptionForm->setCouponId('couponId');\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$redemptionForm->setAdditionalRestrictions($restrictionForm);\n\ntry {\n    $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// build the redemption data\nconst data = {\n  couponId: 'my-best-coupon',\n  customerId: 'foobar-001'\n};\n\nconst redemption = await api.coupons.redeem({data});\nconsole.log(redemption.fields.id);\n"
            }
          ]
        }
      },
      "/coupons-redemptions/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Coupons"
          ],
          "summary": "Retrieve a coupon redemption with specified identifier string",
          "operationId": "GetCouponRedemption",
          "responses": {
            "200": {
              "description": "Retrieve a coupon redemption with specified identifier string.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CouponRedemption"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$couponRedemption = $client->couponsRedemptions()->load('redemptionId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const redemption = await api.coupons.getRedemption({id: 'foobar-001'});\nconsole.log(redemption.fields.id);"
            }
          ]
        }
      },
      "/coupons-redemptions/{id}/cancel": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Coupons"
          ],
          "summary": "Cancel a coupon redemption",
          "operationId": "PostCouponRedemptionCancellation",
          "responses": {
            "201": {
              "description": "Cancel a coupon redemption."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->couponsRedemptions()->cancel('id');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const cancellation = await api.coupons.cancelRedemption({id: 'foobar-001'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(cancellation.response.status); // 201"
            }
          ]
        }
      },
      "/coupons": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Coupons"
          ],
          "summary": "Retrieve a list of coupons",
          "operationId": "GetCouponCollection",
          "description": "Retrieve a list of coupons.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of coupons was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Coupon"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$coupons = $client->coupons()->search([\n    'filter' => 'status:issued',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.coupons.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.coupons.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(coupon => console.log(coupon.fields.status));"
            }
          ]
        },
        "post": {
          "tags": [
            "Coupons"
          ],
          "summary": "Create a coupon",
          "operationId": "PostCoupon",
          "description": "Create a coupon.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Coupon"
          },
          "responses": {
            "201": {
              "description": "Coupon was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new \\Rebilly\\Entities\\Coupons\\Discounts\\Fixed($discountArray);\n$couponForm->setDiscount($discountForm);\n// Coupon can be used right now\n$couponForm->setIssuedTime(date('Y-m-d H:i:s'));\n\n$restrictionArray = [\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restrictions\\DiscountsPerRedemption($restrictionArray);\n\n$couponForm->setRestrictions([$restrictionForm]);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new coupon\nconst data = {\n    description: 'a new coupon',\n    issuedTime: '2017-09-19T20:46:44Z',\n    discount: {\n        type: 'percent',\n        value: 12\n    },\n    restrictions: [{\n        type: 'discounts-per-redemption',\n        quantity: 12\n    }]\n};\n\n// the ID is optional\nconst firstKey = await api.coupons.create({data});\n\n// or you can provide one\nconst secondKey = await api.coupons.create({id: 'my-second-id', data});\n"
            }
          ]
        }
      },
      "/coupons/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Coupons"
          ],
          "summary": "Retrieve a coupon",
          "operationId": "GetCoupon",
          "description": "Retrieve a coupon with specified coupon ID string.\n",
          "responses": {
            "200": {
              "description": "Coupon was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$coupon = $client->coupons()->load('couponId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const coupon = await api.coupons.get({couponId: 'foobar-001'});\nconsole.log(coupon.fields.status);\n"
            }
          ]
        },
        "put": {
          "tags": [
            "Coupons"
          ],
          "summary": "Create or update a coupon with predefined coupon ID",
          "operationId": "PutCoupon",
          "description": "Create or update a coupon with predefined coupon ID.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Coupon"
          },
          "responses": {
            "200": {
              "description": "Coupon was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            },
            "201": {
              "description": "Coupon was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Discount::TYPE_FIXED,\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new Rebilly\\Entities\\Coupons\\Discount($discountArray);\n$couponForm->setDiscount($discountForm);\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$couponForm->setRestrictions($restrictionForm);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm, 'couponId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating a coupon\nconst data = {\n    description: 'a new coupon',\n    issuedTime: '2017-09-19T20:46:44Z',\n    discount: {\n        type: 'percent',\n        value: 12\n    },\n    restrictions: [{\n        type: 'discounts-per-redemption',\n        quantity: 12\n    }]\n};\n\n// the ID is optional\nconst firstKey = await api.coupons.create({data});\n\n// or you can provide one\nconst secondKey = await api.coupons.create({id: 'my-second-id', data});\n\n\n// updating a coupon\nconst data = {\n    description: 'a small update'\n};\n\nconst coupon = await api.coupons.update({id: 'my-second-id', data});\n"
            }
          ]
        }
      },
      "/coupons/{id}/expiration": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Coupons"
          ],
          "summary": "Set a coupon's expiration time",
          "operationId": "PostCouponExpiration",
          "description": "Set a coupon's expiry time with the specified coupon ID.\nThe expiredTime of a coupon must be greater than its issuedTime.\nThis cannot be performed on expired coupons.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponExpiration"
                }
              }
            },
            "description": "Coupon resource."
          },
          "responses": {
            "201": {
              "description": "Coupon expiration was successfully set.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "description": "The coupon is already expired and has been redeemed, unable to. reschedule expiration.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const data = {\n    expiredTime: \"2020-05-25T18:51:14Z\"\n}\n\nconst coupon = await api.coupons.setExpiration({id: 'my-second-id', data});\n"
            }
          ]
        }
      },
      "/credentials": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Retrieve a list of credentials",
          "operationId": "GetCredentialCollection",
          "description": "Retrieve a list of credentials.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Credentials was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Credential"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customerCredentials = $client->customerCredentials()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.customerAuthentication.getAllCredentials();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100}; \nconst secondCollection = await api.customerAuthentication.getAllCredentials(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(credential => console.log(credential.fields.customerId));"
            }
          ]
        },
        "post": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Create a credential",
          "operationId": "PostCredential",
          "description": "Create a credential.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Credential"
          },
          "responses": {
            "201": {
              "description": "Credential was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->create($customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new credential\nconst data = {\n    username: 'foobar',\n    password: 'fuubar',\n    customerId: 'foobar-0001'\n\n    // optionally you can define an `expiredTime` to \n    // limit the duration of the credential\n\n    //expiredTime: '2017-09-18T19:17:39Z'\n};\n\n// the ID is optional\nconst firstCredential = await api.customerAuthentication.createCredential({data});\n\n// or you can provide one\nconst secondCredential = await api.customerAuthentication.createCredential({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/credentials/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Retrieve a credential",
          "operationId": "GetCredential",
          "description": "Retrieve a credential with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Credential was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customerCredential = $client->customerCredentials()->load('credentialId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const credential = await api.customerAuthentication.getCredential({id: 'my-first-id'});\nconsole.log(credential.fields.customerId);"
            }
          ]
        },
        "put": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Create or update a credential with predefined ID",
          "operationId": "PutCredential",
          "description": "Create or update a credential with predefined identifier string.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Credential"
          },
          "responses": {
            "200": {
              "description": "Credential was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            },
            "201": {
              "description": "Credential was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating a new credential\nconst data = {\n    username: 'foobar',\n    password: 'fuubar',\n    customerId: 'foobar-0001'\n\n    // optionally you can define an `expiredTime` to \n    // limit the duration of the credential\n\n    //expiredTime: '2017-09-18T19:17:39Z'\n};\n\n// the ID is optional\nconst firstCredential = await api.customerAuthentication.createCredential({data});\n\n// or you can provide one\nconst secondCredential = await api.customerAuthentication.createCredential({id: 'my-second-id', data});\n\n\n\n\n// updating a credential\nconst data = {\n    username: 'foobar',\n    password: 'hell0'\n};\n\nconst secondCredential = await api.customerAuthentication.updateCredential({id: 'my-second-id', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Delete a credential",
          "operationId": "DeleteCredential",
          "description": "Delete a credential with predefined identifier string.\n",
          "responses": {
            "204": {
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "description": "Credential was deleted."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->customerCredentials()->delete('credentialId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const request = await api.customerAuthentication.deleteCredential({id: 'my-second-key'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/custom-fields/{resource}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/customFieldResource"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Custom Fields"
          ],
          "summary": "Retrieve Custom Fields",
          "operationId": "GetCustomFieldCollection",
          "description": "Retrieve a schema of Custom Fields for the given resource type.\n",
          "responses": {
            "200": {
              "description": "A schema of Custom Fields was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "description": "The list of custom fields.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomField"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customFields = $client->customFields()->search('customers', [\n    'filter' => 'type:boolean',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters except `resource` are optional\nconst firstCollection = await api.customFields.getAll({resource: 'customers'});\n\n// alternatively you can specify one or more of them\nconst params = {resource: 'customers', limit: 20, offset: 100}; \nconst secondCollection = await api.customFields.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(customField => console.log(customField.fields.description));"
            }
          ]
        }
      },
      "/custom-fields/{resource}/{name}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/customFieldResource"
          },
          {
            "name": "name",
            "in": "path",
            "description": "The custom field's identifier string.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 60,
              "pattern": "^[\\w-]+$"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Custom Fields"
          ],
          "summary": "Retrieve a Custom Field",
          "operationId": "GetCustomField",
          "description": "Retrieve a schema of the given Custom Field for the given resource type.\n",
          "responses": {
            "200": {
              "description": "A schema of the Custom Field was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customField = $client->customFields()->load('customers', 'testFieldName');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const customField = await api.customFields.get({resource: 'customers', name: 'dob'});\nconsole.log(customField.fields.description);"
            }
          ]
        },
        "put": {
          "tags": [
            "Custom Fields"
          ],
          "summary": "Create or alter a Custom Field",
          "operationId": "PutCustomField",
          "description": "Create or alter a schema of the given Custom Field for the given resource. type.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            },
            "description": "Custom Fields schema of the given resource type.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "The Custom Field was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            },
            "201": {
              "description": "The Custom Fields was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "409": {
              "description": "The schema is in use: remove all the associated data in order to remove or alter the schema.\n",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customFieldForm = new Rebilly\\Entities\\CustomField();\n$customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);\n\ntry {\n    $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating a custom field\nconst data = {\n    name: 'Date of Birth',\n    type: 'date',\n    description: `The customer's date of birth`\n};\n\n// define the entire payload\nconst params = {resource: 'customers', name: 'dob', data};\n\n// create the custom field\nconst customField = await api.customFields.create(params);\n\n// or update the custom field\nconst customField = await api.customFields.update(params);\n\n// you can verify if the custom field is used\nconsole.log(customField.fields.isUsed);\n"
            }
          ]
        }
      },
      "/customers": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "Retrieve a list of customers",
          "operationId": "GetCustomerCollection",
          "description": "Retrieve a list of customers.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionExpand"
            },
            {
              "$ref": "#/components/parameters/collectionFields"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Customers was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Customer"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customers = $client->customers()->search([\n    'filter' => 'firstName:John',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.customers.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.customers.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(customer => console.log(customer.fields.primaryAddress.firstName));\n\n\n\n// alternatively you can get the collection as a CSV\n\n// all parameters are optional\nconst firstFile = await api.customers.downloadCSV();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondFile = await api.customers.downloadCSV(params);\n\n// access the file data to view the CSV content \nconsole.log(secondFile.data);"
            }
          ]
        },
        "post": {
          "tags": [
            "Customers"
          ],
          "summary": "Create a customer (without an ID)",
          "operationId": "PostCustomer",
          "description": "Create a customer without a predefined ID.\nThe customer's primary address\nwill be used as the default address for payment\ninstruments, subscriptions and invoices if none\nare provided.\n\nIf you wish to create the customer with a predefined\nID (which we recommend to prevent duplication), you\nmay use our `PUT` request described below.\n\nRead our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)\nto understand more.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Customer"
          },
          "responses": {
            "201": {
              "$ref": "#/components/responses/Customer"
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->create($customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new customer\nconst data = {\n    primaryAddress: {\n        firstName: 'John',\n        lastName: 'Doe',\n        emails: [{\n            label: 'main',\n            value: 'john.doe+test@grr.la',\n            primary: true\n        }],\n    }\n};\n\n// the ID is optional\nconst firstCustomer = await api.customers.create({data});\n\n// or you can provide one\nconst secondCustomer = await api.customers.create({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/customers/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "Retrieve a customer",
          "operationId": "GetCustomer",
          "description": "Retrieve a customer with specified identifier string.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionExpand"
            },
            {
              "$ref": "#/components/parameters/collectionFields"
            }
          ],
          "responses": {
            "200": {
              "description": "Customer was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customers = $client->customers()->load('myCustomerId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const customer = await api.customers.get({id: 'foobar-001'});\nconsole.log(customer.fields.primaryAddress.firstName);"
            }
          ]
        },
        "put": {
          "tags": [
            "Customers"
          ],
          "summary": "Upsert a customer with predefined ID",
          "operationId": "PutCustomer",
          "description": "Create or update (upsert) a customer with predefined identifier string.\nRead our guide to [preventing duplicates](https://api-guides.rebilly.com/core-concepts/preventing-duplicates)\nto understand more.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Customer"
          },
          "responses": {
            "200": {
              "$ref": "#/components/responses/Customer"
            },
            "201": {
              "$ref": "#/components/responses/Customer"
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->update('myCustomerId', $customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating a customer\nconst data = {\n    primaryAddress: {\n        firstName: 'John',\n        lastName: 'Doe',\n        emails: [{\n            label: 'main',\n            value: 'john.doe+test@grr.la',\n            primary: true\n        }],\n    }\n};\n\n// the ID is optional\nconst firstCustomer = await api.customers.create({data});\n\n// or you can provide one\nconst secondCustomer = await api.customers.create({id: 'my-second-id', data});\n\n\n\n// updating a customer\nconst data = {\n    primaryAddress: {\n        firstName: 'Johnny',\n        lastName: 'Doe',\n        emails: [{\n            label: 'main',\n            value: 'johnny.doe+test@grr.la',\n            primary: true\n        }],\n    }\n};\n\nconst customer = await api.customers.update({id: 'my-second-id', data});"
            }
          ]
        },
        "delete": {
          "parameters": [
            {
              "in": "query",
              "name": "targetCustomerId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The customer identifier to get the data of the deleted duplicate customer."
            }
          ],
          "tags": [
            "Customers"
          ],
          "summary": "Merge and delete a customer",
          "operationId": "DeleteCustomer",
          "description": "Merge one duplicate customer to another target customer and delete the. former.",
          "responses": {
            "204": {
              "description": "Customer has been merged and removed.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/customer-timeline-custom-events": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Retrieve a list of customer timeline custom event types",
          "operationId": "GetCustomerTimelineCustomEventTypeCollection",
          "description": "Retrieve a list of customer timeline custom event types.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of customer timeline custom event types was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        },
        "post": {
          "tags": [
            "Customers"
          ],
          "summary": "Create Customer Timeline custom event type",
          "operationId": "PostCustomerTimelineCustomEventType",
          "description": "Create Customer Timeline custom event type.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                }
              }
            },
            "description": "Customer Timeline Custom Event Type resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Customer Timeline Custom Event Type was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/customer-timeline-custom-events/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Retrieve customer timeline custom event type with specified identifier string",
          "operationId": "GetCustomerTimelineCustomEventType",
          "description": "Retrieve customer timeline custom event type.\n",
          "responses": {
            "200": {
              "description": "Customer Timeline custom event type was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTimelineCustomEvent"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/customer-timeline-events": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Retrieve a list of customer timeline messages for all customers",
          "operationId": "GetCustomerTimelineEventCollection",
          "description": "Retrieve a list of customer timeline messages for all customers.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of customer timeline messages was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomerTimeline"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/customers/{id}/lead-source": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers"
          ],
          "summary": "Retrieve a customer's Lead Source",
          "operationId": "GetCustomerLeadSource",
          "description": "Retrieve a Lead Source of given customer.\n",
          "responses": {
            "200": {
              "description": "Lead Source was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LeadSource"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customer = $client->customers()->load('myCustomerId');\n$leadSource = $customer->getLeadSource();\n"
            },
            {
              "lang": "JavaScript",
              "source": "const lead = await api.customers.getLeadSource({id: 'my-second-id'});\nconsole.log(lead.fields.affiliate);"
            }
          ]
        },
        "put": {
          "tags": [
            "Customers"
          ],
          "summary": "Create a Lead Source for a customer",
          "operationId": "PutCustomerLeadSource",
          "description": "Create a Lead Source for a customer.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeadSource"
                }
              }
            },
            "description": "Lead Source resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Lead Source was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LeadSource"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new lead source\nconst data = {\n    medium: 'foobar',\n    source: 'www.google.com',\n    campaign: 'my-first-campaign',\n    term: 'subscriptions',\n    content: 'subscription business',\n    affiliate: 'Acme',\n    subAffiliate: null,\n    salesAgent: null,\n    clickId: null,\n    path: null,\n    ipAddress: '12.34.56.78',\n    currency: 'USD',\n    amount: 0\n};\n\nconst lead = await api.customers.createLeadSource({id: 'my-second-id', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Customers"
          ],
          "summary": "Delete a Lead Source for a customer",
          "operationId": "DeleteCustomerLeadSource",
          "description": "Delete a Lead Source that belongs to a certain customer.\n",
          "responses": {
            "204": {
              "description": "Lead Source was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$customer = $client->customers()->deleteLeadSource('myCustomerId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const request = await api.customers.deleteLeadSource({id: 'my-second-id'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/customers/{id}/timeline": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Retrieve a list of customer timeline messages",
          "operationId": "GetCustomerTimelineCollection",
          "description": "Retrieve a list of customer timeline messages.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of customer timeline messages was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomerTimeline"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional except for the `id`\nconst firstCollection = await api.customers\n    .getAllTimelineMessages({id: 'my-customer'});\n\n// alternatively you can specify one or more of them\nconst params = {id: 'my-customer', limit: 20, offset: 100};\nconst secondCollection = await api.customers.getAllTimelineMessages(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items\n    .forEach(message => console.log(message.fields.eventType));"
            }
          ]
        },
        "post": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Create a customer Timeline comment or custom defined event",
          "operationId": "PostCustomerTimeline",
          "description": "Create a customer Timeline comment or custom defined event.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTimeline"
                }
              }
            },
            "description": "Customer Timeline resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Customer Timeline comment or custom defined event was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// Create a comment\nconst firstComment = await api\n    .customers.createTimelineComment({id: 'my-customer-id', data: {message: 'Your comment here'}});\n\n// Using params object, mentions and references\nconst message = `Example of mentions @user@mydomain.com and references #customers-customer-id`;\nconst params = {\n    id: 'my-customer-id',\n    data: {\n        message,\n    },\n};\nconst secondComment = await api.customers.createTimelineComment(params);"
            }
          ]
        }
      },
      "/customers/{id}/timeline/{messageId}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The Customer Timeline message ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Retrieve a customer Timeline message",
          "operationId": "GetCustomerTimeline",
          "description": "Retrieve a customer message with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Customer message was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const message = await api.customers\n    .getTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\nconsole.log(message.fields.eventType);"
            }
          ]
        },
        "delete": {
          "tags": [
            "Customers Timeline"
          ],
          "summary": "Delete a Customer Timeline message",
          "operationId": "DeleteCustomerTimeline",
          "description": "Delete a Customer Timeline message with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Customer Timeline message was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.customers\n    .deleteTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/disputes": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Disputes"
          ],
          "summary": "Retrieve a list of disputes",
          "operationId": "GetDisputeCollection",
          "description": "Retrieve a list of disputes.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of disputes was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dispute"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$disputes = $client->disputes()->search([\n    'filter' => 'transactionId:testId',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.disputes.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.disputes.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(dispute => console.log(dispute.fields.transactionId));\n\n\n\n// alternatively, you can get disputes as a CSV file\n// all parameters are optional\nconst firstFile = await api.disputes.downloadCSV();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondFile = await api.disputes.downloadCSV(params);\n\n// access the file data to view the CSV content \nconsole.log(secondFile.data);"
            }
          ]
        },
        "post": {
          "tags": [
            "Disputes"
          ],
          "summary": "Create a dispute",
          "operationId": "PostDispute",
          "description": "Create a dispute.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Dispute"
          },
          "responses": {
            "201": {
              "description": "Dispute was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dispute"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->create($disputeForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new dispute\nconst data = {\n    transactionId: 'my-transaction-id',\n    currency: 'USD',\n    amount: 5,\n    reasonCode: '1000',\n    type: 'first-chargeback',\n    status: 'response-needed',\n    acquirerReferenceNumber: '143543',\n    postedTime: '2017-09-19T20:46:48Z',\n    deadlineTime: '2017-09-19T20:46:48Z'\n};\n\n// the ID is optional\nconst firstdispute = await api.disputes.create({data});\n\n// or you can provide one\nconst secondDispute = await api.disputes.create({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/disputes/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Disputes"
          ],
          "summary": "Retrieve a dispute",
          "operationId": "GetDispute",
          "description": "Retrieve a dispute with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Dispute was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dispute"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$dispute = $client->disputes()->load('disputeId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const dispute = await api.disputes.get({id: 'foobar-001'});\nconsole.log(dispute.fields.firstName);"
            }
          ]
        },
        "put": {
          "tags": [
            "Disputes"
          ],
          "summary": "Create or update a Dispute with predefined ID",
          "operationId": "PutDispute",
          "description": "Create or update a Dispute with predefined identifier string.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Dispute"
          },
          "responses": {
            "200": {
              "description": "Dispute was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dispute"
                  }
                }
              }
            },
            "201": {
              "description": "Dispute was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dispute"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->update('disputeId', $dispute);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating a dispute\nconst data = {\n    transactionId: 'my-transaction-id',\n    currency: 'USD',\n    amount: 5,\n    reasonCode: '1000',\n    type: 'first-chargeback',\n    status: 'response-needed',\n    acquirerReferenceNumber: '143543',\n    postedTime: '2017-09-19T20:46:48Z',\n    deadlineTime: '2017-09-19T20:46:48Z'\n};\n\n// the ID is optional\nconst firstdispute = await api.disputes.create({data});\n\n// or you can provide one\nconst secondDispute = await api.disputes.create({id: 'my-second-id', data});\n\n\n\n// updating a dispute\nconst data = {\n    transactionId: 'my-other-transaction-id',\n    currency: 'USD',\n    amount: 5,\n    reasonCode: '1000',\n    type: 'first-chargeback',\n    status: 'response-needed',\n    acquirerReferenceNumber: '143543',\n    postedTime: '2017-09-19T20:46:48Z',\n    deadlineTime: '2017-09-19T20:46:48Z'\n};\n\nconst dispute = await api.disputes.update({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/files": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Retrieve a list of files",
          "operationId": "GetFileCollection",
          "description": "Retrieve a list of files.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionExpand"
            },
            {
              "$ref": "#/components/parameters/collectionFields"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Files was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/File"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$files = $client->files()->search([\n    'filter' => 'name:TestFile',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.files.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.files.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(file => console.log(file.fields.name));"
            }
          ]
        },
        "post": {
          "tags": [
            "Files"
          ],
          "summary": "Create a file",
          "operationId": "PostFile",
          "security": [
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Additionally, a file can be sent with:.\n - multipart/form-data POST request: in this case all property names are the same as the JSON ones (`file` is an uploaded file)\n - file body request: the file body is sent as the request body, with the appropriate `Content-Type`. No additional\n properties can be set along the request data\n\nThe following file types only are allowed:\n - jpg\n - png\n - gif\n - pdf\n - mp3\n\n\nIf using a Publishable Api Key, only private files can be created. The files can later on be modified or used using\n a secret API key.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FileCreateFromInline"
                    },
                    {
                      "$ref": "#/components/schemas/FileCreateFromUrl"
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "File was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setUrl('http://test.com/somefile.jpg');\n\ntry {\n    $file = $client->files()->create($fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// using a FileList to fetch a file\nconst fileObject = fileList[0];\n\nconst addedFile = await api.files.upload({fileObject});\n\n\n\n\n// or, upload and update a file at the same time\n\n// using a FileList to fetch a file\nconst fileObject = fileList[0];\n\n// define file data\nconst data = {\n    description: 'my new file',\n    tags: ['original']\n};\n\nconst addedFile = await api.files.uploadAndUpdate({fileObject, data});"
            }
          ]
        }
      },
      "/files/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Retrieve a File Record",
          "operationId": "GetFile",
          "description": "Retrieve a File with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "File was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$file = $client->files()->load('fileId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const file = await api.files.get({id: 'foobar-001'});\nconsole.log(file.fields.name);"
            }
          ]
        },
        "put": {
          "tags": [
            "Files"
          ],
          "summary": "Update the File with predefined ID",
          "operationId": "PutFile",
          "description": "Update the File with predefined ID. Note that file can be uploaded with POST. only.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            },
            "description": "File resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "File was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setDescription('This is a test file');\n\ntry {\n    $file = $client->files()->update('fileId', $fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// define the values to update\nconst data = {\n    name: 'new file name',\n    description: 'a fitting description',\n    tags: ['original']\n};\n\nconst file = await api.files.update({id: 'my-file-id', data});\n\n\n\n\n// or, upload and update a file at the same time\n\n// using a FileList to fetch a file\nconst fileObject = fileList[0];\n\n// define file data\nconst data = {\n    description: 'my new file',\n    tags: ['original']\n};\n\nconst addedFile = await api.files.uploadAndUpdate({fileObject, data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Files"
          ],
          "summary": "Delete a File",
          "operationId": "DeleteFile",
          "description": "Delete the File with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "File was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->files()->delete('fileId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "// simply delete a file\nconst request = await api.files.delete({id: 'my-file-id'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204\n\n\n\n\n// or, delete a file and its related resource attachments\n// use this method to remove the file completely from all resources at once.\n\nconst request = await api.files.detachAndDelete({id: 'my-file-id'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/files/{id}/download": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/imageSize"
          }
        ],
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Download a file",
          "operationId": "GetFileDownload",
          "description": "Download a file.\n",
          "responses": {
            "200": {
              "description": "The file was retrieved successfully.",
              "headers": {
                "Content-Length": {
                  "description": "The number of bytes in the file.",
                  "schema": {
                    "type": "integer"
                  }
                },
                "Content-Type": {
                  "description": "The MIME type of the file.",
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "readOnly": true
                  }
                }
              }
            },
            "302": {
              "$ref": "#/components/responses/Found"
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const file = await api.files.download({id: 'my-file-id'});\n\n// access the file ArrayBuffer to view the content \nconsole.log(file.data);"
            }
          ]
        }
      },
      "/files/{id}/download{extension}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "name": "extension",
            "in": "path",
            "description": "File extension which also indicates the desired file format.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                ".png",
                ".jpg",
                ".gif"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Files"
          ],
          "summary": "Download image in specific format",
          "operationId": "GetFileDownloadExtension",
          "description": "Download image in specific format. Images are converted server-side.\n",
          "responses": {
            "200": {
              "description": "The file was retrieved successfully.",
              "headers": {
                "Content-Length": {
                  "description": "The number of bytes in the file.",
                  "schema": {
                    "type": "integer"
                  }
                },
                "Content-Type": {
                  "description": "The MIME type of the file.",
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "readOnly": true
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/invoices": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Retrieve a list of invoices",
          "operationId": "GetInvoiceCollection",
          "description": "Retrieve a list of invoices.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of invoices was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoices = $client->invoices()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.invoices.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.invoices.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(invoice => console.log(invoice.fields.firstName));\n\n\n\n// alternatively, download as a CSV file\n// all parameters are optional\nconst firstFile = await api.invoices.downloadCSV();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondFile = await api.invoices.downloadCSV(params);\n\n// access the file data to view the CSV content \nconsole.log(secondFile.data);"
            }
          ]
        },
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Create an invoice",
          "operationId": "PostInvoice",
          "description": "Create an invoice.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice"
          },
          "responses": {
            "201": {
              "description": "Invoice was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->create($invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new invoice\nconst data = {\n    customerId: 'foobar-0001',\n    websiteId: 'my-main-website',\n    currency: 'USD',\n    billingAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    deliveryAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    notes: `customer's first invoice`,\n};\n\n// the ID is optional\nconst firstInvoice = await api.invoices.create({data});\n\n// or you can provide one\nconst secondInvoice = await api.invoices.create({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/invoices/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Retrieve an invoice",
          "operationId": "GetInvoice",
          "description": "Retrieve an invoice with specified identifier string.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/mediaTypeJsonPdf"
            },
            {
              "$ref": "#/components/parameters/collectionExpand"
            }
          ],
          "responses": {
            "200": {
              "description": "Invoice was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                },
                "application/pdf": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoice = $client->invoices()->load('invoiceId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const invoice = await api.invoices.get({id: 'foobar-001'});\nconsole.log(invoice.fields.primaryAddress.firstName);\n\n\n// alternatively, download as a PDF file\nconst pdf = await api.invoices.downloadPDF({id: 'foobar-001'});\n// the invoice's data in arraybuffer format\nconsole.log(pdf.data);"
            }
          ]
        },
        "put": {
          "tags": [
            "Invoices"
          ],
          "summary": "Create or update an invoice with predefined ID",
          "operationId": "PutInvoice",
          "description": "Create or update an invoice with predefined identifier string.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice"
          },
          "responses": {
            "200": {
              "description": "Invoice was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "201": {
              "description": "Invoice was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->update('invoiceId', $invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating an invoice\nconst data = {\n    customerId: 'foobar-0001',\n    websiteId: 'my-main-website',\n    currency: 'USD',\n    billingAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    deliveryAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    notes: `customer's first invoice`,\n};\n\n// the ID is optional\nconst firstInvoice = await api.invoices.create({data});\n\n// or you can provide one\nconst secondInvoice = await api.invoices.create({id: 'my-second-id', data});\n\n\n\n// updating an invoice\nconst data = {\n    customerId: 'foobar-0001',\n    websiteId: 'my-main-website',\n    currency: 'USD',\n    billingAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    deliveryAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    notes: `customer's first invoice`,\n};\n\nconst invoice = await api.invoices.update({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/invoices/{id}/items": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Retrieve invoice items",
          "operationId": "GetInvoiceItemCollection",
          "description": "Retrieve an invoice items with specified invoice identifier string.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionExpand"
            }
          ],
          "responses": {
            "200": {
              "description": "Invoice items were retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/InvoiceItem"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoiceItems = $client->invoiceItems()->search('invoiceId', [\n    'filter' => 'quantity:5',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// get the top 20 invoice items for this ID\nconst invoiceItems = await api.invoices.getAllInvoiceItems({id: 'my-invoice-id', limit: 20});\ninvoiceItems.items.forEach(item => console.log(item.fields.description));"
            }
          ]
        },
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Create an invoice item",
          "operationId": "PostInvoiceItem",
          "description": "Create an invoice item.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItem"
                }
              }
            },
            "description": "InvoiceItem resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "InvoiceItem was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvoiceItem"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoiceItemForm = new Rebilly\\Entities\\InvoiceItem();\n$invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);\n$invoiceItemForm->setUnitPrice(0.99);\n$invoiceItemForm->setQuantity(5);\n\ntry {\n    $invoiceItem = $client->invoiceItems()->create($invoiceItemForm, 'invoiceId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new invoice item\nconst data = {\n    type: 'debit', \n    unitPrice: 5\n};\n\nconst invoiceItem = await api.invoices.createInvoiceItem({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/invoices/{id}/issue": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Issue an invoice",
          "operationId": "PostInvoiceIssuance",
          "description": "Issue an invoice with specified identifier string. It must be in `draft` status.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceIssue"
                }
              }
            },
            "description": "InvoiceIssue resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Invoice was issued successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoice = $client->invoices()->issue('invoiceId', '2025-01-01 05:00:00');\n"
            },
            {
              "lang": "JavaScript",
              "source": "// define the issued time\nconst data = {\n    issuedTime: \"2017-09-19T20:46:51Z\"\n};\n\n// issue the invoice without an issued time\nconst firstInvoice = await api.invoices.issue({id: 'my-first-id'});\n\n// or include it\nconst secondInvoice = await api.invoices.issue({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/invoices/{id}/abandon": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Abandon an invoice",
          "operationId": "PostInvoiceAbandonment",
          "description": "Abandon an invoice with specified identifier string.\n",
          "responses": {
            "201": {
              "description": "Invoice was abandoned successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoice = $client->invoices()->abandon('invoiceId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const abandonedInvoice = await api.invoices.abandon({id: 'my-invoice-id'});\nconsole.log(abandonedInvoice.fields.status);"
            }
          ]
        }
      },
      "/invoices/{id}/void": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Void an invoice",
          "operationId": "PostInvoiceVoid",
          "description": "Void an invoice with specified identifier string.\n",
          "responses": {
            "201": {
              "description": "Invoice was voided successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$invoice = $client->invoices()->void('invoiceId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const voidedInvoice = await api.invoices.void({id: 'my-invoice-id'});\nconsole.log(voidedInvoice.fields.status);"
            }
          ]
        }
      },
      "/invoices/{id}/recalculate": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Recalculate an invoice",
          "operationId": "PostInvoiceRecalculation",
          "description": "Recalculate an invoice with specified identifier string.\nIt will recalculate shipping rates, taxes, discounts. It is useful when coupon was revoked or customer redeemed coupon after invoice was issued and you want to apply it to this invoice.\n",
          "responses": {
            "201": {
              "description": "Invoice was recalculated successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          }
        }
      },
      "/invoices/{id}/reissue": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Reissue an invoice",
          "operationId": "PostInvoiceReissuance",
          "description": "Reissue an invoice with specified identifier string. It must be issued. (status must be `unpaid` or `past-due`).\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReissue"
                }
              }
            },
            "description": "InvoiceReissue resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Invoice was reissued successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          }
        }
      },
      "/invoices/{id}/transaction-allocations": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Get transaction amounts allocated to an invoice",
          "operationId": "GetInvoiceTransactionAllocationCollection",
          "description": "Get the precise amounts from a transaction allocated as invoice payments.",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "List of allocations was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/InvoiceTransactionAllocation"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/invoices/{id}/transaction": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Apply a transaction to an invoice",
          "operationId": "PostInvoiceTransaction",
          "description": "Apply a transaction to an invoice. The invoice must be unpaid. The transaction must have a non-zero unused amount (not fully applied to other invoices).\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTransaction"
                }
              }
            },
            "description": "InvoiceTransaction resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Transaction was applied to invoice successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const params = {\n    id: 'my-invoice-id', \n    transactionId: 'my-transaction-id',\n    amount: 12,99 \n};\n\nconst invoice = await api.invoices.applyTransaction(params);\n"
            }
          ]
        }
      },
      "/customers/{id}/upcoming-invoices": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Retrieve customer's upcoming invoices",
          "operationId": "GetCustomerUpcomingInvoiceCollection",
          "description": "Retrieve a list of upcoming invoices from the subscriptions which belong to. the given customer.\nThe endpoint is temporary before upcoming invoices get a complete integration.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionExpand"
            }
          ],
          "responses": {
            "200": {
              "description": "Upcoming invoices are retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/invoices/{id}/timeline": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Retrieve a list of invoice timeline messages",
          "operationId": "GetInvoiceTimelineCollection",
          "description": "Retrieve a list of invoice timeline messages.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of invoice timeline messages was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/InvoiceTimeline"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional except for the `id`\nconst firstCollection = await api.invoices\n    .getAllTimelineMessages({id: 'my-invoice'});\n\n// alternatively you can specify one or more of them\nconst params = {id: 'my-invoice', limit: 20, offset: 100};\nconst secondCollection = await api.invoices.getAllTimelineMessages(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items\n    .forEach(message => console.log(message.fields.eventType));"
            }
          ]
        },
        "post": {
          "tags": [
            "Invoices"
          ],
          "summary": "Create an invoice Timeline comment",
          "operationId": "PostInvoiceTimeline",
          "description": "Create an invoice Timeline comment.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTimeline"
                }
              }
            },
            "description": "Invoice Timeline resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Invoice Timeline comment was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvoiceTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// Create a comment\nconst firstComment = await api\n    .invoices.createTimelineComment({id: 'my-invoice-id', data: {message: 'Your comment here'}});\n\n// Using params object, mentions and references\nconst message = `Example of mentions @user@mydomain.com and references #invoice-subscription-id`;\nconst params = {\n    id: 'my-invoice-id',\n    data: {\n        message,\n    },\n};\nconst secondComment = await api.invoices.createTimelineComment(params);"
            }
          ]
        }
      },
      "/invoices/{id}/timeline/{messageId}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The Invoice Timeline message ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoices"
          ],
          "summary": "Retrieve an Invoice Timeline message",
          "operationId": "GetInvoiceTimeline",
          "description": "Retrieve a invoice message with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Invoice message was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvoiceTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const message = await api.invoices\n    .getTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\nconsole.log(message.fields.eventType);"
            }
          ]
        },
        "delete": {
          "tags": [
            "Invoices"
          ],
          "summary": "Delete an Invoice Timeline message",
          "operationId": "DeleteInvoiceTimeline",
          "description": "Delete an Invoice Timeline message with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Invoice Timeline message was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.invoices\n    .deleteTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/kyc-documents": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Retrieve a list of KYC documents",
          "operationId": "GetKycDocumentCollection",
          "description": "Retrieve a list of KYC documents.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of KYC documents was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/KycDocument"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.kycDocuments.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'};\nconst secondCollection = await api.kycDocuments.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(document => console.log(document.fields.documentType));"
            }
          ]
        },
        "post": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Create a KYC Document",
          "operationId": "PostKycDocument",
          "description": "Create a KYC Document.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            },
            "description": "Kyc document resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Kyc document was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// All fields are required\nconst data = {\n    fieldId: '4f6cf35x-2c4y-483z-a0a9-158621f77a21',\n    customerId: '4f6cf35x-2c4y-483z-a0a9-158621f77a21',\n    documentType: 'identity-proof'\n};\n\nconst firstKycDocument = await api.kycDocuments.create({data});"
            }
          ]
        }
      },
      "/kyc-documents/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Retrieve a KYC Document",
          "operationId": "GetKycDocument",
          "description": "Retrieve a KYC document with specified identifier string.",
          "responses": {
            "200": {
              "description": "KYC document was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const document = await api.kycDocuments.get({id: 'foobar-001'});\nconsole.log(document.fields.documentType);"
            }
          ]
        },
        "put": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Create or update a KYC document with predefined ID",
          "operationId": "PutKycDocument",
          "description": "Create or update a KYC document with predefined identifier string.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocument"
                }
              }
            },
            "description": "KYC document resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "KYC document was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "201": {
              "description": "KYC document was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// define the values to update\nconst data = {\n    status: 'accepted'\n};\n\nconst document = await api.kycDocuments.update({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/kyc-documents/{id}/acceptance": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Accept a KYC document",
          "operationId": "PostKycDocumentAcceptance",
          "description": "Marks that status of the document as `accepted`. Updates the review time and reviewer information. Intended to be used for manual overrides.\n",
          "responses": {
            "201": {
              "description": "KYC document acceptance was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const acceptedDocument = await api.kycDocuments.accept({id: 'my-second-id'});\nconsole.log(acceptedDocument.fields.status);"
            }
          ]
        }
      },
      "/kyc-documents/{id}/matches": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Update a KYC document's documentMatches",
          "operationId": "PostKycDocumentMatches",
          "description": "Updates a KYC document's documentMatches. Intended to be used for manual overrides.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/IdentityMatches"
                    },
                    {
                      "$ref": "#/components/schemas/AddressMatches"
                    }
                  ]
                }
              }
            },
            "description": "Kyc document resource.",
            "required": true
          },
          "responses": {
            "204": {
              "description": "KYC document's documentMatches were updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/kyc-documents/{id}/rejection": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Reject a KYC document",
          "operationId": "PostKycDocumentRejection",
          "description": "Marks that status of the document as `rejected`. Updates the review time and reviewer information. Intended to be used for manual overrides.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KycDocumentRejection"
                }
              }
            },
            "description": "KYC document resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "KYC document rejection was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const data = {\n    type: 'document-expired',\n    message: 'Document is expired'\n}\nconst rejectedDocument = await api.kycDocuments.reject({id: 'my-second-id', data});\nconsole.log(rejectedDocument.fields.rejectionReason.type);"
            }
          ]
        }
      },
      "/kyc-documents/{id}/review": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "KYC Documents"
          ],
          "summary": "Review a KYC document",
          "operationId": "PostKycDocumentReview",
          "description": "Mark the KYC document as reviewed. Updates the review time and reviewer. information.",
          "responses": {
            "201": {
              "description": "KYC document was reviewed.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/KycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const reviewedDocument = await api.kycDocuments.review({id: 'my-second-id'});\nconsole.log(reviewedDocument.fields.status);"
            }
          ]
        }
      },
      "/password-tokens": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Retrieve a list of tokens",
          "operationId": "GetPasswordTokenCollection",
          "description": "Retrieve a list of tokens.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Reset Password Tokens was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ResetPasswordToken"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.customerAuthentication.getAllResetPasswordTokens();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100}; \nconst secondCollection = await api.customerAuthentication.getAllResetPasswordTokens(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(token => console.log(token.fields.token));"
            }
          ]
        },
        "post": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Create a Reset Password Token",
          "operationId": "PostPasswordToken",
          "description": "Create a Reset Password Token.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordToken"
                }
              }
            },
            "description": "ResetPasswordToken resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Reset Password Token was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResetPasswordToken"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// first set the required properties for the new credential\nconst data = {\n    username: 'foobar',\n    password: 'fuubar',\n    // the `credential` expects \n    // the customer credential's ID\n    credential: 'foobar-0001'\n\n    // optionally you can define an `expiredTime` to \n    // limit the duration of the reset token\n\n    //expiredTime: '2017-09-18T19:17:39Z'\n};\n\nconst resetToken = await api.customerAuthentication.createResetPasswordToken({data});"
            }
          ]
        }
      },
      "/password-tokens/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Retrieve a Reset Password Token",
          "operationId": "GetPasswordToken",
          "description": "Retrieve a Reset Password Token with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "ResetPasswordToken was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResetPasswordToken"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const token = await api.customerAuthentication.getResetPasswordToken({id: 'my-first-id'});\nconsole.log(token.fields.credential);"
            }
          ]
        },
        "delete": {
          "tags": [
            "Customer Authentication"
          ],
          "summary": "Delete a Reset Password Token",
          "operationId": "DeletePasswordToken",
          "description": "Delete a Reset Password Token with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "ResetPasswordToken was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.customerAuthentication.deleteResetPasswordToken({id: 'my-second-key'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/payment-cards": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Payment Cards"
          ],
          "summary": "Retrieve a list of Payment Cards",
          "operationId": "GetPaymentCardCollection",
          "description": "Retrieve a list of Payments Cards.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Payment Card was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PaymentCard"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCards = $client->paymentCards()->search([\n    'filter' => 'status:active',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.paymentCards.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.paymentCards.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(paymentCard => console.log(paymentCard.fields.customerId));"
            }
          ]
        },
        "post": {
          "tags": [
            "Payment Cards"
          ],
          "summary": "Create a Payment Card",
          "operationId": "PostPaymentCard",
          "description": "Create a Payment Card.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentCardCreateToken"
                    },
                    {
                      "$ref": "#/components/schemas/PaymentCardCreatePlain"
                    }
                  ]
                }
              }
            },
            "description": "PaymentCard resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Payment Card was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "201": {
              "description": "Payment Card was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new payment card\nconst data = {\n    pan: '4111111111111111',\n    expYear: 2022,\n    expMonth: 11,\n    cvv: '123',\n    billingAddress: {\n      firstName: 'Johnny',\n      lastName: 'Brown',\n      emails: [{\n          label: 'main',\n          value: 'johnny+test@grr.la',\n          primary: true\n      }]\n    },\n    // the customer ID for which\n    // we are adding a payment card\n    customerId: 'foobar-0001'\n};\n\n// the ID is optional\nconst firstCard = await api.paymentCards.create({data});\n\n// or you can provide one\nconst secondCard = await api.paymentCards.create({id: 'my-second-key', data});\n"
            }
          ]
        }
      },
      "/payment-cards/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Payment Cards"
          ],
          "summary": "Retrieve a Payment Card",
          "operationId": "GetPaymentCard",
          "description": "Retrieve a Payment Card with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Payment card was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCard = $client->paymentCards()->load('paymentCardId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const paymentCard = await api.paymentCards.get({id: 'foobar-001'});\nconsole.log(paymentCard.fields.customerId);"
            }
          ]
        },
        "patch": {
          "tags": [
            "Payment Cards"
          ],
          "summary": "Update a payment card's values",
          "operationId": "PatchPaymentCard",
          "description": "Update any of the payment card's values except for the pan.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCardUpdatePlain"
                }
              }
            },
            "description": "Payment card."
          },
          "responses": {
            "200": {
              "description": "Payment card was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        },
        "put": {
          "tags": [
            "Payment Cards"
          ],
          "summary": "Create a payment card with predefined ID",
          "operationId": "PutPaymentCard",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentCardCreateToken"
                    },
                    {
                      "$ref": "#/components/schemas/PaymentCardCreatePlain"
                    }
                  ]
                }
              }
            },
            "description": "Payment card."
          },
          "responses": {
            "200": {
              "description": "Payment card was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "201": {
              "description": "Payment card was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "description": "Payment card already exists and cannot be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new payment card\nconst data = {\n    pan: '4111111111111111',\n    expYear: 2022,\n    expMonth: 11,\n    cvv: '123',\n    billingAddress: {\n      firstName: 'Johnny',\n      lastName: 'Brown',\n      emails: [{\n          label: 'main',\n          value: 'johnny+test@grr.la',\n          primary: true\n      }]\n    },\n    // the customer ID for which\n    // we are adding a payment card\n    customerId: 'foobar-0001'\n};\n\n// the ID is optional\nconst firstCard = await api.paymentCards.create({data});\n\n// or you can provide one\nconst secondCard = await api.paymentCards.create({id: 'my-second-key', data});\n"
            }
          ]
        }
      },
      "/payment-cards/{id}/deactivation": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Payment Cards"
          ],
          "summary": "Deactivate a Payment Card",
          "operationId": "PostPaymentCardDeactivation",
          "description": "Deactivate a Payment Card.\n",
          "responses": {
            "201": {
              "description": "Payment Card was deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCard"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->paymentCards()->deactivate('paymentCardId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const paymentCard = await api.paymentCards.deactivate({id: 'my-second-key'});\nconsole.log(paymentCard.fields.status);"
            }
          ]
        }
      },
      "/paypal-accounts": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "PayPal Accounts"
          ],
          "summary": "Retrieve a list of PayPal accounts",
          "operationId": "GetPayPalAccountCollection",
          "description": "Retrieve a list of PayPal Accounts.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of PayPal Accounts was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PayPalAccount"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$payPalAccounts = $client->payPalAccounts()->search([\n    'filter' => 'status:active',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.paypalAccounts.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.paypalAccounts.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(paypalAccount => console.log(paypalAccount.fields.customerId));"
            }
          ]
        },
        "post": {
          "tags": [
            "PayPal Accounts"
          ],
          "summary": "Create a PayPal Account",
          "operationId": "PostPayPalAccount",
          "description": "Create a PayPal Account.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            },
            "description": "PayPalAccount resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "PayPal Account was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PayPalAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new paypal account\nconst data = {\n    username: 'myPaypalUser',\n    billingAddress: {\n      firstName: 'Johnny',\n      lastName: 'Brown',\n      emails: [{\n          label: 'main',\n          value: 'johnny+test@grr.la',\n          primary: true\n      }]  \n    },\n    // the customer ID for which\n    // we are adding a paypal account\n    customerId: 'foobar-0001'\n};\n\n// the ID is optional\nconst firstCard = await api.paypalAccounts.create({data});\n\n// or you can provide one\nconst secondCard = await api.paypalAccounts.create({id: 'my-second-key', data});"
            }
          ]
        }
      },
      "/paypal-accounts/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "PayPal Accounts"
          ],
          "summary": "Retrieve a PayPal Account",
          "operationId": "GetPayPalAccount",
          "description": "Retrieve a PayPal Account with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "PayPal Account was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PayPalAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$payPalAccount = $client->payPalAccounts()->load('payPalAccountId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const paypalAccount = await api.paypalAccounts.get({id: 'foobar-001'});\nconsole.log(paypalAccount.fields.customerId);"
            }
          ]
        },
        "put": {
          "tags": [
            "PayPal Accounts"
          ],
          "summary": "Create a PayPal account with predefined ID",
          "operationId": "PutPayPalAccount",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                }
              }
            },
            "description": "PayPal Account.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "PayPal Account was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PayPalAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "description": "PayPal Account exist and cannot be updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new paypal account\nconst data = {\n    username: 'myPaypalUser',\n    billingAddress: {\n      firstName: 'Johnny',\n      lastName: 'Brown',\n      emails: [{\n          label: 'main',\n          value: 'johnny+test@grr.la',\n          primary: true\n      }]  \n    },\n    // the customer ID for which\n    // we are adding a paypal account\n    customerId: 'foobar-0001'\n};\n\n// the ID is optional\nconst firstCard = await api.paypalAccounts.create({data});\n\n// or you can provide one\nconst secondCard = await api.paypalAccounts.create({id: 'my-second-key', data});"
            }
          ]
        }
      },
      "/paypal-accounts/{id}/deactivation": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "PayPal Accounts"
          ],
          "summary": "Deactivate a PayPal Account",
          "operationId": "PostPayPalAccountDeactivation",
          "description": "Deactivate a PayPal Account.\n",
          "responses": {
            "201": {
              "description": "PayPal Account was deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PayPalAccount"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->payPalAccounts()->deactivate('payPalAccountId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the activation\nconst data = {\n    websiteId: 'my-main-website',\n    // currency three letter code\n    currency: 'USD',\n    gatewayAccountId: 'my-main-gateway',\n    amount: 12.99,\n    redirectURLs: {\n        success: 'https://www.acme.com/success',\n        decline: 'https://www.acme.com/decline',\n        cancel: 'https://www.acme.com/cancel',\n        error: 'https://www.acme.com/error'\n    }\n};\n\nconst paypalAccount = await api.paypalAccounts.activate({id: 'my-second-key', data});"
            }
          ]
        }
      },
      "/payment-instruments": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Payment Instruments"
          ],
          "summary": "Retrieve a list of payment instruments",
          "operationId": "GetPaymentInstrumentCollection",
          "description": "Retrieve a list of payment instruments.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of payment instruments was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PaymentInstrument-2"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentInstruments = $client->paymentInstruments()->search([\n    'filter' => 'status:active;method:payment-card',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.paymentInstruments.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'};\nconst secondCollection = await api.paymentInstruments.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(paymentInstrument => console.log(paymentInstrument.fields.customerId));\n"
            }
          ]
        },
        "post": {
          "tags": [
            "Payment Instruments"
          ],
          "summary": "Create a Payment Instrument",
          "operationId": "PostPaymentInstrument",
          "description": "Create a payment instrument.\nIf such payment card or bank account payment instrument already exists then updates it instead.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PostPaymentInstrument"
          },
          "responses": {
            "201": {
              "description": "Payment instrument was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentInstrument-2"
                  }
                }
              }
            },
            "303": {
              "description": "Payment instrument was updated.",
              "headers": {
                "Location": {
                  "$ref": "#/components/headers/Location"
                },
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentInstrument-2"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentInstrumentForm = new Rebilly\\Entities\\CommonPaymentInstrument();\n$paymentInstrumentForm->setCustomerId('customerId');\n$paymentInstrumentForm->setPan('4111111111111111');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(8);\n$paymentInstrumentForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentInstrument = $client->paymentInstruments()->create($paymentInstrumentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n\n// Alternatively you can specify a payment token\n$paymentInstrumentForm = new Rebilly\\Entities\\CommonPaymentInstrument();\n$paymentInstrumentForm->setCustomerId('customerId');\n$paymentInstrumentForm->setToken('payment-token');\n\ntry {\n    $paymentInstrument = $client->paymentInstruments()->create($paymentInstrumentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new payment card instrument\nconst data = {\n    method: 'payment-card',\n    pan: '4111111111111111',\n    expYear: 2025,\n    expMonth: 11,\n    cvv: '123',\n    billingAddress: {\n      firstName: 'Johnny',\n      lastName: 'Brown',\n      emails: [{\n          label: 'main',\n          value: 'johnny+test@grr.la',\n          primary: true\n      }]\n    },\n    // the customer ID for which\n    // we are adding a payment card instrument\n    customerId: 'foobar-0001'\n};\n\nconst firstPaymentInstrument = await api.paymentInstruments.create({data});\n\n// alternatively you can specify a payment token\nconst tokenData = {\n    token: 'payment-token',\n    // the customer ID for which\n    // we are adding a payment card instrument\n    customerId: 'foobar-0001'\n};\n\nconst secondPaymentInstrument = await api.paymentInstruments.create({tokenData});\n"
            }
          ]
        }
      },
      "/payment-instruments/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Payment Instruments"
          ],
          "summary": "Retrieve a Payment Instrument",
          "operationId": "GetPaymentInstrument",
          "description": "Retrieve a payment instrument by ID.\n",
          "responses": {
            "200": {
              "description": "Payment Instrument was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentInstrument-2"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentInstrument = $client->paymentInstruments()->load('paymentInstrumentId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const paymentInstrument = await api.paymentInstruments.get({id: 'payment-instrument-id'});\n\nconsole.log(paymentInstrument.fields.customerId);\n"
            }
          ]
        },
        "patch": {
          "tags": [
            "Payment Instruments"
          ],
          "summary": "Update a Payment Instrument's values",
          "operationId": "PatchPaymentInstrument",
          "description": "Update allowed payment instrument's values.",
          "requestBody": {
            "$ref": "#/components/requestBodies/PatchPaymentInstrument"
          },
          "responses": {
            "200": {
              "description": "Payment instrument was updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentInstrument-2"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentInstrumentForm = new Rebilly\\Entities\\CommonPaymentInstrument();\n$paymentInstrumentForm->setCvv('123');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(12);\n$paymentInstrumentForm->setBillingAddress([\n    'firstName' => 'John',\n]);\n\ntry {\n    $paymentInstrument = $client->paymentInstruments()->update('paymentInstrumentId', $paymentInstrumentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n\n// Alternatively you can specify a partial token\n$paymentInstrumentForm = new Rebilly\\Entities\\CommonPaymentInstrument();\n$paymentInstrumentForm->setToken('partial-token');\n$paymentInstrumentForm->setBillingAddress([\n    'firstName' => 'John',\n]);\n\ntry {\n    $paymentInstrument = $client->paymentInstruments()->update('paymentInstrumentId', $paymentInstrumentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// payment instrument properties to be updated\nconst data = {\n    cvv: '123',\n    expMonth: 12,\n    expYear: 2025,\n    billingAddress: {\n        firstName: 'John'\n    }\n};\n\napi.paymentInstruments.patch({id: 'id-to-update', data});\n\n// alternatively you can specify a partial token\nconst tokenData = {\n    token: 'partial-token',\n    billingAddress: {\n        firstName: 'John'\n    },\n    customFields: {\n        foo: 'bar'\n    }\n};\n\napi.paymentInstruments.patch({id: 'id-to-update', tokenData});\n"
            }
          ]
        }
      },
      "/payment-instruments/{id}/deactivation": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Payment Instruments"
          ],
          "summary": "Deactivate a payment instrument",
          "operationId": "PostPaymentInstrumentDeactivation",
          "description": "Deactivate a payment instrument.\n",
          "responses": {
            "201": {
              "description": "Payment instrument was deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentInstrument-2"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->paymentInstruments()->deactivate('paymentInstrumentId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const paymentInstrument = await api.paymentInstruments.deactivate({id: 'id-to-deactivate'});\n\nconsole.log(paymentInstrument.fields.status);\n"
            }
          ]
        }
      },
      "/plans": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Plans"
          ],
          "summary": "Retrieve a list of plans",
          "operationId": "GetPlanCollection",
          "description": "Retrieve a list of plans.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of Plans was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Plan"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$plans = $client->plans()->search([\n    'filter' => 'name:TestPlan',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.plans.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.plans.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(plan => console.log(plan.fields.name));"
            }
          ]
        },
        "post": {
          "tags": [
            "Plans"
          ],
          "summary": "Create a plan",
          "operationId": "PostPlan",
          "description": "Create a plan.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Plan"
          },
          "responses": {
            "201": {
              "description": "Plan was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n$planForm->setProductId('test-product');\n\ntry {\n    $plan = $client->plans()->create($planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new plan\nconst data = {\n    name: 'My strongest plan',\n    currency: 'USD',\n    setupAmount: 12.99,\n    // you could also include a trial if needed\n    recurringPeriodUnit: 'month',\n    recurringPeriodLength: 1,\n    recurringAmount: 25.99\n};\n\n// the ID is optional\nconst firstPlan = await api.plans.create({data});\n\n// or you can provide one\nconst secondPlan = await api.plans.create({id: 'my-second-key', data});"
            }
          ]
        }
      },
      "/plans/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Plans"
          ],
          "summary": "Retrieve a plan",
          "operationId": "GetPlan",
          "description": "Retrieve a plan with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Plan was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$plan = $client->plans()->load('planId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const plan = await api.plans.get({id: 'foobar-001'});\nconsole.log(plan.fields.name);"
            }
          ]
        },
        "put": {
          "tags": [
            "Plans"
          ],
          "summary": "Create or update a Plan with predefined ID",
          "operationId": "PutPlan",
          "description": "Create or update a Plan with predefined identifier string.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Plan"
          },
          "responses": {
            "200": {
              "description": "Plan was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            },
            "201": {
              "description": "Plan was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->update('planId', $planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new plan\nconst data = {\n    name: 'My strongest plan',\n    currency: 'USD',\n    setupAmount: 12.99,\n    // you could also include a trial if needed\n    recurringPeriodUnit: 'month',\n    recurringPeriodLength: 1,\n    recurringAmount: 25.99\n};\n\n// the ID is optional\nconst firstPlan = await api.plans.create({data});\n\n// or you can provide one\nconst secondPlan = await api.plans.create({id: 'my-second-key', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Plans"
          ],
          "summary": "Delete a Plan",
          "operationId": "DeletePlan",
          "description": "Delete a Plan with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Plan was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$client->plans()->delete('planId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const request = await api.plans.delete({id: 'my-second-key'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/products": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Products"
          ],
          "summary": "Retrieve a list of products",
          "operationId": "GetProductCollection",
          "description": "Retrieve a list of products.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of products was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.products.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.products.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(product => console.log(product.fields.name));"
            }
          ]
        },
        "post": {
          "tags": [
            "Products"
          ],
          "summary": "Create a Product",
          "operationId": "PostProduct",
          "description": "Create a Product.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Product"
          },
          "responses": {
            "201": {
              "description": "Product was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new product\nconst data = {\n    name: 'my first product',\n    description: 'made to be of the highest quality',\n    taxCategoryId: '',\n    requiresShipping: true,\n    accountingCode: '100',\n    customFields: []\n};\n\n// the ID is optional\nconst firstProduct = await api.products.create({data});\n\n// or you can provide one\nconst secondProduct = await api.products.create({id: 'my-second-key', data});"
            }
          ]
        }
      },
      "/products/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Products"
          ],
          "summary": "Retrieve a product",
          "operationId": "GetProduct",
          "description": "Retrieve a product with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Product was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const product = await api.products.get({id: 'foobar-001'});\nconsole.log(product.fields.name);"
            }
          ]
        },
        "put": {
          "tags": [
            "Products"
          ],
          "summary": "Create a product with predefined ID",
          "operationId": "PutProduct",
          "description": "Create a product with predefined identifier string.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Product"
          },
          "responses": {
            "200": {
              "description": "Product was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "201": {
              "description": "Product was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// creating a new product\nconst data = {\n    name: 'my first product',\n    description: 'made to be of the highest quality',\n    taxCategoryId: '',\n    requiresShipping: true,\n    accountingCode: '100',\n    customFields: []\n};\n\n// the ID is optional\nconst firstProduct = await api.products.create({data});\n\n// or you can provide one\nconst secondProduct = await api.products.create({id: 'my-second-key', data});\n\n\n\n// updating a product\nconst data = {\n    name: 'my first product',\n    description: 'made to be of the highest quality',\n    taxCategoryId: '20010',\n    requiresShipping: false,\n    accountingCode: '77',\n    customFields: []\n};\n\nconst product = await api.products.update({id: 'my-second-key', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Products"
          ],
          "summary": "Delete a product",
          "operationId": "DeleteProduct",
          "description": "Delete a product with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Product was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.products.delete({id: 'my-second-key'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/ready-to-pay": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Ready to Pay",
          "operationId": "PostReadyToPay",
          "description": "Get available payment methods for a specific transaction or a purchase.\n\nThe payment methods order shown to a customer **SHOULD** be the same as the order in the response.\n\nThe list of available methods is generated from available [Gateway Accounts](https://user-api-docs.rebilly.com/tag/Gateway-Accounts)\nintersected with the last matched [Rules Engine](https://user-api-docs.rebilly.com/tag/Rules#operation/PutEventRule)\n`adjust-ready-to-pay` action on `ready-to-pay-requested` event.\n\nIf there were no actions matched for the specific request – all methods supported by the Gateway Accounts are sent.\n\nTo invert this behavior – place an all-matching rule at the very end of the `ready-to-pay-requested` event in\nRules Engine with an empty `paymentMethods` property of the `adjust-ready-to-pay` action.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoreReadyToPay"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment methods retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReadyToPayMethods"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/search": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Search"
          ],
          "summary": "Search merchant data",
          "operationId": "GetSearch",
          "description": "Search merchant's data to return resources such as customers, invoices, orders, transactions.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "name": "q",
              "in": "query",
              "description": "The default search. It will search across resources and many fields.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Results keyed by resource.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Search"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/shipping-zones": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Shipping Zones"
          ],
          "summary": "Retrieve a list of shipping zones",
          "operationId": "GetShippingZoneCollection",
          "description": "Retrieve a list of shipping zones.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of shipping zones was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ShippingZone"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.shippingZones.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.shippingZones.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(shippingZone => console.log(shippingZone.fields.name));"
            }
          ]
        },
        "post": {
          "tags": [
            "Shipping Zones"
          ],
          "summary": "Create a Shipping Zone",
          "operationId": "PostShippingZone",
          "description": "Create a Shipping Zone.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingZone"
                }
              }
            },
            "description": "Shipping Zone resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Shipping Zone was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ShippingZone"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new shipping zone\nconst data = {\n    name: 'free shipping',\n    rates: [\n        {\n            name: 'free shipping',\n            price: 0,\n            currency: 'USD'\n        }\n    ],\n    countries: ['US']\n};\n\n// the ID is optional\nconst firstZone = await api.shippingZones.create({data});\n\n// or you can provide one\nconst secondZone = await api.shippingZones.create({id: 'my-second-key', data});"
            }
          ]
        }
      },
      "/shipping-zones/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Shipping Zones"
          ],
          "summary": "Retrieve a shipping zone",
          "operationId": "GetShippingZone",
          "description": "Retrieve a shipping zone with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Shipping zone was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ShippingZone"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const shippingZone = await api.shippingZones.get({id: 'foobar-001'});\nconsole.log(shippingZone.fields.name);"
            }
          ]
        },
        "put": {
          "tags": [
            "Shipping Zones"
          ],
          "summary": "Create a shipping zone with predefined ID",
          "operationId": "PutShippingZone",
          "description": "Create a shipping zone with predefined identifier string.\n",
          "responses": {
            "200": {
              "description": "Shipping zone was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ShippingZone"
                  }
                }
              }
            },
            "201": {
              "description": "Shipping zone was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ShippingZone"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingZone"
                }
              }
            },
            "description": "Shipping zone resource.",
            "required": true
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// creating a new shipping zone\nconst data = {\n    name: 'free shipping',\n    rates: [\n        {\n            name: 'free shipping',\n            price: 0,\n            currency: 'USD'\n        }\n    ],\n    countries: ['US']\n};\n\n// the ID is optional\nconst firstZone = await api.shippingZones.create({data});\n\n// or you can provide one\nconst secondZone = await api.shippingZones.create({id: 'my-second-key', data});\n\n\n\n// updating a shipping zone\nconst data = {\n    name: 'normal shipping',\n    rates: [\n        {\n            name: 'flat rate',\n            price: 9.99,\n            currency: 'USD'\n        }\n    ],\n    // when null it will match any country\n    countries: null\n};\n\nconst shippingZone = await api.shippingZones.update({id: 'my-second-key', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Shipping Zones"
          ],
          "summary": "Delete a shipping zone",
          "operationId": "DeleteShippingZone",
          "description": "Delete a shipping zone with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Shipping zone was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.shippingZones.delete({id: 'my-second-key'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/subscriptions": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve a list of orders",
          "operationId": "GetSubscriptionCollection",
          "description": "Retrieve a list of orders.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/subscriptionExpand"
            },
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of subscriptions was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$subscriptions = $client->subscriptions()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.subscriptions.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.subscriptions.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(subscription => console.log(subscription.fields.customerId));\n\n\n\n// alternatively, download as CSV file\n\n// all parameters are optional\nconst firstFile = await api.subscriptions.downloadCSV();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondFile = await api.subscriptions.downloadCSV(params);\n\n// access the file data to view the CSV content \nconsole.log(secondFile.data);"
            }
          ]
        },
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Create an order",
          "operationId": "PostSubscription",
          "description": "Create an order. Consider using the upsert.\noperation to accomplish this task.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/subscriptionExpand"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription"
          },
          "responses": {
            "201": {
              "description": "Order was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setItems([\n    [\n        'planId' => 'my-plan',\n        'quantity' => 1,\n    ],\n]);\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->create($subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new subscription\nconst data = {\n    customerId: 'foobar-0001',\n    websiteId: 'my-main-website',\n    items: [\n        { planId: 'my-plan-id', quantity: '1' },\n    ],\n    // you can append this subscription to\n    // an existing invoice by passing its ID\n    initialInvoiceId: 'my-existing-invoice-id',\n    billingAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    deliveryAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    quantity: 1,\n    customFields: {}\n};\n\n// the ID is optional\nconst firstInvoice = await api.subscriptions.create({data});\n\n// or you can provide one\nconst secondInvoice = await api.subscriptions.create({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/subscriptions/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve an order",
          "operationId": "GetSubscription",
          "parameters": [
            {
              "$ref": "#/components/parameters/subscriptionExpand"
            }
          ],
          "description": "Retrieve an order with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Order was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const subscription = await api.subscriptions.get({id: 'foobar-001'});\nconsole.log(subscription.fields.billingAddress.firstName);"
            }
          ]
        },
        "put": {
          "tags": [
            "Orders"
          ],
          "summary": "Upsert an order with predefined ID",
          "operationId": "PutSubscription",
          "description": "Create or update an order with predefined identifier string.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/subscriptionExpand"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription"
          },
          "responses": {
            "200": {
              "description": "Order was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            },
            "201": {
              "description": "Order was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setItems($subscriptionForm->createItems([\n    'planId' => 'my-plan',\n    'quantity' => 1,\n]));\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// creating a subscription\nconst data = {\n    customerId: 'foobar-0001',\n    websiteId: 'my-main-website',\n    planId: 'my-plan-id',\n    // you can append this subscription to\n    // an existing invoice by passing its ID\n    initialInvoiceId: 'my-existing-invoice-id',\n    billingAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    deliveryAddress: {\n        firstName: 'Johnny',\n        lastName: 'Brown',\n        emails: [{\n            label: 'main',\n            value: 'johnny+test@grr.la',\n            primary: true\n        }],\n    },\n    quantity: 1,\n    customFields: {}\n};\n\n// the ID is optional\nconst firstInvoice = await api.subscriptions.create({data});\n\n// or you can provide one\nconst secondInvoice = await api.subscriptions.create({id: 'my-second-id', data});\n\n\n\n// updating a subscription\nconst data = {\n    // determines if a payment attempt will be automatic\n    autopay: false,\n    // set the next renewal time\n    renewalTime: '2018-09-26T15:34:29Z'\n};\n\nconst subscription = await api.subscriptions.update({id: 'my-second-id', data});"
            }
          ]
        }
      },
      "/subscriptions/{id}/change-plan": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Change an order's plan",
          "operationId": "PostSubscriptionPlanChange",
          "description": "Change an order's plan and designate when and if there should be pro-rata credits given.\nOnly active subscription orders with a single plan can be changed.\nEdit pending unpaid orders directly regardless the number of plans.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionChange"
                }
              }
            },
            "description": "Change the plan.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Order was changed.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$subscriptionChangePlanForm = new Rebilly\\Entities\\SubscriptionChangePlan();\n$subscriptionChangePlanForm->setPlanId('newPlanId');\n$subscriptionChangePlanForm->setRenewalPolicy('retain');\n$subscriptionChangePlanForm->setPreview(true);\n$subscriptionChangePlanForm->setProrated(true);\n$subscriptionChangePlanForm->setEffectiveTime('2018-02-02 00:00:00');\n\ntry {\n    $subscription = $client->subscriptions()->changePlan('subscriptionId', $subscriptionChangePlanForm);\n    echo $subscription->getLineItemSubtotal();\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// define the subscription details\nconst data = {\n    planId: 'my-other-plan',\n    renewalPolicy: 'retain',\n    prorated: false\n};\n\nconst abandonedInvoice = await api.subscriptions.changePlan({id: 'my-subscription-id', data});"
            }
          ]
        }
      },
      "/subscriptions/{id}/interim-invoice": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Issue an interim invoice for a subscription order",
          "operationId": "PostSubscriptionInterimInvoice",
          "description": "Issue an interim invoice for a subscription, typically used in conjunction. with plan changes and pro rata adjustments.\nThis process creates an invoice, adds the subscription's line items to the invoice, and issues the invoice, and applies\npayment to it if a transaction id is supplied.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionInvoice"
                }
              }
            },
            "description": "Issue an interim invoice.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Invoice was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/subscription-cancellations": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve a list of cancellations",
          "operationId": "GetSubscriptionCancellationCollection",
          "description": "Retrieve a list of cancellations for all subscriptions.",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of cancellations was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SubscriptionCancellation"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        },
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Cancel an order",
          "operationId": "PostSubscriptionCancellation",
          "description": "Cancel an order or preview the cancellation parameters before that.",
          "requestBody": {
            "$ref": "#/components/requestBodies/SubscriptionCancellation"
          },
          "responses": {
            "201": {
              "description": "Cancellation was created, the order is or will be deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscriptionCancellation"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$subscriptionCancelForm = new Rebilly\\Entities\\SubscriptionCancel();\n$subscriptionCancelForm->setEffectiveTime(new DateTime());\n\ntry {\n    $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "const data = {\n    subscriptionId: 'subscription-id-to-delete',\n    churnTime: '2020-06-10T13:55:51Z',\n}\n\n// the ID is optional\nconst firstSubscriptionCancellation = await api.subscriptionCancellations.create({data});\n\n// or you can provide one\nconst secondSubscriptionCancellation = await api.subscriptionCancellations.create({id: 'custom-cancellation-id', data});"
            }
          ]
        }
      },
      "/subscription-cancellations/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve an order сancellation",
          "operationId": "GetSubscriptionCancellation",
          "description": "Retrieve an order сancellation with specified identifier string.",
          "responses": {
            "200": {
              "description": "Cancellation was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscriptionCancellation"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        },
        "put": {
          "tags": [
            "Orders"
          ],
          "summary": "Cancel an order",
          "operationId": "PutSubscriptionCancellation",
          "description": "Cancel a subscription.",
          "requestBody": {
            "$ref": "#/components/requestBodies/SubscriptionCancellation"
          },
          "responses": {
            "200": {
              "description": "Cancellation was updated, the order is or will be deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscriptionCancellation"
                  }
                }
              }
            },
            "201": {
              "description": "Cancellation was created, the order is or will be deactivated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscriptionCancellation"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const data = {\n    subscriptionId: 'subscription-id-to-delete',\n    churnTime: '2020-06-10T13:55:51Z',\n}\n\n// the ID is optional\nconst firstSubscriptionCancellation = await api.subscriptionCancellations.create({data});\n\n// or you can provide one\nconst secondSubscriptionCancellation = await api.subscriptionCancellations.create({id: 'custom-cancellation-id', data});"
            }
          ]
        },
        "delete": {
          "tags": [
            "Orders"
          ],
          "summary": "Delete a cancellation",
          "operationId": "DeleteSubscriptionCancellation",
          "description": "Delete an order's cancellation. Only draft can be deleted.",
          "responses": {
            "204": {
              "description": "Cancellaton was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          }
        }
      },
      "/subscription-reactivations": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve a list of reactivations",
          "operationId": "GetSubscriptionReactivationCollection",
          "description": "Retrieve a list of reactivations for all subscriptions.",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of reactivations was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SubscriptionReactivation"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.subscriptionReactivations.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'};\nconst secondCollection = await api.subscriptionReactivations.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(subscription => console.log(subscription.fields.customerId));\n"
            }
          ]
        },
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Reactivate an order",
          "operationId": "PostSubscriptionReactivation",
          "description": "Reactivate a subscription.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionReactivation"
                }
              }
            },
            "description": "Reactivation resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Reactivation was created, the order is active and won't be. deactivated.\nIf there was a cancellation with status \"confirmed\", it is revoked.\n",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscriptionReactivation"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const data = {\n    subscriptionId: '4f6cf35x-2c4y-483z-a0a9-158621f77a21',\n    description: 'reactivation-reason',\n    effectiveTime: '2020-06-10T13:55:51Z',\n    renewalTime: '2020-07-10T13:55:51Z'\n};\n\nconst reactivatedSubscription = await api.subscriptionReactivations.reactivate({data});\n"
            }
          ]
        }
      },
      "/subscription-reactivations/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve an order reactivation",
          "operationId": "GetSubscriptionReactivation",
          "description": "Retrieve an order reactivation with specified identifier string.",
          "responses": {
            "200": {
              "description": "Reactivation was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscriptionReactivation"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const subscription = await api.subscriptionReactivations.get({id: 'foobar-001'});\nconsole.log(subscription.fields.description);\n"
            }
          ]
        }
      },
      "/subscriptions/{id}/upcoming-invoices": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve subscription order's upcoming invoice",
          "operationId": "GetSubscriptionUpcomingInvoiceCollection",
          "description": "Retrieve an upcoming invoice from the specified subscription order.\nThe endpoint is temporary before upcoming invoices get a complete integration.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionExpand"
            }
          ],
          "responses": {
            "200": {
              "description": "Upcoming invoices are retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/subscriptions/{id}/upcoming-invoices/{invoiceId}/issue": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The Upcoming Invoice ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Issue an upcoming invoice for early pay",
          "operationId": "PostUpcomingInvoiceIssuance",
          "description": "Issue an upcoming invoice with specified identifier string for early pay.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceIssue"
                }
              }
            },
            "description": "InvoiceIssue resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Upcoming Invoice was issued successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Invoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          }
        }
      },
      "/subscriptions/{id}/timeline": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve a list of order timeline messages",
          "operationId": "GetSubscriptionTimelineCollection",
          "description": "Retrieve a list of order timeline messages.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of order timeline messages was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OrderTimeline"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional except for the `id`\nconst firstCollection = await api.subscriptions\n    .getAllTimelineMessages({id: 'my-transaction'});\n\n// alternatively you can specify one or more of them\nconst params = {id: 'my-transaction', limit: 20, offset: 100};\nconst secondCollection = await api.subscriptions.getAllTimelineMessages(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items\n    .forEach(message => console.log(message.fields.eventType));"
            }
          ]
        },
        "post": {
          "tags": [
            "Orders"
          ],
          "summary": "Create an order Timeline comment",
          "operationId": "PostSubscriptionTimeline",
          "description": "Create an order Timeline comment.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderTimeline"
                }
              }
            },
            "description": "Order Timeline resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Order Timeline comment was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// Create a comment\nconst firstComment = await api\n    .subscriptions.createTimelineComment({id: 'my-subscription-id', data: {message: 'Your comment here'}});\n\n// Using params object, mentions and references\nconst message = `Example of mentions @user@mydomain.com and references #subscriptions-subscription-id`;\nconst params = {\n    id: 'my-subscription-id',\n    data: {\n        message,\n    },\n};\nconst secondComment = await api.subscriptions.createTimelineComment(params);"
            }
          ]
        }
      },
      "/subscriptions/{id}/timeline/{messageId}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The Order Timeline message ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Orders"
          ],
          "summary": "Retrieve an Order Timeline message",
          "operationId": "GetSubscriptionTimeline",
          "description": "Retrieve a order message with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Order message was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const message = await api.subscriptions\n    .getTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\nconsole.log(message.fields.eventType);"
            }
          ]
        },
        "delete": {
          "tags": [
            "Orders"
          ],
          "summary": "Delete an Order Timeline message",
          "operationId": "DeleteSubscriptionTimeline",
          "description": "Delete an Order Timeline message with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Order Timeline message was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.subscriptions\n    .deleteTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      },
      "/tags": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Tags"
          ],
          "summary": "Retrieve a list of tags",
          "operationId": "GetTagCollection",
          "description": "Retrieve a list of tags.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of tags was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        },
        "post": {
          "tags": [
            "Tags"
          ],
          "summary": "Create a tag",
          "operationId": "PostTag",
          "description": "Create a tag.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Tag"
          },
          "responses": {
            "201": {
              "description": "Tag was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/tags/{tag}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/tag"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Tags"
          ],
          "summary": "Retrieve a tag",
          "operationId": "GetTag",
          "description": "Retrieve a tag.\n",
          "responses": {
            "200": {
              "description": "Tag with specified name was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        },
        "patch": {
          "tags": [
            "Tags"
          ],
          "summary": "Update a tag",
          "operationId": "PatchTag",
          "description": "Update a tag.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/Tag"
          },
          "responses": {
            "200": {
              "description": "Tag was updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        },
        "delete": {
          "tags": [
            "Tags"
          ],
          "summary": "Delete a tag",
          "operationId": "DeleteTag",
          "description": "Delete a tag.\nIt's an asynchronous operation.\n",
          "responses": {
            "204": {
              "description": "Tag was deleted."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/tags/{tag}/customers": {
        "parameters": [
          {
            "$ref": "#/components/parameters/tag"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Tags"
          ],
          "summary": "Tag a list of customers",
          "operationId": "PostTagCustomerCollection",
          "description": "Tag a list of customers.\nIf the customer from the list is already tagged it will be ignored.\nIt's an asynchronous operation.\n",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "customerIds"
                  ],
                  "properties": {
                    "customerIds": {
                      "description": "The list of customer IDs.",
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 1000,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Customers was tagged."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        },
        "delete": {
          "tags": [
            "Tags"
          ],
          "summary": "Untag a list of customers",
          "operationId": "DeleteTagCustomerCollection",
          "description": "Untag a list of customers.\nIf the customer from the list is already untagged it will be ignored.\nIt's an asynchronous operation.\n",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "customerIds"
                  ],
                  "properties": {
                    "customerIds": {
                      "description": "The list of customer IDs.",
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 1000,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Customers was untagged."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/tags/{tag}/customers/{customerId}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/tag"
          },
          {
            "$ref": "#/components/parameters/customerId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Tags"
          ],
          "summary": "Tag a customer",
          "operationId": "PostTagCustomer",
          "description": "Tag a customer.\n",
          "responses": {
            "204": {
              "description": "Customer was tagged."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        },
        "delete": {
          "tags": [
            "Tags"
          ],
          "summary": "Untag a customer",
          "operationId": "DeleteTagCustomer",
          "description": "Untag a customer.\n",
          "responses": {
            "204": {
              "description": "Customer was untagged."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/tokens": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Payment Tokens"
          ],
          "summary": "Create a payment token",
          "operationId": "PostToken",
          "description": "[FramePay](https://docs.rebilly.com/docs/developer-docs/framepay/)\nis the recommended way to\ncreate a payment token because it minimizes\nPCI DSS compliance.  Once a payment token\nis created, it can only be used once.\n\nA payment token expires upon first use\nor within 30 minutes of the token creation\n(whichever comes first).\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeToken"
                }
              }
            },
            "description": "PaymentToken resource.",
            "required": true
          },
          "security": [
            {
              "PublishableApiKey": []
            },
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            }
          ],
          "responses": {
            "201": {
              "description": "Token was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompositeToken"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCardTokenForm = new Rebilly\\Entities\\PaymentCardToken();\n$paymentCardTokenForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\n$paymentInstrumentForm = new Entities\\PaymentInstruments\\PaymentCardPaymentInstrument();\n$paymentInstrumentForm->setPan('4111111111111111');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(8);\n$paymentInstrumentForm->setCvv(123);\n\n$paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new payment token\nconst data = {\n    method: 'payment-card',\n    paymentInstrument: {\n        pan: '4111111111111111',\n        expYear: 2022,\n        expMonth: 12,\n        cvv: '123'\n    },\n    billingAddress: {\n      firstName: 'Johnny',\n      lastName: 'Brown',\n      emails: [{\n          label: 'main',\n          value: 'johnny+test@grr.la',\n          primary: true\n      }]\n    }\n};\n\nconst token = await api.paymentTokens.create({data});\n"
            }
          ]
        },
        "get": {
          "tags": [
            "Payment Tokens"
          ],
          "summary": "Retrieve a list of tokens",
          "operationId": "GetTokenCollection",
          "description": "Retrieve a list of tokens.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of tokens was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CompositeToken"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCardTokens = $client->paymentCardTokens()->search([\n    'filter' => 'token:string',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.paymentTokens.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100}; \nconst secondCollection = await api.paymentTokens.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(paymentToken => console.log(paymentToken.fields.id));"
            }
          ]
        }
      },
      "/tokens/{token}": {
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The token identifier string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Payment Tokens"
          ],
          "summary": "Retrieve a token",
          "operationId": "GetToken",
          "description": "Retrieve a token with specified identifier string.\n",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "responses": {
            "200": {
              "description": "Token was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CompositeToken"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$paymentCardToken = $client->paymentCardTokens()->load('tokenId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const paymentToken = await api.paymentTokens.get({id: 'foobar-001'});\nconsole.log(paymentToken.fields.method);"
            }
          ]
        }
      },
      "/digital-wallets/validation": {
        "post": {
          "tags": [
            "Payment Tokens"
          ],
          "summary": "Validate a digital wallet session",
          "operationId": "PostDigitalWalletValidation",
          "description": "[FramePay](https://docs.rebilly.com/docs/developer-docs/framepay/)\nis the recommended way to use when validating a digital wallet session.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalWalletValidation"
                }
              }
            },
            "description": "Digital wallet validation request.",
            "required": true
          },
          "security": [
            {
              "PublishableApiKey": []
            },
            {
              "SecretApiKey": []
            },
            {
              "JWT": []
            }
          ],
          "responses": {
            "201": {
              "description": "Digital wallet validation was made.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DigitalWalletValidation"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/transactions": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Create a transaction",
          "operationId": "PostTransaction",
          "description": "Create a transaction of type `sale` or `authorize`.\nThis endpoint supports two main styles of transactions:\n  1. A real-time decision and response.\n  2. User approval/interaction is required.\n\nA real-time decision is very familiar.  You send a request, and\ninspect the `result` of the response for `approved` or `declined`.\n\nHowever, many transactions, especially those for alternative\nmethods, require the user to interact with a 3rd party.  You\nmay be able to envision PayPal, for example, the user must\ngive permission to complete the payment (or accept the\nbilling agreement).\n\nEven payment cards may require user approval in the case of\n3D secure authentication.  In the event that approval is\nrequired, you will receive a response back and notice\nthat the `result` is `unknown`.  You will find that the\n`status` is `waiting-approval`. And you will find in the\n`_links` section of the response a link for the `approvalUrl`.\n\nIn this case you would either open the `approvalUrl` in an\niframe or in a pop (better workflow for mobile).\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/TransactionRequest"
          },
          "responses": {
            "201": {
              "description": "Transaction was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// first set the properties for the new transaction\nconst data = {\n    customerId: 'foobar-0001',\n    websiteId: 'my-main-website',\n    paymentInstrument: {\n        method: 'payment-card',\n        paymentCardId: 'my-payment-card-id',\n        gatewayAccountId: 'my-gateway-account-id'\n    },\n    currency: 'USD',\n    amount: 12.99,\n    description: 'manual transaction',\n\n    // optionally you can specify a scheduled time\n    // to process the transaction at a later date\n    // scheduledTime: '2017-09-28T16:13:44Z'\n};\n\nconst transaction = await api.transactions.create({data});\n"
            }
          ]
        },
        "get": {
          "tags": [
            "Transactions"
          ],
          "summary": "Retrieve a list of transactions",
          "operationId": "GetTransactionCollection",
          "description": "Retrieve a list of transactions.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of transactions was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$transactions = $client->transactions()->search([\n    'filter' => 'result:approved',\n]);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional\nconst firstCollection = await api.transactions.getAll();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondCollection = await api.transactions.getAll(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items.forEach(transaction => console.log(transaction.fields.type));\n\n\n\n// alternatively, download as a CSV file\n\n// all parameters are optional\nconst firstFile = await api.transactions.downloadCSV();\n\n// alternatively you can specify one or more of them\nconst params = {limit: 20, offset: 100, sort: '-createdTime'}; \nconst secondFile = await api.transactions.downloadCSV(params);\n\n// access the file data to view the CSV content \nconsole.log(secondFile.data);"
            }
          ]
        }
      },
      "/transactions/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Transactions"
          ],
          "summary": "Retrieve a Transaction",
          "operationId": "GetTransaction",
          "description": "Retrieve a Transaction with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Transaction was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$transaction = $client->transactions()->load('transactionId');\n"
            },
            {
              "lang": "JavaScript",
              "source": "const transaction = await api.transactions.get({id: 'foobar-001'});\nconsole.log(transaction.fields.billingAddress.firstName);"
            }
          ]
        },
        "patch": {
          "tags": [
            "Transactions"
          ],
          "summary": "Update a transaction",
          "operationId": "PatchTransaction",
          "description": "Update a transaction's custom fields.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PatchTransactionRequest"
          },
          "responses": {
            "200": {
              "description": "Transaction was updated successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "try {\n    $transaction = $client->transactions()->patch($transactionId, $data);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "// first set the custom fields to update for the transaction\nconst data = {\n    customFields: {\n        'myCustomField': 'myCustomData',\n        'myOtherField': 'myOtherData',        \n    }\n};\n\nconst transaction = await api.transactions.patch({id: 'my-transaction-id', data});\n"
            }
          ]
        }
      },
      "/payouts": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Create a credit transaction",
          "operationId": "PostPayout",
          "description": "Create a transaction of type `credit`.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PayoutRequest"
          },
          "responses": {
            "201": {
              "description": "Transaction was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/transactions/{id}/cancel": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Cancel a pending or suspended transaction",
          "operationId": "PostTransactionCancellation",
          "description": "Cancel a scheduled transaction. Once handled a transaction cannot be canceled.",
          "responses": {
            "201": {
              "description": "Successful cancel the payment.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "try {\n    $payment = $client->transactions()->cancel('transactionId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
            },
            {
              "lang": "JavaScript",
              "source": "const transaction = await api.transactions.cancel({id: 'my-second-id', data});\nconsole.log(transaction.fields.status);"
            }
          ]
        }
      },
      "/transactions/{id}/gateway-logs": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Transactions"
          ],
          "summary": "Retrieve a Transaction Gateway Logs",
          "operationId": "GetTransactionGatewayLogCollection",
          "description": "Retrieve Gateway communication Logs for Transaction with specified identifier string.",
          "responses": {
            "200": {
              "description": "Logs were retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionGatewayLog"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const collection = await api.transactions.getGatewayLogs({id: 'my-transaction-id'});\ncollection.items.forEach(log => console.log(log.fields.url));"
            }
          ]
        }
      },
      "/transactions/{id}/query": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Query a Transaction",
          "operationId": "PostTransactionQuery",
          "description": "Query a Transaction with a specified identifier string.\nThe query will contact the gateway account to find the result and amount/currency.\nThe response should be analyzed.  If deemed appropriate, the transaction could be updated using the Transaction Update API.\n",
          "responses": {
            "201": {
              "description": "Transaction was queried successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionQuery"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/transactions/{id}/update": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Update a Transaction status",
          "operationId": "PostTransactionUpdate",
          "description": "Update a Transaction manually to completed status with given result with optional currency and amount.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Transaction was updated.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/transactions/{id}/refund": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Refund a Transaction",
          "operationId": "PostTransactionRefund",
          "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRefund"
                }
              }
            },
            "description": "Transaction resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Transaction was refunded successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "PHP",
              "source": "$transaction = $client->transactions()->refund('transactionId', 1.99);\n"
            },
            {
              "lang": "JavaScript",
              "source": "// define the refund amount\nconst data = {\n    amount: 12.99\n};\n\nconst refund = await api.transactions.switch({id: 'my-transaction-id', data});\nconsole.log(refund.fields.status);"
            }
          ]
        }
      },
      "/transactions/{id}/timeline": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Transactions"
          ],
          "summary": "Retrieve a list of transaction timeline messages",
          "operationId": "GetTransactionTimelineCollection",
          "description": "Retrieve a list of transaction timeline messages.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of transaction timeline messages was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                },
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TransactionTimeline"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// all parameters are optional except for the `id`\nconst firstCollection = await api.transactions\n    .getAllTimelineMessages({id: 'my-transaction'});\n\n// alternatively you can specify one or more of them\nconst params = {id: 'my-transaction', limit: 20, offset: 100};\nconst secondCollection = await api.transactions.getAllTimelineMessages(params);\n\n// access the collection items, each item is a Member\nsecondCollection.items\n    .forEach(message => console.log(message.fields.eventType));"
            }
          ]
        },
        "post": {
          "tags": [
            "Transactions"
          ],
          "summary": "Create a transaction Timeline comment",
          "operationId": "PostTransactionTimeline",
          "description": "Create a transaction Timeline comment.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionTimeline"
                }
              }
            },
            "description": "Transaction Timeline resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Transaction Timeline comment was created.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "// Create a comment\nconst firstComment = await api\n    .transactions.createTimelineComment({id: 'my-transaction-id', data: {message: 'Your comment here'}});\n\n// Using params object, mentions and references\nconst message = `Example of mentions @user@mydomain.com and references #transactions-transaction-id`;\nconst params = {\n    id: 'my-transaction-id',\n    data: {\n        message,\n    },\n};\nconst secondComment = await api.transactions.createTimelineComment(params);"
            }
          ]
        }
      },
      "/transactions/{id}/timeline/{messageId}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The Transaction Timeline message ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Transactions"
          ],
          "summary": "Retrieve a transaction Timeline message",
          "operationId": "GetTransactionTimeline",
          "description": "Retrieve a timeline message with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Timeline message was retrieved successfully.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionTimeline"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const message = await api.transactions\n    .getTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\nconsole.log(message.fields.eventType);"
            }
          ]
        },
        "delete": {
          "tags": [
            "Transactions"
          ],
          "summary": "Delete a Transaction Timeline message",
          "operationId": "DeleteTransactionTimeline",
          "description": "Delete a Transaction Timeline message with predefined identifier string.\n",
          "responses": {
            "204": {
              "description": "Transaction Timeline message was deleted.",
              "headers": {
                "Rate-Limit-Limit": {
                  "$ref": "#/components/headers/Rate-Limit-Limit"
                },
                "Rate-Limit-Remaining": {
                  "$ref": "#/components/headers/Rate-Limit-Remaining"
                },
                "Rate-Limit-Reset": {
                  "$ref": "#/components/headers/Rate-Limit-Reset"
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "409": {
              "$ref": "#/components/responses/Conflict"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const request = await api.transactions\n    .deleteTimelineMessage({id: 'foobar-001', messageId: 'message-202'});\n\n// the request does not return any fields but\n// you can confirm the success using the status code\nconsole.log(request.response.status); // 204"
            }
          ]
        }
      }
    },
    "components": {
      "securitySchemes": {
        "JWT": {
          "description": "You can create a JSON Web Token (JWT) via our [JWT Session resource](https://user-api-docs.rebilly.com/#operation/PostSigninRequest).\nUsage format: `Bearer <JWT>`.\n",
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        },
        "PublishableApiKey": {
          "description": "Only for the Tokens resource.\nYou can create a Publishable API Key via our [API Keys resource](https://user-api-docs.rebilly.com/#tag/API-Keys), by specifying the type as `publishable`.\n",
          "name": "Authorization",
          "type": "apiKey",
          "in": "header"
        },
        "SecretApiKey": {
          "description": "When you sign up for an account, you are given your first secret API key.\nTo do so please [follow this link.](https://app.rebilly.com/signup)\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). All API keys can be restricted to a\nsmall set of permissions (restricted API keys).\n",
          "name": "REB-APIKEY",
          "type": "apiKey",
          "in": "header"
        }
      },
      "schemas": {
        "ResourceId": {
          "type": "string",
          "description": "The resource ID. Defaults to UUID v4.",
          "maxLength": 50,
          "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
        },
        "CurrencyCode": {
          "type": "string",
          "description": "ISO 4217 alphabetic currency code.",
          "minLength": 3,
          "maxLength": 3,
          "example": "USD"
        },
        "ServerTimestamp": {
          "type": "string",
          "description": "Read-only timestamp, automatically assigned on back-end.",
          "format": "date-time",
          "readOnly": true
        },
        "Link": {
          "type": "object",
          "properties": {
            "href": {
              "description": "The link URL.",
              "type": "string"
            }
          },
          "required": [
            "href"
          ]
        },
        "SelfLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "self"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "ThreeDSecure": {
          "type": "object",
          "required": [
            "enrolled",
            "enrollmentEci",
            "customerId",
            "gatewayAccountId",
            "paymentCardId",
            "websiteId",
            "currency",
            "amount"
          ],
          "properties": {
            "id": {
              "description": "The 3D Secure entry identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "Related customer ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "Related gateway account ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "paymentCardId": {
              "description": "Related payment card ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "Related Website ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "enrolled": {
              "description": "Is the cardholder enrolled in 3DSecure.",
              "type": "string",
              "enum": [
                "Y",
                "N",
                "U"
              ]
            },
            "enrollmentEci": {
              "description": "The 3D Secure entry enrollment eci.",
              "type": "string"
            },
            "eci": {
              "description": "The 3D Secure entry electronic commerce indicator.",
              "type": "integer"
            },
            "cavv": {
              "description": "The 3D Secure entry cardholder authentication verification value.",
              "type": "string"
            },
            "xid": {
              "description": "The 3D Secure entry transaction Id.",
              "type": "string"
            },
            "payerAuthResponseStatus": {
              "description": "The 3D Secure entry Auth Response Status.",
              "type": "string",
              "enum": [
                "Y",
                "N",
                "U",
                "A"
              ]
            },
            "signatureVerification": {
              "description": "If signature was verified.",
              "type": "string",
              "enum": [
                "Y",
                "N"
              ]
            },
            "amount": {
              "description": "Transaction amount.",
              "type": "number",
              "format": "double"
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "createdTime": {
              "description": "The 3D Secure entry created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "BlankProblem": {
          "description": "The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": true,
          "properties": {
            "status": {
              "type": "integer",
              "description": "The HTTP status code.",
              "minimum": 400,
              "maximum": 599
            },
            "title": {
              "type": "string",
              "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
            }
          }
        },
        "DocumentedProblem": {
          "type": "object",
          "allOf": [
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".",
                  "format": "uri"
                }
              }
            },
            {
              "$ref": "#/components/schemas/BlankProblem"
            }
          ]
        },
        "DetailedProblem": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/BlankProblem"
            },
            {
              "properties": {
                "detail": {
                  "type": "string",
                  "description": "A human-readable explanation specific to this occurrence of the problem."
                }
              }
            }
          ]
        },
        "Problem": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/DocumentedProblem"
            },
            {
              "$ref": "#/components/schemas/DetailedProblem"
            }
          ]
        },
        "Error": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Problem"
            },
            {
              "properties": {
                "error": {
                  "deprecated": true,
                  "type": "string"
                }
              }
            }
          ]
        },
        "ValidationErrorExtensions": {
          "type": "object",
          "properties": {
            "invalidFields": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "The field name. Dot notation is used for nested object field names."
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "example": [
                {
                  "field": "field1",
                  "message": "field1 is invalid"
                },
                {
                  "field": "subObject.field2",
                  "message": "field2 is invalid"
                },
                {
                  "field": "subObject.field2",
                  "message": "another error in the field2"
                }
              ]
            }
          }
        },
        "InvalidError": {
          "description": "Invalid data was sent.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Error"
            },
            {
              "$ref": "#/components/schemas/ValidationErrorExtensions"
            }
          ]
        },
        "AML": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string",
              "description": "First Name.",
              "readOnly": true,
              "example": "Benjamin"
            },
            "lastName": {
              "type": "string",
              "description": "Last Name. `null` if it is a single-name entity.",
              "readOnly": true,
              "nullable": true,
              "example": "Franklin"
            },
            "source": {
              "type": "string",
              "readOnly": true,
              "description": "Which list this came from."
            },
            "sourceType": {
              "readOnly": true,
              "description": "The list type.",
              "type": "string",
              "enum": [
                "pep",
                "sanctions",
                "adverse-media"
              ]
            },
            "gender": {
              "type": "string",
              "readOnly": true,
              "nullable": true,
              "description": "Gender of returned identity (if `type` is `individual`)."
            },
            "title": {
              "type": "array",
              "readOnly": true,
              "nullable": true,
              "description": "The title of their position.",
              "example": [
                "Postmaster General",
                "Ambassador to France",
                "Ambassador to Sweden",
                "Supreme Executive Council of Commonwealth of Pennsylvania"
              ],
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "The record type.",
              "enum": [
                "individual",
                "entity"
              ]
            },
            "legalBasis": {
              "type": "array",
              "readOnly": true,
              "description": "List of references to legal documents if they exist.",
              "items": {
                "type": "string"
              }
            },
            "regime": {
              "type": "string",
              "readOnly": true,
              "description": "Regime.",
              "nullable": true,
              "example": "United States Government"
            },
            "confidence": {
              "type": "string",
              "description": "The source list's confidence in information.",
              "readOnly": true,
              "enum": [
                "weak",
                "medium",
                "strong",
                "very-strong"
              ]
            },
            "nationality": {
              "type": "string",
              "readOnly": true,
              "description": "The nationality of the identity."
            },
            "address": {
              "type": "array",
              "readOnly": true,
              "description": "Addresses related to the identity.",
              "items": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true,
                    "description": "Street Address Line 1."
                  },
                  "address2": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true,
                    "description": "Street Address Line 2."
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true,
                    "description": "City."
                  },
                  "region": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true,
                    "description": "State/Province/Region."
                  },
                  "country": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true,
                    "description": "Country."
                  },
                  "birthplace": {
                    "type": "boolean",
                    "default": false,
                    "readOnly": true,
                    "description": "This address is their birth place."
                  }
                }
              }
            },
            "dob": {
              "type": "array",
              "readOnly": true,
              "description": "One or more possible dates of birth.",
              "items": {
                "type": "string",
                "readOnly": true,
                "description": "Date of birth.",
                "format": "date",
                "example": "1706-01-17T00:00:00.000Z"
              }
            },
            "aliases": {
              "type": "array",
              "readOnly": true,
              "description": "List of aliases, if any.",
              "items": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "First name of alias.",
                    "readOnly": true
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Last name of alias.",
                    "readOnly": true
                  },
                  "authenticity": {
                    "type": "string",
                    "description": "The level of confidence in the alias.",
                    "readOnly": true,
                    "enum": [
                      "strong",
                      "weak",
                      "unknown"
                    ]
                  }
                }
              }
            },
            "passport": {
              "type": "array",
              "readOnly": true,
              "description": "Passport information.",
              "items": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Passport number."
                  },
                  "registrationDate": {
                    "type": "string",
                    "format": "date",
                    "readOnly": true,
                    "description": "Passport registration date."
                  }
                }
              }
            },
            "comments": {
              "type": "string",
              "readOnly": true,
              "nullable": true,
              "description": "Extra information (the content varies per list)."
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource, including links provided by the list.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "FileLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "file"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "AttachmentResourceLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "customer",
                "dispute",
                "invoice",
                "payment",
                "plan",
                "product",
                "subscription",
                "transaction"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "FileDownloadLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "download"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "SignedLinkLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "signedLink"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "PermalinkLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "permalink"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "File": {
          "type": "object",
          "properties": {
            "id": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "Original File name.",
              "type": "string"
            },
            "extension": {
              "description": "The File extension.",
              "type": "string"
            },
            "description": {
              "description": "The File description.",
              "type": "string"
            },
            "tags": {
              "description": "The tags list.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "mime": {
              "description": "The mime type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "image/png",
                "image/jpeg",
                "image/gif",
                "application/pdf",
                "audio/mpeg"
              ]
            },
            "size": {
              "description": "The File size in bytes.",
              "type": "integer",
              "readOnly": true
            },
            "width": {
              "description": "Image width, applicable to images only.",
              "type": "integer",
              "readOnly": true
            },
            "height": {
              "description": "Image height, applicable to images only.",
              "type": "integer",
              "readOnly": true
            },
            "sha1": {
              "description": "Hash sum of the file.",
              "type": "string",
              "readOnly": true
            },
            "createdTime": {
              "description": "The upload date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The latest update date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "isPublic": {
              "description": "Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.",
              "type": "boolean"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 3,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/FileDownloadLink"
                  },
                  {
                    "$ref": "#/components/schemas/SignedLinkLink"
                  },
                  {
                    "$ref": "#/components/schemas/PermalinkLink"
                  }
                ]
              }
            }
          }
        },
        "FileEmbed": {
          "type": "object",
          "description": "File object.",
          "readOnly": true,
          "properties": {
            "file": {
              "$ref": "#/components/schemas/File"
            }
          }
        },
        "Attachment": {
          "type": "object",
          "required": [
            "fileId",
            "relatedId",
            "relatedType"
          ],
          "properties": {
            "id": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "fileId": {
              "description": "Linked File object id.",
              "type": "string"
            },
            "relatedType": {
              "description": "Linked object type.",
              "type": "string",
              "enum": [
                "customer",
                "dispute",
                "gateway-timeline-comment",
                "invoice",
                "organization",
                "payment",
                "plan",
                "product",
                "subscription",
                "transaction",
                "customer-timeline-comment",
                "transaction-timeline-comment",
                "order-timeline-comment"
              ]
            },
            "relatedId": {
              "description": "Linked object Id.",
              "type": "string"
            },
            "name": {
              "description": "The Original Attachment name.",
              "type": "string"
            },
            "description": {
              "description": "The Attachment description.",
              "type": "string"
            },
            "createdTime": {
              "description": "Creation date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Latest update date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 3,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/FileLink"
                  },
                  {
                    "$ref": "#/components/schemas/AttachmentResourceLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FileEmbed"
                  }
                ]
              }
            }
          }
        },
        "AuthenticationOptions": {
          "type": "object",
          "properties": {
            "passwordPattern": {
              "description": "Allowed password pattern.",
              "type": "string"
            },
            "credentialTtl": {
              "description": "The default lifetime of the credential in seconds.",
              "type": "integer"
            },
            "authTokenTtl": {
              "description": "The default lifetime of the auth-token in seconds.",
              "type": "integer"
            },
            "resetTokenTtl": {
              "description": "The default lifetime of the reset-token in seconds.",
              "type": "integer"
            },
            "otpRequired": {
              "description": "Should OTP be required to exchange token.",
              "type": "boolean"
            }
          }
        },
        "AuthenticationToken": {
          "type": "object",
          "discriminator": {
            "propertyName": "mode",
            "mapping": {
              "password": "#/components/schemas/password",
              "passwordless": "#/components/schemas/passwordless"
            }
          },
          "properties": {
            "token": {
              "description": "The token identifier string.",
              "type": "string",
              "readOnly": true
            },
            "mode": {
              "description": "The token's generation mode.",
              "type": "string",
              "enum": [
                "password",
                "passwordless"
              ],
              "writeOnly": true,
              "default": "password"
            },
            "otpRequired": {
              "description": "Should OTP be required to exchange this token.",
              "type": "boolean"
            },
            "credentialId": {
              "description": "The credential's ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "AuthenticationTokenMetadata": {
          "type": "object",
          "properties": {
            "expiredTime": {
              "description": "Token's expired time.",
              "type": "string",
              "format": "date-time"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "password": {
          "required": [
            "username",
            "password"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/AuthenticationToken"
            },
            {
              "properties": {
                "username": {
                  "description": "The token's username.",
                  "type": "string"
                },
                "password": {
                  "description": "The token's password.",
                  "type": "string",
                  "format": "password",
                  "writeOnly": true
                },
                "customerId": {
                  "description": "The token's customer ID.",
                  "readOnly": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/AuthenticationTokenMetadata"
            }
          ]
        },
        "passwordless": {
          "required": [
            "customerId"
          ],
          "allOf": [
            {
              "$ref": "#/components/schemas/AuthenticationToken"
            },
            {
              "properties": {
                "customerId": {
                  "description": "The token's customer ID.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/AuthenticationTokenMetadata"
            }
          ]
        },
        "ApiKeyScope": {
          "type": "object",
          "properties": {
            "organizationId": {
              "description": "The array of account identifier strings.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            },
            "productId": {
              "description": "The array of product identifier strings.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            },
            "planId": {
              "description": "The array of plan identifier strings.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            },
            "customFieldName": {
              "description": "The array of custom field names.",
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 60,
                "pattern": "^[\\w-]+$"
              }
            }
          },
          "example": {
            "organizationId": [
              "organizationId-id-1"
            ]
          }
        },
        "AclPermissions": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "operationId"
          },
          "example": [
            "PostFile",
            "StorefrontGetAccount",
            "StorefrontGetWebsite",
            "StorefrontGetKycDocumentCollection",
            "StorefrontGetKycDocument",
            "StorefrontPostKycDocument"
          ]
        },
        "Acl": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "scope",
              "permissions"
            ],
            "properties": {
              "scope": {
                "description": "Api Key scope.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApiKeyScope"
                  }
                ]
              },
              "permissions": {
                "description": "Specify individual permission here if creating a restricted API key. Use wildcard `*` for full access.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AclPermissions"
                  }
                ]
              }
            }
          }
        },
        "CustomerLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "customer",
                "targetCustomer"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "CustomerJWT": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The session identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ],
              "readOnly": true
            },
            "type": {
              "description": "Session type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "customer"
              ]
            },
            "token": {
              "description": "The session's token used for authentication.",
              "type": "string",
              "readOnly": true
            },
            "invalidate": {
              "description": "Whether to invalidate token after exchange or not.",
              "type": "boolean",
              "default": true,
              "example": true,
              "writeOnly": true
            },
            "oneTimePassword": {
              "description": "The one time password sent via an email. Should contain digits only.",
              "type": "string",
              "pattern": "^[0-9]{6}$",
              "example": "123456",
              "writeOnly": true
            },
            "customerId": {
              "description": "The customer's ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "acl": {
              "$ref": "#/components/schemas/Acl"
            },
            "customClaims": {
              "type": "object",
              "additionalProperties": true,
              "example": {
                "documents": [
                  "identity-proof",
                  "address-proof"
                ],
                "redirectUrl": "https://mywebsite.com"
              }
            },
            "createdTime": {
              "description": "Session created time.",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "updatedTime": {
              "description": "Session updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "expiredTime": {
              "description": "Session expired time. Defaults to one hour.",
              "type": "string",
              "format": "date-time"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/CustomerLink"
              }
            }
          }
        },
        "ContactPhoneNumbers": {
          "description": "The list of phone numbers.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "value"
            ],
            "properties": {
              "label": {
                "description": "The phone label.",
                "type": "string",
                "maxLength": 45,
                "example": "main"
              },
              "value": {
                "description": "The phone value.",
                "type": "string",
                "maxLength": 50,
                "example": "512-710-1640"
              },
              "primary": {
                "description": "True if phone is primary.",
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "ContactEmails": {
          "description": "The list of emails.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "value"
            ],
            "properties": {
              "label": {
                "description": "The email label.",
                "type": "string",
                "maxLength": 45,
                "example": "main"
              },
              "value": {
                "description": "The email value.",
                "type": "string",
                "format": "email",
                "maxLength": 255,
                "example": "rebilly@example.com"
              },
              "primary": {
                "description": "True if email is primary.",
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "ContactObject": {
          "type": "object",
          "properties": {
            "firstName": {
              "description": "The contact first name.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 45,
              "example": "Benjamin",
              "nullable": true
            },
            "lastName": {
              "description": "The contact last name.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 45,
              "example": "Franklin",
              "nullable": true
            },
            "organization": {
              "description": "The contact organization.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 255,
              "nullable": true,
              "example": null
            },
            "address": {
              "description": "The contact street address.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\/\\pL,.#;:()']+$",
              "maxLength": 60,
              "example": "36 Craven St",
              "nullable": true
            },
            "address2": {
              "description": "The contact street address (second line).",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\/\\pL,.#;:()']+$",
              "maxLength": 60,
              "nullable": true
            },
            "city": {
              "description": "The contact city.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 45,
              "nullable": true,
              "example": "London"
            },
            "region": {
              "description": "The contact region (state).",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\/\\pL,.#;:()']+$",
              "maxLength": 45,
              "nullable": true,
              "example": "London"
            },
            "country": {
              "description": "The contact country ISO Alpha-2 code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$",
              "maxLength": 2,
              "nullable": true,
              "example": "GB"
            },
            "postalCode": {
              "description": "The contact postal code.",
              "type": "string",
              "pattern": "^[\\w\\s\\-]+$",
              "maxLength": 10,
              "nullable": true,
              "example": "WC2N 5NF"
            },
            "phoneNumbers": {
              "$ref": "#/components/schemas/ContactPhoneNumbers"
            },
            "emails": {
              "$ref": "#/components/schemas/ContactEmails"
            },
            "hash": {
              "description": "A hash that can be used to compare multiple contacts for identical attribute values.",
              "type": "string",
              "maxLength": 40,
              "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
              "readOnly": true
            }
          }
        },
        "ResourceCustomFields": {
          "description": "Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats).\n",
          "type": "object",
          "default": {},
          "example": {
            "foo": "bar"
          }
        },
        "HttpHeaders": {
          "type": "object",
          "description": "The HTTP headers.",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "Content-Type": "application/json",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }
        },
        "BrowserData": {
          "type": "object",
          "title": "Browser data",
          "description": "Browser data used for 3DS and risk scoring.",
          "required": [
            "colorDepth",
            "isJavaEnabled",
            "language",
            "screenWidth",
            "screenHeight",
            "timeZoneOffset"
          ],
          "properties": {
            "colorDepth": {
              "description": "The browser's color depth in bits per pixel obtained using the `screen.colorDepth` property.",
              "type": "integer",
              "minimum": 1,
              "maximum": 48,
              "example": 24
            },
            "isJavaEnabled": {
              "description": "Whether Java is enabled in a browser or not. Value is returned from the `navigator.javaEnabled` property.",
              "type": "boolean"
            },
            "language": {
              "description": "The browser's language settings returned from the `navigator.language` property.",
              "type": "string",
              "example": "en-US",
              "maxLength": 8
            },
            "screenWidth": {
              "description": "The browser's screen width returned from the `screen.width` property.",
              "type": "integer",
              "minimum": 0,
              "maximum": 65535,
              "example": 1920
            },
            "screenHeight": {
              "description": "The browser's screen height returned from the `screen.height` property.",
              "type": "integer",
              "minimum": 0,
              "maximum": 65535,
              "example": 1080
            },
            "timeZoneOffset": {
              "description": "The browser's time zone offset in minutes from UTC.\nA positive offset indicates the local time is behind UTC, and negative is ahead.\nCan find it with `(new Date()).getTimezoneOffset()` property.\n",
              "type": "integer",
              "minimum": -1410,
              "maximum": 1410,
              "example": 300
            }
          }
        },
        "RiskMetadata": {
          "type": "object",
          "title": "Risk metadata",
          "description": "Risk metadata used for 3DS and risk scoring.",
          "properties": {
            "ipAddress": {
              "description": "The customer's IP.",
              "type": "string",
              "format": "ipv4 or ipv6",
              "example": "93.92.91.90"
            },
            "fingerprint": {
              "description": "The fingerprint.",
              "type": "string",
              "maxLength": 50,
              "example": "pIUt3xbgX3l9g3YDiLbx"
            },
            "httpHeaders": {
              "$ref": "#/components/schemas/HttpHeaders"
            },
            "browserData": {
              "$ref": "#/components/schemas/BrowserData"
            },
            "isProxy": {
              "description": "True if customer's ip address is related to proxy.",
              "type": "boolean",
              "readOnly": true
            },
            "isVpn": {
              "description": "True if customer's ip address is related to VPN.",
              "type": "boolean",
              "readOnly": true
            },
            "isTor": {
              "description": "True if customer's ip address is related to TOR.",
              "type": "boolean",
              "readOnly": true
            },
            "isHosting": {
              "description": "True if customer's ip address is related to hosting.",
              "type": "boolean",
              "readOnly": true
            },
            "vpnServiceName": {
              "description": "VPN service name, if available.",
              "type": "string",
              "readOnly": true
            },
            "isp": {
              "description": "Internet Service Provider name, if available.",
              "type": "string",
              "readOnly": true
            },
            "country": {
              "description": "Country ISO Alpha-2 code for specified ipAddress.",
              "maxLength": 2,
              "type": "string",
              "readOnly": true,
              "example": "US"
            },
            "region": {
              "description": "Region for specified ipAddress.",
              "type": "string",
              "readOnly": true,
              "example": "NY"
            },
            "city": {
              "description": "City for specified ipAddress.",
              "type": "string",
              "readOnly": true,
              "example": "New York"
            },
            "latitude": {
              "description": "Latitude for specified ipAddress.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "longitude": {
              "description": "Longitude for specified ipAddress.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "postalCode": {
              "description": "Postal code for specified ipAddress.",
              "type": "string",
              "maxLength": 10,
              "readOnly": true
            },
            "timeZone": {
              "description": "Time zone for specified ipAddress.",
              "type": "string",
              "readOnly": true,
              "example": "America/New_York"
            },
            "accuracyRadius": {
              "description": "Accuracy radius for specified ipAddress (kilometers).",
              "type": "integer",
              "readOnly": true
            },
            "distance": {
              "description": "Distance between IP Address and Billing Address geolocation (kilometers).",
              "type": "integer",
              "readOnly": true
            },
            "hasMismatchedBillingAddressCountry": {
              "description": "True if the billing address country and geo-IP address are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "hasMismatchedBankCountry": {
              "description": "True if the bank country and geo-IP address are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "hasMismatchedTimeZone": {
              "description": "True if the browser time zone and IP address associated time zone are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "hasMismatchedHolderName": {
              "description": "True if the customer's name from billing address and from customer's primary address are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "paymentInstrumentVelocity": {
              "description": "Number of transactions for this payment instrument (based on fingerprint) in the last 24 hours.",
              "type": "integer",
              "readOnly": true
            },
            "deviceVelocity": {
              "description": "Number of transactions for this device (based on fingerprint) in the last 24 hours.",
              "type": "integer",
              "readOnly": true
            },
            "score": {
              "description": "Risk score computed per all the factors.",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "CommonBankAccount": {
          "type": "object",
          "title": "Bank Account",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "ach"
              ]
            },
            "customerId": {
              "description": "The customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "routingNumber": {
              "description": "Bank's routing number.",
              "type": "string"
            },
            "accountNumberType": {
              "description": "Bank's account number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
              "type": "string",
              "default": "BBAN",
              "enum": [
                "BBAN",
                "IBAN"
              ]
            },
            "accountType": {
              "description": "Bank's account type.",
              "type": "string",
              "enum": [
                "checking",
                "savings",
                "other"
              ]
            },
            "bic": {
              "description": "Bank Identifier Code.",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "fingerprint": {
              "description": "A unique value to identify the bank account. It contains alphanumeric values.",
              "type": "string",
              "readOnly": true
            },
            "last4": {
              "description": "The last 4 digits of the bank account.",
              "type": "string",
              "readOnly": true
            },
            "status": {
              "description": "Bank account status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "active",
                "deactivated"
              ]
            },
            "createdTime": {
              "description": "Bank account created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Bank account updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "PaymentMethod": {
          "type": "string",
          "description": "The payment method.",
          "enum": [
            "payment-card",
            "ach",
            "cash",
            "check",
            "paypal",
            "AdvCash",
            "Airpay",
            "Alfa-click",
            "Alipay",
            "APAR",
            "Apple Pay",
            "AstroPay Card",
            "AstroPay-GO",
            "bank-transfer",
            "bank-transfer-2",
            "bank-transfer-3",
            "bank-transfer-4",
            "bank-transfer-5",
            "bank-transfer-6",
            "bank-transfer-7",
            "bank-transfer-8",
            "bank-transfer-9",
            "Beeline",
            "Belfius-direct-net",
            "bitcoin",
            "Boleto",
            "Boleto-2",
            "Boleto-3",
            "cash-deposit",
            "CASHlib",
            "CashToCode",
            "CCAvenue",
            "China UnionPay",
            "CODVoucher",
            "Conekta-oxxo",
            "Conekta-spei",
            "cryptocurrency",
            "Cupon-de-pagos",
            "domestic-cards",
            "echeck",
            "ecoPayz",
            "ecoVoucher",
            "EPS",
            "ePay.bg",
            "Ethereum",
            "e-wallet",
            "eZeeWallet",
            "Flexepin",
            "Giropay",
            "Google Pay",
            "Gpaysafe",
            "iDebit",
            "iDEAL",
            "ING-homepay",
            "INOVAPAY-pin",
            "INOVAPAY-wallet",
            "InstaDebit",
            "instant-bank-transfer",
            "Interac-online",
            "Interac-eTransfer",
            "Interac-express-connect",
            "Interac",
            "invoice",
            "Jeton",
            "jpay",
            "Khelocard",
            "Klarna",
            "Litecoin",
            "LPG-online",
            "LPG-payment-card",
            "Megafon",
            "miscellaneous",
            "Bancontact",
            "MTS",
            "MuchBetter",
            "MyFatoorah",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "Nordea-Solo",
            "OchaPay",
            "online-bank-transfer",
            "Onlineueberweisen",
            "oriental-wallet",
            "OXXO",
            "Pagsmile-lottery",
            "Pagsmile-deposit-express",
            "PayCash",
            "Payeer",
            "Paysafecard",
            "PayTabs",
            "Pay4Fun",
            "Paymero",
            "Paymero-QR",
            "PayULatam",
            "Perfect-money",
            "Piastrix",
            "PIX",
            "PinPay",
            "phone",
            "PhonePe",
            "POLi",
            "Przelewy24",
            "QIWI",
            "QQPay",
            "Resurs",
            "SEPA",
            "Siirto",
            "Skrill",
            "Skrill Rapid Transfer",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "swift-dbt",
            "Tele2",
            "Terminaly-RF",
            "Tether",
            "ToditoCash-card",
            "Trustly",
            "TWINT",
            "UniCrypt",
            "UPayCard",
            "UPI",
            "VCreditos",
            "voucher",
            "voucher-2",
            "voucher-3",
            "voucher-4",
            "Webmoney",
            "Webpay",
            "Webpay-2",
            "Webpay Card",
            "WeChat Pay",
            "Yandex-money",
            "Zotapay",
            "Zimpler"
          ]
        },
        "VaultedInstrument": {
          "description": "Vaulted payment instrument.",
          "required": [
            "method",
            "paymentInstrumentId"
          ],
          "properties": {
            "method": {
              "description": "The payment method supported vault.\nSee [Payment Instruments API](https://api-reference.rebilly.com/tag/Payment-Instruments).\n",
              "type": "string",
              "enum": [
                "payment-card",
                "ach",
                "paypal"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              ]
            },
            "paymentInstrumentId": {
              "description": "The payment instrument identifier.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "AlternativePaymentInstrument": {
          "description": "Alternative payment method instrument.",
          "type": "object",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        },
        "CashInstrument": {
          "description": "Cash payment instrument object.",
          "type": "object",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "cash"
              ]
            },
            "receivedBy": {
              "description": "The receiver's name.",
              "type": "string"
            }
          }
        },
        "CheckInstrument": {
          "description": "Check payment instrument object.",
          "type": "object",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "cash"
              ]
            },
            "reference": {
              "description": "Reference data.",
              "type": "string"
            }
          }
        },
        "PaymentInstrument": {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/components/schemas/VaultedInstrument"
            },
            {
              "$ref": "#/components/schemas/AlternativePaymentInstrument"
            },
            {
              "$ref": "#/components/schemas/CashInstrument"
            },
            {
              "$ref": "#/components/schemas/CheckInstrument"
            }
          ]
        },
        "CustomerAverageValue": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "currency": {
              "description": "Merchant's reporting currency.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "amount": {
              "description": "Average approved payment amount in Merchant's reporting currency.",
              "type": "number",
              "format": "double"
            },
            "amountUsd": {
              "description": "Average approved payment amount in USD.",
              "type": "number",
              "format": "double"
            }
          }
        },
        "CustomerLifetimeRevenue": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "currency": {
              "description": "Merchant's reporting currency.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "amount": {
              "description": "Revenue amount in Merchant's reporting currency.",
              "type": "number",
              "format": "double"
            },
            "amountUsd": {
              "description": "Revenue amount in USD.",
              "type": "number",
              "format": "double"
            }
          }
        },
        "Tag": {
          "type": "object",
          "description": "Tag.",
          "required": [
            "name"
          ],
          "properties": {
            "id": {
              "description": "The tag's identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "The tag is unique name, which is case-insensitive.",
              "type": "string",
              "maxLength": 255,
              "pattern": "^[@~\\-\\.\\w\\s]+$",
              "example": "New"
            },
            "createdTime": {
              "description": "The tag's created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The tag's updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  }
                ]
              }
            }
          }
        },
        "DefaultPaymentInstrumentLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "defaultPaymentInstrument"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "LeadSourceLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "leadSource"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "WebsiteLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "website"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "LeadSourceData": {
          "type": "object",
          "properties": {
            "medium": {
              "description": "Lead source medium (eg search, display).",
              "type": "string"
            },
            "source": {
              "description": "Lead source origin (eg google, yahoo).",
              "type": "string"
            },
            "campaign": {
              "description": "Lead source campaign (eg go-big-123).",
              "type": "string"
            },
            "term": {
              "description": "Lead source term (eg salt shakers).",
              "type": "string"
            },
            "content": {
              "description": "Lead source content (eg smiley faces).",
              "type": "string"
            },
            "affiliate": {
              "description": "Lead source affiliate (eg 123, Bob Smith).",
              "type": "string"
            },
            "subAffiliate": {
              "description": "Lead source sub-affiliate also called a sub-id or click id in some circles (eg 123456).",
              "type": "string"
            },
            "salesAgent": {
              "description": "Lead source sales agent (eg James Bond).",
              "type": "string"
            },
            "clickId": {
              "description": "Lead source click id (may come from an ad server).",
              "type": "string"
            },
            "path": {
              "description": "Lead source path url (eg www.example.com/some/landing/path).",
              "type": "string"
            },
            "referrer": {
              "description": "Lead source [`referer` url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) as determined (eg www.example.com/some/landing/path).",
              "type": "string"
            },
            "createdTime": {
              "description": "Lead source created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerLink"
                  }
                ]
              }
            }
          }
        },
        "LeadSource": {
          "allOf": [
            {
              "$ref": "#/components/schemas/LeadSourceData"
            },
            {
              "type": "object",
              "properties": {
                "original": {
                  "readOnly": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LeadSourceData"
                    }
                  ]
                }
              }
            }
          ]
        },
        "LeadSourceEmbed": {
          "type": "object",
          "description": "Lead Source object.",
          "readOnly": true,
          "properties": {
            "leadSource": {
              "$ref": "#/components/schemas/LeadSource"
            }
          }
        },
        "Customer": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The customer identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "The website's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "paymentToken": {
              "type": "string",
              "writeOnly": true,
              "description": "A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n"
            },
            "defaultPaymentInstrument": {
              "$ref": "#/components/schemas/PaymentInstrument"
            },
            "createdTime": {
              "description": "The customer created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The customer updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "primaryAddress": {
              "$ref": "#/components/schemas/ContactObject"
            },
            "averageValue": {
              "$ref": "#/components/schemas/CustomerAverageValue"
            },
            "paymentCount": {
              "description": "The number of approved payments for the customer.",
              "readOnly": true,
              "type": "integer"
            },
            "lastPaymentTime": {
              "description": "The most recent time of an approved payment for the customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "lifetimeRevenue": {
              "$ref": "#/components/schemas/CustomerLifetimeRevenue"
            },
            "invoiceCount": {
              "description": "An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer.",
              "readOnly": true,
              "type": "integer"
            },
            "tags": {
              "description": "A list of customer's tags.",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            },
            "revision": {
              "description": "The number of times the customer data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
              "type": "integer",
              "readOnly": true
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 3,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/DefaultPaymentInstrumentLink"
                  },
                  {
                    "$ref": "#/components/schemas/LeadSourceLink"
                  },
                  {
                    "$ref": "#/components/schemas/WebsiteLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/LeadSourceEmbed"
                  }
                ]
              }
            }
          }
        },
        "CustomerEmbed": {
          "type": "object",
          "description": "Customer object.",
          "readOnly": true,
          "properties": {
            "customer": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        },
        "BankAccount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonBankAccount"
            },
            {
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      }
                    ]
                  }
                },
                "_embedded": {
                  "type": "array",
                  "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/CustomerEmbed"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "BankAccountCreateToken": {
          "type": "object",
          "required": [
            "customerId",
            "token"
          ],
          "properties": {
            "customerId": {
              "description": "The Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "token": {
              "description": "BankAccountToken ID.",
              "type": "string"
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "BBANType": {
          "type": "object",
          "description": "BBAN type object.",
          "required": [
            "method",
            "customerId",
            "accountNumberType",
            "accountNumber",
            "routingNumber",
            "accountType",
            "billingAddress"
          ],
          "properties": {
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "enum": [
                "ach"
              ]
            },
            "customerId": {
              "description": "Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "accountNumberType": {
              "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).\nThis is the object for the BBAN.",
              "type": "string",
              "default": "BBAN",
              "enum": [
                "IBAN",
                "BBAN"
              ]
            },
            "accountNumber": {
              "description": "Bank's account number.",
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "routingNumber": {
              "description": "Bank's routing number.",
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "accountType": {
              "description": "Bank's account type.",
              "type": "string",
              "enum": [
                "checking",
                "savings",
                "other"
              ]
            },
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "bic": {
              "description": "Bank Identifier Code.",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "IBANType": {
          "type": "object",
          "required": [
            "method",
            "customerId",
            "accountNumberType",
            "accountNumber",
            "billingAddress"
          ],
          "description": "IBAN type object.",
          "properties": {
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "enum": [
                "ach"
              ]
            },
            "customerId": {
              "description": "Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "accountNumberType": {
              "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).\nThis is the object for the IBAN.",
              "type": "string",
              "default": "BBAN",
              "enum": [
                "IBAN",
                "BBAN"
              ]
            },
            "accountNumber": {
              "description": "Bank's account number. Detailed information about all ISO 13616-compliant national IBAN formats is available in the [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
              "type": "string"
            },
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "bic": {
              "description": "Bank Identifier Code.",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "BankAccountCreatePlain": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BBANType"
            },
            {
              "$ref": "#/components/schemas/IBANType"
            }
          ]
        },
        "BankAccountUpdatePlain": {
          "type": "object",
          "properties": {
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "accountType": {
              "description": "Bank's account type.",
              "type": "string",
              "enum": [
                "checking",
                "savings",
                "other"
              ]
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "Blocklist": {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "id": {
              "description": "The blocklist identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "The blocklist type.",
              "type": "string",
              "enum": [
                "payment-card",
                "bank-account",
                "customer-id",
                "email",
                "email-domain",
                "ip-address",
                "country",
                "fingerprint",
                "bin",
                "address"
              ]
            },
            "value": {
              "description": "The blocklist value.",
              "type": "string"
            },
            "expirationTime": {
              "description": "The blocklist expiration time.",
              "type": "string",
              "format": "date-time"
            },
            "createdTime": {
              "description": "The blocklist created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The blocklist updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "discounts-per-redemption": {
          "description": "discounts-per-redemption restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "quantity"
              ],
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Restriction quantity."
                }
              }
            }
          ]
        },
        "CouponRestriction": {
          "description": "Coupon restrictions.",
          "type": "object",
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "discounts-per-redemption": "#/components/schemas/discounts-per-redemption",
              "minimum-order-amount": "#/components/schemas/minimum-order-amount",
              "paid-by-time": "#/components/schemas/paid-by-time",
              "redemptions-per-customer": "#/components/schemas/redemptions-per-customer",
              "restrict-to-invoices": "#/components/schemas/restrict-to-invoices",
              "restrict-to-plans": "#/components/schemas/restrict-to-plans",
              "restrict-to-products": "#/components/schemas/restrict-to-products",
              "restrict-to-subscriptions": "#/components/schemas/restrict-to-subscriptions",
              "total-redemptions": "#/components/schemas/total-redemptions"
            }
          },
          "properties": {
            "type": {
              "description": "Coupon's restriction type.",
              "type": "string",
              "enum": [
                "discounts-per-redemption",
                "minimum-order-amount",
                "redemptions-per-customer",
                "restrict-to-invoices",
                "restrict-to-plans",
                "restrict-to-subscriptions",
                "restrict-to-products",
                "total-redemptions",
                "paid-by-time"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "RedemptionRestriction": {
          "description": "Redemption restrictions.",
          "type": "object",
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "discounts-per-redemption": "#/components/schemas/discounts-per-redemption",
              "minimum-order-amount": "#/components/schemas/minimum-order-amount",
              "paid-by-time": "#/components/schemas/paid-by-time",
              "restrict-to-invoices": "#/components/schemas/restrict-to-invoices",
              "restrict-to-plans": "#/components/schemas/restrict-to-plans",
              "restrict-to-products": "#/components/schemas/restrict-to-products",
              "restrict-to-subscriptions": "#/components/schemas/restrict-to-subscriptions"
            }
          },
          "properties": {
            "type": {
              "description": "Redemption's additional restriction type.",
              "type": "string",
              "enum": [
                "discounts-per-redemption",
                "minimum-order-amount",
                "restrict-to-invoices",
                "restrict-to-plans",
                "restrict-to-subscriptions",
                "restrict-to-products",
                "paid-by-time"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "minimum-order-amount": {
          "description": "minimum-order-amount restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "amount",
                "currency"
              ],
              "properties": {
                "amount": {
                  "type": "integer",
                  "description": "Minimum order quantity."
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CurrencyCode"
                    }
                  ]
                }
              }
            }
          ]
        },
        "paid-by-time": {
          "description": "paid-by-time restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The time when the coupon's redemption is no longer valid and removed from unpaid invoices if applied. Note that this datetime cannot be changed."
                }
              }
            }
          ]
        },
        "redemptions-per-customer": {
          "description": "Quantity per Customer restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "quantity"
              ],
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Restriction value."
                }
              }
            }
          ]
        },
        "restrict-to-invoices": {
          "description": "restrict-to-invoices restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "invoiceIds"
              ],
              "properties": {
                "invoiceIds": {
                  "type": "array",
                  "description": "Invoice IDs coupon can be applied to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "restrict-to-plans": {
          "description": "restrict-to-plans restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "planIds"
              ],
              "properties": {
                "planIds": {
                  "type": "array",
                  "description": "Plan IDs coupon can be applied to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "restrict-to-products": {
          "description": "restrict-to-products restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "productIds"
              ],
              "properties": {
                "productIds": {
                  "type": "array",
                  "description": "Product IDs coupon can be applied to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "restrict-to-subscriptions": {
          "description": "restrict-to-subscriptions restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "subscriptionIds"
              ],
              "properties": {
                "subscriptionIds": {
                  "type": "array",
                  "description": "Order IDs coupon can be applied to.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "total-redemptions": {
          "description": "total-redemptions restrictions.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CouponRestriction"
            },
            {
              "$ref": "#/components/schemas/RedemptionRestriction"
            },
            {
              "type": "object",
              "required": [
                "quantity"
              ],
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Total redemptions quantity."
                }
              }
            }
          ]
        },
        "CouponRedemption": {
          "type": "object",
          "description": "Coupons redemption log.",
          "properties": {
            "id": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "couponId": {
              "description": "Coupon's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "additionalRestrictions": {
              "description": "Additional restrictions for coupon's redemptions.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RedemptionRestriction"
              }
            },
            "createdTime": {
              "description": "Coupon redeem time.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "canceledTime": {
              "description": "Coupon redemption canceled time.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "Discount": {
          "type": "object",
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "fixed": "#/components/schemas/fixed",
              "percent": "#/components/schemas/percent"
            }
          },
          "properties": {
            "type": {
              "description": "Discount type.",
              "type": "string",
              "enum": [
                "fixed",
                "percent"
              ]
            }
          }
        },
        "fixed": {
          "description": "Coupon fixed amount discount.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Discount"
            },
            {
              "type": "object",
              "required": [
                "amount",
                "currency"
              ],
              "properties": {
                "amount": {
                  "description": "Discount amount.",
                  "type": "number",
                  "format": "double",
                  "minimum": 0,
                  "exclusiveMinimum": true
                },
                "currency": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CurrencyCode"
                    }
                  ]
                }
              }
            }
          ]
        },
        "percent": {
          "description": "Coupon percent discount.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Discount"
            },
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "description": "Discount percent.",
                  "type": "number",
                  "format": "double",
                  "minimum": 0,
                  "exclusiveMinimum": true,
                  "maximum": 100
                }
              }
            }
          ]
        },
        "Coupon": {
          "type": "object",
          "description": "Coupons and Discounts.",
          "required": [
            "discount",
            "issuedTime"
          ],
          "properties": {
            "id": {
              "description": "Coupon's ID a.k.a redemption code.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "discount": {
              "$ref": "#/components/schemas/Discount"
            },
            "restrictions": {
              "description": "Coupon restrictions.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CouponRestriction"
              }
            },
            "redemptionsCount": {
              "type": "integer",
              "description": "Coupon's redemptions count.",
              "minimum": 0,
              "readOnly": true
            },
            "status": {
              "type": "string",
              "description": "If coupon enabled.",
              "readOnly": true,
              "enum": [
                "draft",
                "issued",
                "expired"
              ]
            },
            "description": {
              "type": "string",
              "description": "Your coupon description. When it is not empty this is used for invoice discount item description, otherwise the item's description uses coupon's ID like 'Coupon \"COUPON-ID\"'.\n"
            },
            "issuedTime": {
              "description": "Coupon's issued time (start time).",
              "type": "string",
              "format": "date-time"
            },
            "expiredTime": {
              "description": "Coupon's expire time (end time).",
              "type": "string",
              "format": "date-time"
            },
            "createdTime": {
              "description": "Coupon created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Coupon updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "CouponExpiration": {
          "type": "object",
          "required": [
            "expiredTime"
          ],
          "properties": {
            "expiredTime": {
              "description": "The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "Credential": {
          "type": "object",
          "required": [
            "username",
            "password",
            "customerId"
          ],
          "properties": {
            "id": {
              "description": "The credential identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "username": {
              "description": "Credential's username.",
              "type": "string"
            },
            "password": {
              "description": "The credential's password.",
              "type": "string",
              "format": "password",
              "writeOnly": true
            },
            "customerId": {
              "description": "The credential's customer ID.",
              "type": "string"
            },
            "expiredTime": {
              "description": "The credential's expired time.",
              "type": "string",
              "format": "date-time"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerLink"
                  }
                ]
              }
            }
          }
        },
        "CustomField": {
          "description": "A separate Custom Field schema.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "name": {
              "description": "The name of the custom field.",
              "type": "string",
              "readOnly": true
            },
            "type": {
              "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements boolean       | true or false date          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date) datetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time) integer       | Cardinal value of -2^31..2^31-1 number        | Float value. It can take cardinal values also which are interpreted as float string        | Regular string up to 255 characters monetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\nThe type cannot be changed.\n",
              "type": "string",
              "enum": [
                "array",
                "boolean",
                "datetime",
                "integer",
                "number",
                "string",
                "monetary"
              ]
            },
            "description": {
              "description": "The custom field description.",
              "type": "string"
            },
            "additionalSchema": {
              "description": "Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values maxLength      | string        | Maximum allowed length for the string, 255 by default, up to 4000\nThe additional schema adds additional constrains for values.\n"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "CustomerTimelineCustomEvent": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "id": {
              "description": "Customer Timeline Custom Event identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "Customer Timeline Custom Event type name. It must not be similar to any Rebilly system event.",
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "createdTime": {
              "description": "Customer Timeline Custom event created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Customer Timeline Custom event updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "TimelineAction": {
          "type": "object",
          "discriminator": {
            "propertyName": "action",
            "mapping": {
              "redemption-cancel": "#/components/schemas/redemption-cancel",
              "resend-email": "#/components/schemas/resend-email"
            }
          },
          "readOnly": true,
          "properties": {
            "action": {
              "type": "string",
              "enum": [
                "resend-email",
                "redemption-cancel"
              ]
            }
          }
        },
        "redemption-cancel": {
          "description": "Cancel Redemption.",
          "allOf": [
            {
              "$ref": "#/components/schemas/TimelineAction"
            },
            {
              "type": "object",
              "properties": {
                "redemptionId": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                }
              }
            }
          ]
        },
        "resend-email": {
          "description": "Resend Email action.",
          "allOf": [
            {
              "$ref": "#/components/schemas/TimelineAction"
            },
            {
              "type": "object",
              "properties": {
                "messageId": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                }
              }
            }
          ]
        },
        "TimelineTable": {
          "type": "object",
          "description": "Additional information about Timeline message.",
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "three-columns": "#/components/schemas/three-columns",
              "two-columns": "#/components/schemas/two-columns"
            }
          },
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "two-columns",
                "three-columns"
              ]
            },
            "title": {
              "type": "string",
              "description": "Data table title."
            },
            "footer": {
              "type": "string",
              "description": "Data table footer."
            }
          }
        },
        "three-columns": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TimelineTable"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "Table data. Each array element represents a table row.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "attribute": {
                        "type": "string"
                      },
                      "previousValue": {
                        "type": "string"
                      },
                      "newValue": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "attribute": "Descriptor",
                      "previousValue": "test.com",
                      "newValue": "new-test.com"
                    }
                  }
                }
              }
            }
          ]
        },
        "two-columns": {
          "allOf": [
            {
              "$ref": "#/components/schemas/TimelineTable"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "Table data. Each array element represents a table row.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "attribute": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "attribute": "Who",
                      "value": "John Doe"
                    }
                  }
                }
              }
            }
          ]
        },
        "TimelineExtraData": {
          "type": "object",
          "description": "Additional data.",
          "readOnly": true,
          "properties": {
            "actions": {
              "description": "Actions available to a Timeline message. Can be empty in case no actions are available for a message.",
              "type": "array",
              "minItems": 0,
              "items": {
                "$ref": "#/components/schemas/TimelineAction"
              }
            },
            "tables": {
              "type": "array",
              "minItems": 0,
              "items": {
                "$ref": "#/components/schemas/TimelineTable"
              }
            },
            "author": {
              "type": "object",
              "description": "Timeline comment author data.",
              "properties": {
                "userFullName": {
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                }
              }
            },
            "mentions": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "example": {
                  "@test@mail.com": "userId-1"
                }
              }
            },
            "links": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "resourceType": {
                    "type": "string",
                    "enum": [
                      "kyc-document",
                      "invoice",
                      "subscription",
                      "transaction",
                      "email-message",
                      "dispute",
                      "coupon"
                    ]
                  },
                  "resourceId": {
                    "$ref": "#/components/schemas/ResourceId"
                  },
                  "placeholder": {
                    "type": "string",
                    "example": "KYC Document"
                  }
                }
              }
            }
          }
        },
        "CustomerTimeline": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The Timeline message identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Timeline message type.",
              "type": "string",
              "enum": [
                "customer-comment-created",
                "customer-created",
                "primary-address-changed",
                "default-payment-instrument-changed",
                "lead-source-changed",
                "custom-fields-changed",
                "coupon-applied",
                "coupon-redeemed",
                "coupon-redemption-canceled",
                "kyc-document-created",
                "kyc-document-accepted",
                "kyc-document-manually-accepted",
                "kyc-document-rejected",
                "kyc-document-manually-rejected",
                "kyc-document-modified",
                "payment-card-expired",
                "payment-instrument-created",
                "payment-instrument-deactivated",
                "customer-bank-account-blocked",
                "customer-blocked",
                "customer-payment-card-blocked",
                "invoice-created",
                "invoice-issued",
                "invoice-abandoned",
                "invoice-voided",
                "invoice-past-due",
                "invoice-paid",
                "invoice-partially-paid",
                "invoice-disputed",
                "invoice-refunded",
                "invoice-partially-refunded",
                "order-created",
                "order-renewed",
                "order-activated",
                "order-completed",
                "order-reactivated",
                "order-canceled",
                "order-upgraded",
                "order-downgraded",
                "order-churned",
                "order-paid-early",
                "transaction-approved",
                "transaction-canceled",
                "transaction-declined",
                "transaction-abandoned",
                "transaction-refunded",
                "transaction-voided",
                "transaction-discrepancy-found",
                "transaction-amount-discrepancy-found",
                "email-message-sent",
                "custom-event-processed",
                "custom-event",
                "transaction-waiting-gateway",
                "aml-list-was-possibly-matched",
                "experian-check-performed"
              ]
            },
            "customEventType": {
              "description": "Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType).",
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 255
            },
            "customData": {
              "description": "Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response.",
              "type": "object",
              "writeOnly": true,
              "example": {
                "customAttribute": "customValue",
                "otherAttribute": "otherValue"
              }
            },
            "triggeredBy": {
              "description": "Shows who or what triggered the Timeline message.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "rebilly",
                "app",
                "direct-api"
              ]
            },
            "message": {
              "description": "The message that describes the message details.",
              "type": "string"
            },
            "extraData": {
              "$ref": "#/components/schemas/TimelineExtraData"
            },
            "occurredTime": {
              "description": "Timeline message time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "TransactionLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "transaction"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "InstrumentReference": {
          "type": "object",
          "title": "Instrument",
          "required": [
            "method",
            "paymentInstrumentId"
          ],
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "payment-card",
                "ach",
                "paypal"
              ]
            },
            "paymentInstrumentId": {
              "description": "The payment instrument ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "MethodReference": {
          "type": "object",
          "title": "Method only",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        },
        "PaymentInstrumentReference": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/InstrumentReference"
            },
            {
              "$ref": "#/components/schemas/MethodReference"
            }
          ]
        },
        "ThreeDSecureResult": {
          "type": "object",
          "readOnly": true,
          "required": [
            "enrolled",
            "authenticated",
            "liability",
            "isDowngraded"
          ],
          "properties": {
            "version": {
              "description": "3D Secure version.",
              "type": "string",
              "enum": [
                "1.0.2",
                "2.1.0",
                "2.2.0"
              ]
            },
            "enrolled": {
              "description": "Is the cardholder enrolled in 3D Secure.",
              "type": "string",
              "enum": [
                "yes",
                "no",
                "invalid card/timeout",
                "unavailable"
              ]
            },
            "authenticated": {
              "description": "3D Secure authentication response status.",
              "type": "string",
              "enum": [
                "yes",
                "no",
                "not applicable",
                "attempted"
              ]
            },
            "liability": {
              "type": "string",
              "enum": [
                "protected",
                "not protected",
                "protected (attempt)"
              ]
            },
            "flow": {
              "description": "3D Secure 2 authentication flow.",
              "type": "string",
              "enum": [
                "frictionless",
                "challenge"
              ]
            },
            "isDowngraded": {
              "description": "If 3D Secure 2 was attempted but downgraded to 3D Secure 1.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "GatewayName": {
          "description": "The payment gateway name.",
          "type": "string",
          "enum": [
            "A1Gateway",
            "Adyen",
            "Airpay",
            "AmexVPC",
            "APAR",
            "ApcoPay",
            "AsiaPaymentGateway",
            "AstroPayCard",
            "AuthorizeNet",
            "Bambora",
            "BitPay",
            "BlueSnap",
            "BraintreePayments",
            "Cardknox",
            "Cashflows",
            "CASHlib",
            "CashToCode",
            "CauriPayment",
            "Cayan",
            "CCAvenue",
            "Chase",
            "Circle",
            "Citadel",
            "Clearhaus",
            "CODVoucher",
            "CoinPayments",
            "Conekta",
            "Coppr",
            "Credorax",
            "Cryptonator",
            "CyberSource",
            "DataCash",
            "Dengi",
            "Dragonphoenix",
            "Directa24",
            "dLocal",
            "EBANX",
            "ecoPayz",
            "EcorePay",
            "Elavon",
            "Euteller",
            "eMerchantPay",
            "EMS",
            "EPG",
            "EPro",
            "eZeeWallet",
            "Finrax",
            "Flexepin",
            "FinTecSystems",
            "FundSend",
            "Forte",
            "GET",
            "Gigadat",
            "GlobalOnePay",
            "Gooney",
            "Gpaysafe",
            "Greenbox",
            "HiPay",
            "iCanPay",
            "ICEPAY",
            "iCheque",
            "iDebit",
            "Ilixium",
            "Ingenico",
            "INOVAPAY",
            "Inovio",
            "Intuit",
            "InstaDebit",
            "IpayOptions",
            "JetPay",
            "Jeton",
            "Khelocard",
            "Konnektive",
            "LPG",
            "Moneris",
            "MtaPay",
            "MuchBetter",
            "MyFatoorah",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "NGenius",
            "NinjaWallet",
            "NMI",
            "NuaPay",
            "OchaPay",
            "Onlineueberweisen",
            "Pagsmile",
            "Panamerican",
            "ParamountEft",
            "ParamountInterac",
            "PandaGateway",
            "Pay4Fun",
            "PayCash",
            "Payeezy",
            "Payflow",
            "PaymenTechnologies",
            "PaymentsOS",
            "Paymero",
            "PayPal",
            "Payr",
            "Paysafe",
            "Paysafecash",
            "PayTabs",
            "PayULatam",
            "Payvision",
            "Piastrix",
            "Plugnpay",
            "Prosa",
            "Realex",
            "Realtime",
            "Redsys",
            "Rotessa",
            "RPN",
            "SaltarPay",
            "Sagepay",
            "SeamlessChex",
            "SecureTrading",
            "Skrill",
            "SmartInvoice",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "StaticGateway",
            "Stripe",
            "TestProcessor",
            "ToditoCash",
            "TrustPay",
            "TrustsPay",
            "Trustly",
            "TWINT",
            "UPayCard",
            "USAePay",
            "VantivLitle",
            "vegaaH",
            "VCreditos",
            "Wallet88",
            "Walpay",
            "Wirecard",
            "WorldlineAtosFrankfurt",
            "Worldpay",
            "Zimpler",
            "Zotapay"
          ]
        },
        "CommonTransaction": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The transaction ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "The website ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "The сustomer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Transaction type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "3ds-authentication",
                "authorize",
                "capture",
                "credit",
                "refund",
                "sale",
                "void"
              ]
            },
            "status": {
              "description": "Transaction status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "completed",
                "conn-error",
                "disputed",
                "never-sent",
                "offsite",
                "partially-refunded",
                "pending",
                "refunded",
                "sending",
                "suspended",
                "timeout",
                "voided",
                "waiting-approval",
                "waiting-capture",
                "waiting-gateway",
                "waiting-refund"
              ]
            },
            "result": {
              "description": "Transaction result.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "abandoned",
                "approved",
                "canceled",
                "declined",
                "unknown"
              ]
            },
            "amount": {
              "description": "The transaction's amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "currency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "purchaseAmount": {
              "description": "The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "purchaseCurrency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "requestAmount": {
              "description": "The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "requestCurrency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "parentTransactionId": {
              "description": "The parent's transaction ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ],
              "readOnly": true
            },
            "childTransactions": {
              "description": "The child transaction IDs.",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "invoiceIds": {
              "description": "The invoice IDs related to transaction.",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "subscriptionIds": {
              "description": "The orders IDs related to transaction's invoice(s).",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "planIds": {
              "description": "The plan IDs related to transaction's order(s).",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "isRebill": {
              "type": "boolean",
              "readOnly": true
            },
            "rebillNumber": {
              "description": "The transaction's rebill number.",
              "type": "integer",
              "readOnly": true
            },
            "paymentInstrument": {
              "$ref": "#/components/schemas/PaymentInstrumentReference"
            },
            "billingAddress": {
              "description": "Billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "has3ds": {
              "type": "boolean",
              "readOnly": true
            },
            "3ds": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureResult"
                }
              ]
            },
            "redirectUrl": {
              "description": "The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.",
              "type": "string",
              "format": "uri"
            },
            "retryNumber": {
              "type": "integer",
              "readOnly": true,
              "description": "The position in the sequence of retries."
            },
            "isRetry": {
              "type": "boolean",
              "readOnly": true,
              "description": "True if this transaction is retry."
            },
            "billingDescriptor": {
              "type": "string",
              "readOnly": true,
              "description": "The billing descriptor that appears on the periodic billing statement. Commonly\n12 or fewer characters for a credit card statement.\n"
            },
            "description": {
              "type": "string",
              "description": "The payment description.",
              "maxLength": 255
            },
            "requestId": {
              "description": "The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.",
              "type": "string"
            },
            "hasAmountAdjustment": {
              "description": "True if transaction has amount adjustment.",
              "type": "boolean",
              "readOnly": true
            },
            "gatewayName": {
              "readOnly": true,
              "description": "Payment Gateway name, available only after the gateway is selected for the transaction.\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GatewayName"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "processedTime": {
              "description": "Transaction processed time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "createdTime": {
              "description": "Transaction created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Transaction updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "AcquirerName": {
          "description": "The acquirer name.",
          "type": "string",
          "enum": [
            "Adyen",
            "Alipay",
            "AIB",
            "Airpay",
            "APAR",
            "ApcoPay",
            "AsiaPaymentGateway",
            "AstroPay Card",
            "Ipay Options",
            "B+S",
            "Bambora",
            "BitPay",
            "Bank of America",
            "Bank of Moscow",
            "Bank of Rebilly",
            "Bank One",
            "BMO Harris Bank",
            "Borgun",
            "BraintreePayments",
            "Cardknox",
            "CASHlib",
            "CashToCode",
            "Catalunya Caixa",
            "CCAvenue",
            "Chase",
            "ChinaUnionPay",
            "CIM",
            "Circle",
            "Citadel",
            "Clearhaus",
            "CODVoucher",
            "CoinPayments",
            "Conekta",
            "Coppr",
            "Credorax",
            "Cryptonator",
            "CyberSource",
            "dLocal",
            "Dragonphoenix",
            "EBANX",
            "ecoPayz",
            "EcorePay",
            "Elavon",
            "EMS",
            "EPG",
            "Euteller",
            "eZeeWallet",
            "Fifth Third Bank",
            "Finrax",
            "First Data Buypass",
            "First Data Nashville",
            "First Data North",
            "First Data Omaha",
            "FinTecSystems",
            "Flexepin",
            "Forte",
            "FundSend",
            "Gigadat",
            "Global East",
            "Gooney",
            "Gpaysafe",
            "Heartland",
            "HiPay",
            "HSBC",
            "iCanPay",
            "ICEPAY",
            "iCheque",
            "Ilixium",
            "Ingenico",
            "INOVAPAY",
            "Intuit",
            "Jeton",
            "Khelocard",
            "Konnektive",
            "LPG",
            "Masapay",
            "Merrick",
            "Mission Valley Bank",
            "Moneris",
            "MuchBetter",
            "MyFatoorah",
            "NATWEST",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "NinjaWallet",
            "NMI",
            "NuaPay",
            "OchaPay",
            "Onlineueberweisen",
            "Other",
            "Panamerican",
            "Panda Bank",
            "Paramount",
            "ParamountEft",
            "ParamountInterac",
            "Pay4fun",
            "PayCash",
            "PaymenTechnologies",
            "PaymentsOS",
            "Paymero",
            "Paynetics",
            "PayPal",
            "Payr",
            "PayTabs",
            "PayULatam",
            "Payvision",
            "Piastrix",
            "Peoples Trust Company",
            "Privatbank",
            "Prosa",
            "QQPay",
            "RBC",
            "RBS WorldPay",
            "RealTime",
            "Rotessa",
            "SaltarPay",
            "SecureTrading",
            "Skrill",
            "SmartInvoice",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "State Bank of Mauritius",
            "Stripe",
            "TBI",
            "TestProcessor",
            "ToditoCash",
            "Trustly",
            "TrustPay",
            "TrustsPay",
            "TSYS",
            "TWINT",
            "UPayCard",
            "Vantiv",
            "VCreditos",
            "VoicePay",
            "Wallet88",
            "WeChat Pay",
            "Wells Fargo",
            "Wing Hang Bank",
            "Wirecard",
            "WorldPay",
            "Zimpler",
            "Zotapay"
          ]
        },
        "MoneyAmount": {
          "type": "number",
          "format": "double",
          "example": 10
        },
        "Money": {
          "type": "object",
          "required": [
            "amount",
            "currency"
          ],
          "properties": {
            "amount": {
              "$ref": "#/components/schemas/MoneyAmount"
            },
            "currency": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        },
        "PurchaseBumpSplitVersionName": {
          "type": "string",
          "description": "The name of bump offer version, useful to make split tests."
        },
        "LanguageIsoCode": {
          "type": "string",
          "description": "Language (two letter ISO 639-1 code).",
          "pattern": "[a-zA-Z]{2}",
          "example": "US"
        },
        "PurchaseBumpStatus": {
          "type": "string",
          "description": "Bump offer status.",
          "enum": [
            "presented",
            "rejected",
            "selected",
            "unknown"
          ]
        },
        "PurchaseBumpOffer": {
          "type": "object",
          "required": [
            "offerId",
            "offerType",
            "bumpAmount"
          ],
          "properties": {
            "offerId": {
              "description": "Offer ID.",
              "type": "string"
            },
            "offerType": {
              "description": "Offer Type.",
              "type": "string",
              "example": "bonus"
            },
            "bumpAmount": {
              "description": "Bump amount.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MoneyAmount"
                }
              ]
            },
            "bumpAmountInUsd": {
              "description": "Bump amount in USD.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/MoneyAmount"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "PurchaseBumpOfferList": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/components/schemas/PurchaseBumpOffer"
          }
        },
        "TransactionNotificationUrl": {
          "description": "The URL where a server-to-server POST notification will be sent.  It  will be sent when the\ntransaction's result is finalized after a timeout or an offsite interaction. Do not trust the\nnotification; follow with a GET request to confirm the result of the transaction. Please\nrespond with a 2xx HTTP status code, or we will reattempt the request again.\nThe 2 placeholders are available to use in this URI: `{id}` and `{result}`.\n",
          "type": "string",
          "format": "uri"
        },
        "CommonScheduleInstruction": {
          "type": "object",
          "description": "The calculation instruction of scheduled time.",
          "discriminator": {
            "propertyName": "method",
            "mapping": {
              "auto": "#/components/schemas/auto",
              "date-interval": "#/components/schemas/date-interval",
              "day-of-month": "#/components/schemas/day-of-month",
              "day-of-week": "#/components/schemas/day-of-week",
              "immediately": "#/components/schemas/immediately",
              "intelligent": "#/components/schemas/intelligent"
            }
          },
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "auto",
                "intelligent",
                "immediately",
                "date-interval",
                "day-of-month",
                "day-of-week"
              ]
            }
          },
          "required": [
            "method"
          ]
        },
        "auto": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            }
          ]
        },
        "date-interval": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/CustomEventScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
            },
            {
              "type": "object",
              "properties": {
                "duration": {
                  "type": "integer",
                  "description": "The number of the units.",
                  "minimum": 1
                },
                "unit": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TimeUnit"
                    },
                    {
                      "$ref": "#/components/schemas/TimePluralUnit"
                    }
                  ]
                }
              },
              "required": [
                "duration",
                "unit"
              ]
            }
          ]
        },
        "CustomEventScheduleInstruction": {
          "type": "object",
          "description": "The calculation instruction of scheduled time.",
          "discriminator": {
            "propertyName": "method",
            "mapping": {
              "date-interval": "#/components/schemas/date-interval",
              "day-of-month": "#/components/schemas/day-of-month",
              "day-of-week": "#/components/schemas/day-of-week"
            }
          },
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "date-interval",
                "day-of-month",
                "day-of-week"
              ]
            }
          },
          "required": [
            "method"
          ]
        },
        "day-of-month": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/CustomEventScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
            },
            {
              "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
            },
            {
              "type": "object",
              "properties": {
                "day": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 31,
                  "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
                },
                "time": {
                  "$ref": "#/components/schemas/TimeIso8601Extended"
                }
              },
              "required": [
                "day"
              ]
            }
          ]
        },
        "ServicePeriodAnchorInstruction": {
          "type": "object",
          "description": "Instruction for calculating the service period anchor.\nThis is used in conjunction with the **subscription start** to calculate the time the service period starts and ends.\n",
          "discriminator": {
            "propertyName": "method",
            "mapping": {
              "day-of-month": "#/components/schemas/day-of-month",
              "day-of-week": "#/components/schemas/day-of-week",
              "immediately": "#/components/schemas/immediately"
            }
          },
          "default": {
            "method": "immediately"
          },
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "default": "immediately",
              "enum": [
                "immediately",
                "day-of-month",
                "day-of-week"
              ]
            }
          }
        },
        "day-of-week": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/CustomEventScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
            },
            {
              "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
            },
            {
              "type": "object",
              "properties": {
                "day": {
                  "$ref": "#/components/schemas/DayOfWeekLong"
                },
                "week": {
                  "type": "string",
                  "default": "next",
                  "enum": [
                    "next",
                    "first-in-month",
                    "last-in-month"
                  ]
                },
                "time": {
                  "$ref": "#/components/schemas/TimeIso8601Extended"
                }
              },
              "required": [
                "day"
              ]
            }
          ]
        },
        "InvoiceRetryScheduleInstruction": {
          "type": "object",
          "description": "The calculation instruction of scheduled time.",
          "discriminator": {
            "propertyName": "method",
            "mapping": {
              "date-interval": "#/components/schemas/date-interval",
              "day-of-month": "#/components/schemas/day-of-month",
              "day-of-week": "#/components/schemas/day-of-week",
              "immediately": "#/components/schemas/immediately",
              "intelligent": "#/components/schemas/intelligent"
            }
          },
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "intelligent",
                "immediately",
                "date-interval",
                "day-of-month",
                "day-of-week"
              ]
            }
          },
          "required": [
            "method"
          ]
        },
        "immediately": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
            },
            {
              "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
            }
          ]
        },
        "TimeUnit": {
          "type": "string",
          "enum": [
            "second",
            "minute",
            "hour",
            "day",
            "month",
            "year"
          ]
        },
        "TimePluralUnit": {
          "type": "string",
          "enum": [
            "seconds",
            "minutes",
            "hours",
            "days",
            "months",
            "years"
          ]
        },
        "intelligent": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/CustomEventScheduleInstruction"
            },
            {
              "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
            },
            {
              "type": "object",
              "properties": {
                "duration": {
                  "type": "integer",
                  "description": "The number of the units.",
                  "minimum": 1
                },
                "unit": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TimeUnit"
                    },
                    {
                      "$ref": "#/components/schemas/TimePluralUnit"
                    }
                  ]
                }
              },
              "required": [
                "duration",
                "unit"
              ]
            }
          ]
        },
        "DayOfWeekLong": {
          "type": "string",
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ]
        },
        "TimeIso8601Extended": {
          "description": "Extended ISO-8601 format of time.",
          "type": "string",
          "pattern": "^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$"
        },
        "AmountAdjustment": {
          "type": "object",
          "discriminator": {
            "propertyName": "method",
            "mapping": {
              "discount": "#/components/schemas/discount",
              "partial": "#/components/schemas/partial"
            }
          },
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "none",
                "partial",
                "discount"
              ]
            }
          },
          "required": [
            "method"
          ]
        },
        "discount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AmountAdjustment"
            },
            {
              "type": "object",
              "properties": {
                "value": {
                  "description": "The payment amount discount.",
                  "type": "number",
                  "format": "float"
                },
                "type": {
                  "description": "The payment amount discount type.",
                  "type": "string",
                  "enum": [
                    "percent",
                    "fixed"
                  ]
                }
              },
              "required": [
                "value",
                "type"
              ]
            }
          ]
        },
        "partial": {
          "allOf": [
            {
              "$ref": "#/components/schemas/AmountAdjustment"
            },
            {
              "type": "object",
              "properties": {
                "value": {
                  "description": "The payment amount.",
                  "type": "number",
                  "format": "float"
                },
                "type": {
                  "description": "The payment amount type.",
                  "type": "string",
                  "enum": [
                    "percent",
                    "fixed"
                  ]
                }
              },
              "required": [
                "value",
                "type"
              ]
            }
          ]
        },
        "PaymentRetry": {
          "type": "object",
          "properties": {
            "attempts": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "scheduleInstruction": {
                    "$ref": "#/components/schemas/CommonScheduleInstruction"
                  },
                  "paymentInstruction": {
                    "$ref": "#/components/schemas/AmountAdjustment"
                  }
                },
                "required": [
                  "scheduleInstruction",
                  "paymentInstruction"
                ]
              }
            },
            "afterAttemptPolicy": {
              "description": "The policy on the attempt finishes.",
              "type": "string",
              "enum": [
                "none",
                "change-subscription-renewal-time"
              ]
            },
            "afterRetryEndPolicy": {
              "description": "The policy on the retry ends.",
              "type": "string",
              "enum": [
                "none",
                "cancel-subscription"
              ]
            }
          },
          "required": [
            "attempts",
            "afterAttemptPolicy",
            "afterRetryEndPolicy"
          ]
        },
        "GatewayAccountLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "gatewayAccount"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "PaymentCardLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "paymentCard"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "ParentTransactionLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "parentTransaction"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "RetriedTransactionLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "retriedTransaction"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "ApprovalUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "approvalUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "CancelUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "cancelUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "RefundUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "refundUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "TransactionUpdateUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "updateUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "DisputeLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "dispute"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "InvoicesLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "invoices"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "QueryUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "queryUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "Transaction": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonTransaction"
            },
            {
              "properties": {
                "gatewayAccountId": {
                  "description": "The transaction's Gateway Account ID.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ],
                  "readOnly": true
                },
                "gatewayTransactionId": {
                  "description": "The gateway's transaction ID.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ],
                  "readOnly": true
                },
                "gateway": {
                  "type": "object",
                  "description": "The related gateway information.",
                  "readOnly": true,
                  "properties": {
                    "response": {
                      "description": "The gateway's response.",
                      "type": "object",
                      "properties": {
                        "code": {
                          "description": "The gateway's response code.",
                          "type": "string"
                        },
                        "message": {
                          "description": "The gateway's response message.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The gateway's response type.",
                          "type": "string"
                        },
                        "originalCode": {
                          "description": "The raw, unmapped gateway's response code.",
                          "type": "string"
                        },
                        "originalMessage": {
                          "description": "The raw, unmapped gateway's response message.",
                          "type": "string"
                        }
                      }
                    },
                    "avsResponse": {
                      "description": "The AVS gateway's response.",
                      "type": "object",
                      "properties": {
                        "code": {
                          "description": "The response code.",
                          "type": "string"
                        },
                        "message": {
                          "description": "The response message.",
                          "type": "string"
                        },
                        "originalCode": {
                          "description": "The raw response code.",
                          "type": "string"
                        },
                        "originalMessage": {
                          "description": "The raw response message.",
                          "type": "string"
                        }
                      }
                    },
                    "cvvResponse": {
                      "description": "The CVV gateway's response.",
                      "type": "object",
                      "properties": {
                        "code": {
                          "description": "The response code.",
                          "type": "string"
                        },
                        "message": {
                          "description": "The response message.",
                          "type": "string"
                        },
                        "originalCode": {
                          "description": "The raw response code.",
                          "type": "string"
                        },
                        "originalMessage": {
                          "description": "The raw response message.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "acquirerName": {
                  "readOnly": true,
                  "description": "Acquirer name, available only when transaction use gateway, else null.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AcquirerName"
                    }
                  ]
                },
                "method": {
                  "deprecated": true,
                  "description": "Payment Method. Use `paymentInstrument.method` instead.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentMethod"
                    }
                  ]
                },
                "velocity": {
                  "description": "The number of transactions by the same customer in the past 24 hours.",
                  "type": "integer"
                },
                "revision": {
                  "description": "The number of times the transaction data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
                  "type": "integer",
                  "readOnly": true
                },
                "referenceData": {
                  "description": "Transaction reference data.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "example": {
                    "gatewayTransactionId": "GAT123"
                  },
                  "readOnly": true,
                  "nullable": true
                },
                "bin": {
                  "description": "Payment Card BIN.",
                  "type": "string",
                  "format": "bin",
                  "readOnly": true
                },
                "paymentInstrument": {
                  "$ref": "#/components/schemas/PaymentInstrument"
                },
                "hasDcc": {
                  "description": "True if transaction has Dynamic Currency Conversion applied.",
                  "type": "boolean",
                  "readOnly": true
                },
                "dcc": {
                  "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false.",
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "base": {
                      "description": "Initial amount and currency to convert from.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Money"
                        }
                      ]
                    },
                    "quote": {
                      "description": "Suggested amount and currency to convert to.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Money"
                        }
                      ]
                    },
                    "usdMarkup": {
                      "description": "The amount of markup translated to USD.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/MoneyAmount"
                        }
                      ]
                    },
                    "outcome": {
                      "type": "string",
                      "description": "Dynamic Currency Conversion outcome.",
                      "enum": [
                        "rejected",
                        "selected",
                        "unknown"
                      ]
                    }
                  }
                },
                "hasBumpOffer": {
                  "description": "True if transaction has a Bump offer.",
                  "type": "boolean",
                  "readOnly": true
                },
                "bumpOffer": {
                  "description": "Bump offer information. Null if hasBumpOffer is false.",
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "order": {
                      "description": "Initial amount and currency.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Money"
                        }
                      ]
                    },
                    "version": {
                      "description": "The name of the version that was picked (useful for measuring split tests).",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PurchaseBumpSplitVersionName"
                        }
                      ]
                    },
                    "language": {
                      "description": "The language of the bump offer that was displayed to user (useful for finding any translation problems).",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/LanguageIsoCode"
                        }
                      ]
                    },
                    "outcome": {
                      "$ref": "#/components/schemas/PurchaseBumpStatus"
                    },
                    "presentedOffers": {
                      "description": "Offers presented to a customer.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PurchaseBumpOfferList"
                        }
                      ]
                    },
                    "selectedOffer": {
                      "description": "Offer selected by a customer. Null if bump offer outcome is not `selected`.",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PurchaseBumpOffer"
                        }
                      ]
                    }
                  }
                },
                "riskScore": {
                  "description": "The transaction's risk score.",
                  "type": "integer",
                  "readOnly": true
                },
                "riskMetadata": {
                  "description": "Risk metadata.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RiskMetadata"
                    }
                  ]
                },
                "notificationUrl": {
                  "$ref": "#/components/schemas/TransactionNotificationUrl"
                },
                "retryInstruction": {
                  "$ref": "#/components/schemas/PaymentRetry"
                },
                "retriedTransactionId": {
                  "readOnly": true,
                  "description": "The retried transaction ID.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                },
                "retriesResult": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Retries sequence result.",
                  "enum": [
                    "approved",
                    "canceled",
                    "declined",
                    "scheduled"
                  ]
                },
                "isDisputed": {
                  "description": "True if transaction is disputed.",
                  "type": "boolean",
                  "readOnly": true
                },
                "disputeTime": {
                  "description": "Time the dispute was created, else null.",
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true,
                  "nullable": true
                },
                "disputeStatus": {
                  "description": "The dispute's status, else null.",
                  "nullable": true,
                  "readOnly": true,
                  "type": "string",
                  "enum": [
                    "response-needed",
                    "under-review",
                    "forfeited",
                    "won",
                    "lost",
                    "unknown"
                  ]
                },
                "isReconciled": {
                  "description": "True if the transaction has been verified with gateway batch data.",
                  "type": "boolean",
                  "readOnly": true
                },
                "isProcessedOutside": {
                  "description": "True if the transaction was processed outside of Rebilly.",
                  "type": "boolean"
                },
                "isMerchantInitiated": {
                  "description": "True if the transaction was initiated by the merchant.",
                  "type": "boolean"
                },
                "hadDiscrepancy": {
                  "description": "True if the transaction has been updated due to a discrepancy with its. source of truth.",
                  "type": "boolean",
                  "readOnly": true
                },
                "orderId": {
                  "deprecated": true,
                  "description": "The transaction's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.",
                  "type": "string"
                },
                "arn": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The acquirer reference number.",
                  "example": "74836950144358910018150"
                },
                "scheduledTime": {
                  "type": "string",
                  "description": "The time the transaction is scheduled for collection.",
                  "format": "date-time"
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/WebsiteLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      },
                      {
                        "$ref": "#/components/schemas/GatewayAccountLink"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentCardLink"
                      },
                      {
                        "$ref": "#/components/schemas/ParentTransactionLink"
                      },
                      {
                        "$ref": "#/components/schemas/RetriedTransactionLink"
                      },
                      {
                        "$ref": "#/components/schemas/LeadSourceLink"
                      },
                      {
                        "$ref": "#/components/schemas/ApprovalUrlLink"
                      },
                      {
                        "$ref": "#/components/schemas/CancelUrlLink"
                      },
                      {
                        "$ref": "#/components/schemas/RefundUrlLink"
                      },
                      {
                        "$ref": "#/components/schemas/TransactionUpdateUrlLink"
                      },
                      {
                        "$ref": "#/components/schemas/DisputeLink"
                      },
                      {
                        "$ref": "#/components/schemas/InvoicesLink"
                      },
                      {
                        "$ref": "#/components/schemas/QueryUrlLink"
                      }
                    ]
                  }
                },
                "_embedded": {
                  "type": "array",
                  "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/ParentTransactionEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/RetriedTransactionEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/GatewayAccountEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/LeadSourceEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/WebsiteEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentCardEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/BankAccountEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/InvoicesEmbed"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "ParentTransactionEmbed": {
          "type": "object",
          "description": "Retried Transaction object.",
          "readOnly": true,
          "properties": {
            "parentTransaction": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        },
        "RetriedTransactionEmbed": {
          "type": "object",
          "description": "Parent Transaction object.",
          "readOnly": true,
          "properties": {
            "retriedTransaction": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        },
        "GatewayAccount": {
          "type": "object",
          "required": [
            "gatewayName",
            "acquirerName",
            "merchantCategoryCode",
            "websites",
            "acceptedCurrencies",
            "organizationId"
          ],
          "discriminator": {
            "propertyName": "gatewayName",
            "mapping": {
              "A1Gateway": "#/components/schemas/A1Gateway",
              "Adyen": "#/components/schemas/Adyen",
              "Airpay": "#/components/schemas/Airpay",
              "AmexVPC": "#/components/schemas/AmexVPC",
              "APAR": "#/components/schemas/APAR",
              "ApcoPay": "#/components/schemas/ApcoPay",
              "AsiaPaymentGateway": "#/components/schemas/AsiaPaymentGateway",
              "AstroPayCard": "#/components/schemas/AstroPayCard",
              "AuthorizeNet": "#/components/schemas/AuthorizeNet",
              "Bambora": "#/components/schemas/Bambora",
              "BitPay": "#/components/schemas/BitPay",
              "BlueSnap": "#/components/schemas/BlueSnap",
              "BraintreePayments": "#/components/schemas/BraintreePayments",
              "CASHlib": "#/components/schemas/CASHlib",
              "CODVoucher": "#/components/schemas/CODVoucher",
              "CoinPayments": "#/components/schemas/CoinPayments",
              "Cardknox": "#/components/schemas/Cardknox",
              "CashToCode": "#/components/schemas/CashToCode",
              "Cashflows": "#/components/schemas/Cashflows",
              "CauriPayment": "#/components/schemas/CauriPayment",
              "Cayan": "#/components/schemas/Cayan",
              "CCAvenue": "#/components/schemas/CCAvenue",
              "Chase": "#/components/schemas/Chase",
              "Circle": "#/components/schemas/Circle",
              "Citadel": "#/components/schemas/Citadel",
              "Clearhaus": "#/components/schemas/Clearhaus",
              "Conekta": "#/components/schemas/Conekta",
              "Coppr": "#/components/schemas/Coppr",
              "Credorax": "#/components/schemas/Credorax",
              "Cryptonator": "#/components/schemas/Cryptonator",
              "CyberSource": "#/components/schemas/CyberSource",
              "DataCash": "#/components/schemas/DataCash",
              "Dengi": "#/components/schemas/Dengi",
              "dLocal": "#/components/schemas/dLocal",
              "Dragonphoenix": "#/components/schemas/Dragonphoenix",
              "Directa24": "#/components/schemas/Directa24",
              "EBANX": "#/components/schemas/EBANX",
              "EPG": "#/components/schemas/EPG",
              "EPro": "#/components/schemas/EPro",
              "EcorePay": "#/components/schemas/EcorePay",
              "Elavon": "#/components/schemas/Elavon",
              "EMS": "#/components/schemas/EMS",
              "Euteller": "#/components/schemas/Euteller",
              "eZeeWallet": "#/components/schemas/eZeeWallet",
              "FinTecSystems": "#/components/schemas/FinTecSystems",
              "Finrax": "#/components/schemas/Finrax",
              "Flexepin": "#/components/schemas/Flexepin",
              "Forte": "#/components/schemas/Forte",
              "FundSend": "#/components/schemas/FundSend",
              "GET": "#/components/schemas/GET",
              "Gigadat": "#/components/schemas/Gigadat",
              "GlobalOne": "#/components/schemas/GlobalOne",
              "Gooney": "#/components/schemas/Gooney",
              "Gpaysafe": "#/components/schemas/Gpaysafe",
              "Greenbox": "#/components/schemas/Greenbox",
              "HiPay": "#/components/schemas/HiPay",
              "ICEPAY": "#/components/schemas/ICEPAY",
              "INOVAPAY": "#/components/schemas/INOVAPAY",
              "Ilixium": "#/components/schemas/Ilixium",
              "Ingenico": "#/components/schemas/Ingenico",
              "Inovio": "#/components/schemas/Inovio",
              "InstaDebit": "#/components/schemas/InstaDebit",
              "Intuit": "#/components/schemas/Intuit",
              "IpayOptions": "#/components/schemas/IpayOptions",
              "JetPay": "#/components/schemas/JetPay",
              "Jeton": "#/components/schemas/Jeton",
              "Khelocard": "#/components/schemas/Khelocard",
              "Konnektive": "#/components/schemas/Konnektive",
              "LPG": "#/components/schemas/LPG",
              "Moneris": "#/components/schemas/Moneris",
              "MtaPay": "#/components/schemas/MtaPay",
              "MuchBetter": "#/components/schemas/MuchBetter",
              "MyFatoorah": "#/components/schemas/MyFatoorah",
              "Neosurf": "#/components/schemas/Neosurf",
              "NMI": "#/components/schemas/NMI",
              "Netbanking": "#/components/schemas/Netbanking",
              "Neteller": "#/components/schemas/Neteller",
              "NGenius": "#/components/schemas/NGenius",
              "NinjaWallet": "#/components/schemas/NinjaWallet",
              "NuaPay": "#/components/schemas/NuaPay",
              "OchaPay": "#/components/schemas/OchaPay",
              "Onlineueberweisen": "#/components/schemas/Onlineueberweisen",
              "Pagsmile": "#/components/schemas/Pagsmile",
              "Panamerican": "#/components/schemas/Panamerican",
              "PandaGateway": "#/components/schemas/PandaGateway",
              "ParamountEft": "#/components/schemas/ParamountEft",
              "ParamountInterac": "#/components/schemas/ParamountInterac",
              "Pay4Fun": "#/components/schemas/Pay4Fun",
              "PayCash": "#/components/schemas/PayCash",
              "PayPal": "#/components/schemas/PayPal",
              "Payeezy": "#/components/schemas/Payeezy",
              "Payflow": "#/components/schemas/Payflow",
              "PaymenTechnologies": "#/components/schemas/PaymenTechnologies",
              "PaymentsOS": "#/components/schemas/PaymentsOS",
              "Paymero": "#/components/schemas/Paymero",
              "Payr": "#/components/schemas/Payr",
              "Paysafe": "#/components/schemas/Paysafe",
              "Paysafecash": "#/components/schemas/Paysafecash",
              "PayTabs": "#/components/schemas/PayTabs",
              "PayULatam": "#/components/schemas/PayULatam",
              "Payvision": "#/components/schemas/Payvision",
              "Piastrix": "#/components/schemas/Piastrix",
              "Plugnpay": "#/components/schemas/Plugnpay",
              "Prosa": "#/components/schemas/Prosa",
              "RPN": "#/components/schemas/RPN",
              "Realex": "#/components/schemas/Realex",
              "Realtime": "#/components/schemas/Realtime",
              "Redsys": "#/components/schemas/Redsys",
              "Rotessa": "#/components/schemas/Rotessa",
              "SaltarPay": "#/components/schemas/SaltarPay",
              "SMSVoucher": "#/components/schemas/SMSVoucher",
              "Sofort": "#/components/schemas/Sofort",
              "Sagepay": "#/components/schemas/Sagepay",
              "SeamlessChex": "#/components/schemas/SeamlessChex",
              "SecureTrading": "#/components/schemas/SecureTrading",
              "Skrill": "#/components/schemas/Skrill",
              "SmartInvoice": "#/components/schemas/SmartInvoice",
              "SparkPay": "#/components/schemas/SparkPay",
              "StaticGateway": "#/components/schemas/StaticGateway",
              "Stripe": "#/components/schemas/Stripe",
              "TestProcessor": "#/components/schemas/TestProcessor",
              "ToditoCash": "#/components/schemas/ToditoCash",
              "TrustPay": "#/components/schemas/TrustPay",
              "TrustsPay": "#/components/schemas/TrustsPay",
              "Trustly": "#/components/schemas/Trustly",
              "TWINT": "#/components/schemas/TWINT",
              "UPayCard": "#/components/schemas/UPayCard",
              "USAePay": "#/components/schemas/USAePay",
              "VantivLitle": "#/components/schemas/VantivLitle",
              "VCreditos": "#/components/schemas/VCreditos",
              "Wallet88": "#/components/schemas/Wallet88",
              "Walpay": "#/components/schemas/Walpay",
              "Wirecard": "#/components/schemas/Wirecard",
              "WorldlineAtosFrankfurt": "#/components/schemas/WorldlineAtosFrankfurt",
              "Worldpay": "#/components/schemas/Worldpay",
              "Zotapay": "#/components/schemas/Zotapay",
              "eMerchantPay": "#/components/schemas/eMerchantPay",
              "ecoPayz": "#/components/schemas/ecoPayz",
              "iCanPay": "#/components/schemas/iCanPay",
              "iCheque": "#/components/schemas/iCheque",
              "iDebit": "#/components/schemas/iDebit",
              "vegaaH": "#/components/schemas/vegaaH",
              "Zimpler": "#/components/schemas/Zimpler"
            }
          },
          "properties": {
            "id": {
              "description": "The gateway identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "status": {
              "description": "The gateway account's status.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "pending",
                "closed"
              ]
            },
            "gatewayName": {
              "$ref": "#/components/schemas/GatewayName"
            },
            "acquirerName": {
              "$ref": "#/components/schemas/AcquirerName"
            },
            "merchantCategoryCode": {
              "description": "The gateway account's merchant category code.",
              "type": "integer",
              "minimum": 742,
              "maximum": 9950
            },
            "dccMarkup": {
              "description": "Dynamic currency conversion markup in basis points.",
              "type": "integer",
              "minimum": -10000,
              "maximum": 10000
            },
            "dccForceCurrency": {
              "type": "string",
              "description": "Force dynamic currency conversion to the specified currency on each sale.\nLeave it empty to disable force DCC.\n"
            },
            "descriptor": {
              "description": "The gateway account's descriptor.",
              "type": "string"
            },
            "cityField": {
              "description": "The gateway account's city field (also known as line 2 descriptor).",
              "type": "string"
            },
            "organizationId": {
              "description": "Organization ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "excludedDccQuoteCurrencies": {
              "description": "Excluded Dynamic Currency Conversion Quote Currencies.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "monthlyLimit": {
              "description": "Monthly Limit.",
              "type": "number",
              "format": "double",
              "minimum": 0
            },
            "approvalWindowTtl": {
              "description": "The time window (in seconds) allotted for approving an offsite transaction before it is automatically `abandoned`.",
              "type": "integer",
              "default": 3600,
              "minimum": 300,
              "maximum": 16777215
            },
            "reconciliationWindowEnabled": {
              "description": "If a transaction is not reconciled within the `reconciliationWindowTtl` time, then the transaction is marked as `abandoned`.",
              "type": "boolean"
            },
            "reconciliationWindowTtl": {
              "description": "The time window (in seconds) allotted for a reconciliation to occur. If it is not reconciled in that time, then the transaction is marked as `abandoned`.",
              "type": "integer",
              "minimum": 300,
              "maximum": 16777215
            },
            "threeDSecure": {
              "description": "True, if Gateway Account allows 3DSecure.",
              "type": "boolean"
            },
            "dynamicDescriptor": {
              "description": "True, if Gateway Account allows dynamic descriptor.",
              "type": "boolean"
            },
            "acceptedCurrencies": {
              "description": "Accepted currencies (array of the currency three letter code).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "method": {
              "$ref": "#/components/schemas/PaymentMethod"
            },
            "paymentCardSchemes": {
              "description": "Accepted payment card brands.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentCardBrand"
              }
            },
            "digitalWallets": {
              "$ref": "#/components/schemas/DigitalWallets"
            },
            "isDown": {
              "description": "True if gateway is currently in downtime period.",
              "type": "boolean",
              "readOnly": true
            },
            "additionalFilters": {
              "description": "The additional filters are used to determine whether the gateway account can be selected for the transaction to be processed.\nFor example, the filter may put a maximum amount value. If the transaction is above that amount, this gateway account wouldn't be used.\nThis follows our standard filter format.\n",
              "type": "string",
              "example": "amount:1..100;bin:411111,444433"
            },
            "timeout": {
              "description": "Gateway Account request timeout in seconds.",
              "type": "integer",
              "nullable": true,
              "minimum": 10,
              "maximum": 120
            },
            "token": {
              "description": "Gateway Account token.",
              "type": "string",
              "readOnly": true,
              "example": "TwiX3f92k4AiBE27BzTbQ38hHjicBz_w"
            },
            "createdTime": {
              "description": "Gateway Account created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Gateway Account updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/OnBoardingUrlLink"
                  },
                  {
                    "$ref": "#/components/schemas/DynamicIpnLink"
                  },
                  {
                    "$ref": "#/components/schemas/StaticIpnLink"
                  }
                ]
              }
            }
          }
        },
        "A1Gateway3dsServers": {
          "description": "A1Gateway 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paay3dsServer",
                "Other"
              ]
            }
          }
        },
        "Other": {
          "description": "Other.",
          "allOf": [
            {
              "$ref": "#/components/schemas/A1Gateway3dsServers"
            },
            {
              "$ref": "#/components/schemas/eMerchantPay3dsServers"
            },
            {
              "$ref": "#/components/schemas/GET3dsServers"
            },
            {
              "$ref": "#/components/schemas/NMI3dsServers"
            },
            {
              "$ref": "#/components/schemas/Payvision3dsServers"
            },
            {
              "$ref": "#/components/schemas/VantivLitle3dsServers"
            },
            {
              "$ref": "#/components/schemas/Walpay3dsServers"
            },
            {
              "$ref": "#/components/schemas/Worldpay3dsServers"
            }
          ]
        },
        "eMerchantPay3dsServers": {
          "description": "eMerchantPay 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer",
              "eMerchantPay3dsServer": "#/components/schemas/eMerchantPay3dsServer",
              "ThreeDSecureIO3dsServer": "#/components/schemas/ThreeDSecureIO3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "eMerchantPay3dsServer",
                "ThreeDSecureIO3dsServer",
                "Paay3dsServer",
                "Other"
              ]
            }
          }
        },
        "Paay3dsServer": {
          "description": "Paay.",
          "allOf": [
            {
              "$ref": "#/components/schemas/A1Gateway3dsServers"
            },
            {
              "$ref": "#/components/schemas/eMerchantPay3dsServers"
            },
            {
              "$ref": "#/components/schemas/GET3dsServers"
            },
            {
              "$ref": "#/components/schemas/NMI3dsServers"
            },
            {
              "$ref": "#/components/schemas/Payvision3dsServers"
            },
            {
              "$ref": "#/components/schemas/VantivLitle3dsServers"
            },
            {
              "$ref": "#/components/schemas/Walpay3dsServers"
            },
            {
              "$ref": "#/components/schemas/Worldpay3dsServers"
            },
            {
              "type": "object",
              "required": [
                "apiKey",
                "secret",
                "mpiUrl",
                "sandboxMpiUrl"
              ],
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Paay ApiKey."
                },
                "secret": {
                  "type": "string",
                  "format": "password",
                  "description": "Paay secret."
                },
                "mpiUrl": {
                  "type": "string",
                  "description": "Paay 3DS Server url."
                },
                "sandboxMpiUrl": {
                  "type": "string",
                  "description": "Paay sandbox 3DS Server url."
                }
              }
            }
          ]
        },
        "ThreeDSecureServerName": {
          "description": "The Merchant plug-in Name.",
          "type": "string",
          "enum": [
            "Payvision3dsServer",
            "Wirecard3dsServer",
            "Ilixium3dsServer",
            "DataCash3dsServer",
            "Paysafe3dsServer",
            "Ingenico3dsServer",
            "CardinalCommerce3dsServer",
            "Paay3dsServer",
            "Panamerican3dsServer",
            "eMerchantPay3dsServer",
            "SecureTrading3dsServer",
            "Clearhaus3dsServer",
            "Other",
            "ThreeDSecureIO3dsServer",
            "WorldlineAtosFrankfurt3dsServer",
            "Piastrix3dsServer",
            "NGenius3dsServer",
            "Stripe3dsServer"
          ]
        },
        "GET3dsServers": {
          "description": "GET 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paay3dsServer",
                "Other"
              ]
            }
          }
        },
        "NMI3dsServers": {
          "description": "NMI 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paay3dsServer",
                "Other"
              ]
            }
          }
        },
        "Payvision3dsServers": {
          "description": "Payvision 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer",
              "CardinalCommerce3dsServer": "#/components/schemas/CardinalCommerce3dsServer",
              "Payvision3dsServer": "#/components/schemas/Payvision3dsServer",
              "ThreeDSecureIO3dsServer": "#/components/schemas/ThreeDSecureIO3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Payvision3dsServer",
                "Payvision3ds2Server",
                "CardinalCommerce3dsServer",
                "Paay3dsServer",
                "ThreeDSecureIO3dsServer",
                "Other"
              ]
            }
          }
        },
        "CardinalCommerce3dsServer": {
          "description": "CardinalCommerce 3DS Server Credentials.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Payvision3dsServers"
            },
            {
              "type": "object",
              "required": [
                "merchantId",
                "processorId",
                "transactionPwd"
              ],
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Cardinal MerchantId."
                },
                "processorId": {
                  "type": "string",
                  "description": "Cardinal ProcessorId."
                },
                "transactionPwd": {
                  "type": "string",
                  "format": "password",
                  "description": "Cardinal TransactionPwd."
                }
              }
            }
          ]
        },
        "Payvision3dsServer": {
          "description": "Payvision Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Payvision3dsServers"
            }
          ]
        },
        "ThreeDSecureIO3dsServer": {
          "description": "ThreeDSecureIO3dsServer.",
          "allOf": [
            {
              "$ref": "#/components/schemas/WorldlineAtosFrankfurt3dsServers"
            },
            {
              "$ref": "#/components/schemas/TestProcessor3dsServers"
            },
            {
              "$ref": "#/components/schemas/EMS3dsServers"
            },
            {
              "type": "object",
              "required": [
                "merchantId",
                "merchantName",
                "merchantAcquirerBinVisa",
                "merchantAcquirerBinMastercard",
                "merchantCountry",
                "merchantUrl"
              ],
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Merchant Id.",
                  "maxLength": 35
                },
                "merchantName": {
                  "type": "string",
                  "description": "Merchant Name.",
                  "maxLength": 40
                },
                "merchantAcquirerBinVisa": {
                  "type": "string",
                  "description": "Visa Acquirer BIN.",
                  "minLength": 6,
                  "maxLength": 11
                },
                "merchantAcquirerBinMastercard": {
                  "type": "string",
                  "description": "Mastercard Acquirer BIN.",
                  "minLength": 6,
                  "maxLength": 11
                },
                "merchantCountry": {
                  "type": "string",
                  "description": "Merchant Country ISO Alpha-2 Code.",
                  "maxLength": 2,
                  "example": "US"
                },
                "merchantUrl": {
                  "type": "string",
                  "description": "Merchant URL.",
                  "maxLength": 2048
                },
                "v1": {
                  "type": "boolean",
                  "description": "Value determines if requests can use version 1 of 3DS.\nIn case both v1 and v2 are enabled it will prefer v2.\nIf v2 is not supported for the issuer, it will coalesce to v1.\n"
                },
                "v2": {
                  "type": "boolean",
                  "description": "Value determines if requests will attempt version 2 of 3DS.\nIn case both v1 and v2 are enabled it will prefer v2.\nIf v2 is not supported for the issuer, it will coalesce to v1.\n"
                },
                "transactionType": {
                  "type": "string",
                  "enum": [
                    "01",
                    "03",
                    "10",
                    "11",
                    "28"
                  ],
                  "description": "01 - Goods/Service Purchase\n03 - Check Acceptance\n10 - Account Funding\n11 - Quasi-Cash Transaction\n28 - Prepaid Activation and Load\n\nIdentifies the type of transaction being authenticated.\n"
                }
              }
            }
          ]
        },
        "WorldlineAtosFrankfurt3dsServers": {
          "description": "WorldlineAtosFrankfurt 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "ThreeDSecureIO3dsServer": "#/components/schemas/ThreeDSecureIO3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "ThreeDSecureIO3dsServer"
              ]
            }
          }
        },
        "TestProcessor3dsServers": {
          "description": "TestProcessor3dsServers 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "TestSandbox3dsServer": "#/components/schemas/TestProcessor3dsServer",
              "ThreeDSecureIO3dsServer": "#/components/schemas/ThreeDSecureIO3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "TestSandbox3dsServer",
                "ThreeDSecureIO3dsServer"
              ]
            }
          }
        },
        "TestProcessor3dsServer": {
          "description": "TestProcessor Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/TestProcessor3dsServers"
            }
          ]
        },
        "EMS3dsServers": {
          "description": "EMS 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "ThreeDSecureIO3dsServer": "#/components/schemas/ThreeDSecureIO3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "ThreeDSecureIO3dsServer"
              ]
            }
          }
        },
        "VantivLitle3dsServers": {
          "description": "VantivLitle 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paay3dsServer",
                "Other"
              ]
            }
          }
        },
        "Walpay3dsServers": {
          "description": "Walpay 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paay3dsServer",
                "Other"
              ]
            }
          }
        },
        "Worldpay3dsServers": {
          "description": "Worldpay 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Other": "#/components/schemas/Other",
              "Paay3dsServer": "#/components/schemas/Paay3dsServer",
              "ThreeDSecureIO3dsServer": "#/components/schemas/ThreeDSecureIO3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paay3dsServer",
                "ThreeDSecureIO3dsServer",
                "Other"
              ]
            }
          }
        },
        "eMerchantPay3dsServer": {
          "description": "eMerchantPay 3DS Server.",
          "allOf": [
            {
              "$ref": "#/components/schemas/eMerchantPay3dsServers"
            }
          ]
        },
        "A1Gateway": {
          "description": "A1Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "A1Gateway credentials object.",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "description": "A1Gateway account ID."
                    },
                    "password": {
                      "type": "string",
                      "description": "A1Gateway password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "accountId",
                    "password"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/A1Gateway3dsServers"
                }
              }
            }
          ]
        },
        "Adyen": {
          "description": "Adyen config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Adyen credentials object.",
                  "properties": {
                    "merchantAccount": {
                      "type": "string",
                      "description": "Adyen merchant account."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "Adyen api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantAccount",
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Adyen settings object.",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "Adyen post URL."
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              }
            }
          ]
        },
        "Airpay": {
          "description": "Airpay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Airpay credentials object.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Airpay username."
                    },
                    "merchantId": {
                      "type": "string",
                      "description": "Airpay merchant ID."
                    },
                    "password": {
                      "type": "string",
                      "description": "Airpay password.",
                      "format": "password"
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "Airpay api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "merchantId",
                    "password",
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "AmexVPC": {
          "description": "AmexVPC config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "AmexVPC credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Merchant ID."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "Access Code.",
                      "format": "password"
                    },
                    "user": {
                      "type": "string",
                      "description": "User (used for refund, void and capture)."
                    },
                    "password": {
                      "type": "string",
                      "description": "Password (used for refund, void and capture).",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "accessCode",
                    "user",
                    "password"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "AmexVPC settings object.",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "Virtual Payment Client URL."
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              }
            }
          ]
        },
        "APAR": {
          "description": "APAR config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "APAR credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string"
                    },
                    "merchantToken": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "merchantToken"
                  ]
                }
              }
            }
          ]
        },
        "ApcoPay": {
          "description": "ApcoPay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "ApcoPay credentials object.",
                  "properties": {
                    "profileID": {
                      "type": "string",
                      "description": "ApcoPay profile ID."
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "ApcoPay secret word.",
                      "format": "password"
                    },
                    "MerchantID": {
                      "type": "string",
                      "description": "ApcoPay merchant ID."
                    },
                    "MerchantPassword": {
                      "type": "string",
                      "description": "ApcoPay merchant password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "profileID",
                    "secretWord",
                    "MerchantID",
                    "MerchantPassword"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "method": {
                      "type": "string",
                      "description": "ApcoPay's method.",
                      "enum": [
                        "AFTERPAY",
                        "IDEAL",
                        "CREDITCLICK",
                        "BANCONTACT",
                        "ONLINEUBERWEISEN"
                      ]
                    }
                  },
                  "required": [
                    "method"
                  ]
                }
              }
            }
          ]
        },
        "AsiaPaymentGateway": {
          "description": "AsiaPaymentGateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "AsiaPaymentGateway credentials object.",
                  "properties": {
                    "merchantNumber": {
                      "type": "string",
                      "description": "AsiaPaymentGateway merchant number."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "AsiaPaymentGateway secret key for hash.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantNumber",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "AstroPayCard": {
          "description": "AstroPay Card config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "AstroPay Card credentials object.",
                  "properties": {
                    "x_login": {
                      "type": "string",
                      "description": "AstroPay Card login."
                    },
                    "x_tran_key": {
                      "type": "string",
                      "description": "AstroPay Card transaction key.",
                      "format": "password"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "AstroPay Card secret key.",
                      "format": "password"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "One Touch Astropay API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "x_login",
                    "x_tran_key",
                    "secret_key"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "AstroPay Card settings object.",
                  "properties": {
                    "oneTouchApi": {
                      "type": "boolean",
                      "description": "Use One Touch Astropay API.",
                      "default": false
                    }
                  }
                }
              }
            }
          ]
        },
        "AuthorizeNet": {
          "description": "AuthorizeNet Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiLoginId": {
                      "type": "string",
                      "description": "AuthorizeNet Gateway api login ID."
                    },
                    "transactionKey": {
                      "description": "AuthorizeNet Gateway Transaction Key.",
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiLoginId",
                    "transactionKey"
                  ]
                }
              }
            }
          ]
        },
        "Bambora": {
          "description": "Bambora Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Bambora Gateway merchant ID."
                    },
                    "apiPasscode": {
                      "type": "string",
                      "description": "Bambora Gateway API Passcode.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "apiPasscode"
                  ]
                }
              }
            }
          ]
        },
        "BitPay": {
          "description": "BitPay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "BitPay credentials object.",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "BitPay merchant API token.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "token"
                  ]
                }
              }
            }
          ]
        },
        "BlueSnap": {
          "description": "BlueSnap config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "BlueSnap credentials object.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "BlueSnap merchant's api username."
                    },
                    "password": {
                      "type": "string",
                      "description": "BlueSnap merchant's api password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "BraintreePayments": {
          "description": "BraintreePayments Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "publicKey": {
                      "type": "string",
                      "description": "BraintreePayments Public Key."
                    },
                    "privateKey": {
                      "type": "string",
                      "description": "BraintreePayments Private Key.",
                      "format": "password"
                    },
                    "merchantId": {
                      "type": "string",
                      "description": "BraintreePayments merchant ID.",
                      "format": "password"
                    },
                    "merchantAccountId": {
                      "type": "string",
                      "description": "BraintreePayments merchant account ID.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "publicKey",
                    "privateKey",
                    "merchantId",
                    "merchantAccountId"
                  ]
                }
              }
            }
          ]
        },
        "CASHlib": {
          "description": "CASHlib config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "CASHlib credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "CASHlib API Key.",
                      "format": "password"
                    },
                    "merchantId": {
                      "type": "string",
                      "description": "CASHlib merchant id."
                    }
                  },
                  "required": [
                    "apiKey",
                    "merchantId"
                  ]
                }
              }
            }
          ]
        },
        "CODVoucher": {
          "description": "COD Voucher config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "COD Voucher credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "COD Voucher API key.",
                      "format": "password"
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "COD Voucher API secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey",
                    "apiSecret"
                  ]
                }
              }
            }
          ]
        },
        "CoinPayments": {
          "description": "CoinPayments config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "CoinPayments credentials object.",
                  "required": [
                    "publicKey",
                    "privateKey",
                    "ipnSecret"
                  ],
                  "properties": {
                    "publicKey": {
                      "type": "string"
                    },
                    "privateKey": {
                      "type": "string",
                      "format": "password"
                    },
                    "ipnSecret": {
                      "type": "string",
                      "format": "password"
                    }
                  }
                }
              }
            }
          ]
        },
        "Cardknox": {
          "description": "Cardknox Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "xKey": {
                      "type": "string",
                      "description": "Cardknox xKey.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "xKey"
                  ]
                }
              }
            }
          ]
        },
        "CashToCode": {
          "description": "CashToCode config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "CashToCode credentials object.",
                  "properties": {
                    "cashToCodeUsername": {
                      "type": "string",
                      "description": "CashToCode credentials Username."
                    },
                    "cashToCodePassword": {
                      "type": "string",
                      "description": "CashToCode credentials password.",
                      "format": "password"
                    },
                    "merchantUsername": {
                      "type": "string",
                      "description": "Merchant credentials Username."
                    },
                    "merchantPassword": {
                      "type": "string",
                      "description": "Merchant credentials password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "cashToCodeUsername",
                    "cashToCodePassword",
                    "merchantUsername",
                    "merchantPassword"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "skipAmountSelection": {
                      "type": "boolean",
                      "description": "Skip amount selection screen.",
                      "default": false
                    },
                    "amounts": {
                      "type": "array",
                      "description": "Amounts for which to allow transactions.",
                      "items": {
                        "type": "number",
                        "format": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "Cashflows": {
          "description": "Cashflows Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "authId": {
                      "type": "string",
                      "description": "Cashflows Gateway auth ID."
                    },
                    "authPassword": {
                      "type": "string",
                      "description": "Cashflows Gateway auth password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "authPassword",
                    "authId"
                  ]
                }
              }
            }
          ]
        },
        "CauriPayment": {
          "description": "CauriPayment config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "CauriPayment credentials object.",
                  "properties": {
                    "publicKey": {
                      "type": "string",
                      "description": "CauriPayment merchant's public key."
                    },
                    "privateKey": {
                      "type": "string",
                      "description": "CauriPayment merchant's private key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "publicKey",
                    "privateKey"
                  ]
                }
              }
            }
          ]
        },
        "Cayan": {
          "description": "Cayan Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantSiteId": {
                      "type": "string",
                      "description": "Cayan Gateway merchant site ID."
                    },
                    "merchantName": {
                      "type": "string",
                      "description": "Cayan Gateway merchant name."
                    },
                    "merchantKey": {
                      "type": "string",
                      "description": "Cayan Gateway merchant key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantSiteId",
                    "merchantName",
                    "merchantKey"
                  ]
                }
              }
            }
          ]
        },
        "CCAvenue": {
          "description": "CCAvenue config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "CCAvenue credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "CCAvenue merchant id."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "CCAvenue access code.",
                      "format": "password"
                    },
                    "workingKey": {
                      "type": "string",
                      "description": "CCAvenue working key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "accessCode",
                    "workingKey"
                  ]
                }
              }
            }
          ]
        },
        "Chase": {
          "description": "Chase Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Chase Gateway Net Connect username."
                    },
                    "password": {
                      "type": "string",
                      "description": "Chase Gateway Net Connect password.",
                      "format": "password"
                    },
                    "coNumber": {
                      "type": "string",
                      "description": "Chase Gateway CO Number used for delimited file reports."
                    },
                    "divisionId": {
                      "type": "string",
                      "description": "Chase Gateway division ID."
                    },
                    "partialAuth": {
                      "type": "boolean",
                      "description": "Support for Partial Auths.",
                      "default": false
                    }
                  },
                  "required": [
                    "username",
                    "password",
                    "coNumber",
                    "divisionId",
                    "partialAuth"
                  ]
                }
              }
            }
          ]
        },
        "Circle": {
          "description": "Circle config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Circle credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "Citadel": {
          "description": "Citadel config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Citadel credentials object.",
                  "properties": {
                    "storeName": {
                      "type": "string",
                      "description": "Store name."
                    },
                    "storeId": {
                      "type": "string",
                      "description": "Store ID."
                    },
                    "username": {
                      "type": "string",
                      "description": "Username."
                    },
                    "password": {
                      "type": "string",
                      "description": "Password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "storeName",
                    "storeId",
                    "username",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "Clearhaus3dsServers": {
          "description": "Clearhaus 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Clearhaus3dsServer": "#/components/schemas/Clearhaus3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Clearhaus3dsServers"
              ]
            }
          }
        },
        "Clearhaus3dsServer": {
          "description": "Clearhaus 3DS Server Credentials.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Clearhaus3dsServers"
            },
            {
              "type": "object",
              "required": [
                "merchantId",
                "acquirerBin",
                "apiKey"
              ],
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Merchant account ID or Card Acceptor ID provided by the acquiring bank."
                },
                "acquirerBin": {
                  "type": "string",
                  "description": "Acquiring institution identification code."
                },
                "apiKey": {
                  "type": "string",
                  "format": "password",
                  "description": "3DS Server Api key."
                }
              }
            }
          ]
        },
        "Clearhaus": {
          "description": "Clearhaus Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Clearhaus api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Clearhaus3dsServers"
                }
              }
            }
          ]
        },
        "Conekta": {
          "description": "Conekta config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Conekta credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Conekta private API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "Coppr": {
          "description": "Coppr config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Coppr credentials object.",
                  "properties": {
                    "organizationId": {
                      "type": "string",
                      "description": "Coppr Organization's ID."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "Coppr api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "organizationId",
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Coppr settings object.",
                  "properties": {
                    "rebillyPublishableKey": {
                      "type": "string",
                      "description": "Rebilly publishable api key. If provided a payment token will be created for each transaction."
                    }
                  }
                }
              }
            }
          ]
        },
        "Credorax": {
          "description": "Credorax Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Credorax Gateway merchant ID."
                    },
                    "merchantMd5Signature": {
                      "type": "string",
                      "description": "Credorax Gateway md5 signature.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "merchantMd5Signature"
                  ]
                }
              }
            }
          ]
        },
        "Cryptonator": {
          "description": "Cryptonator config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Cryptonator credentials object.",
                  "properties": {
                    "merchant_id": {
                      "type": "string",
                      "description": "Cryptonator merchant ID."
                    },
                    "secret": {
                      "type": "string",
                      "description": "Cryptonator secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchant_id",
                    "secret"
                  ]
                }
              }
            }
          ]
        },
        "CyberSource": {
          "description": "CyberSource config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "CyberSource credentials object.",
                  "properties": {
                    "accessKey": {
                      "type": "string",
                      "description": "CyberSource access key."
                    },
                    "profileId": {
                      "type": "string",
                      "description": "CyberSource profile ID."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "CyberSource secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "accessKey",
                    "profileId",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "DataCash3dsServers": {
          "description": "DataCash 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "DataCash3dsServer": "#/components/schemas/DataCash3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "DataCash3dsServer"
              ]
            }
          }
        },
        "DataCash3dsServer": {
          "description": "DataCash Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/DataCash3dsServers"
            }
          ]
        },
        "DataCash": {
          "description": "DataCash Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "client": {
                      "type": "string",
                      "description": "DataCash Gateway client."
                    },
                    "password": {
                      "type": "string",
                      "description": "DataCash Gateway password.",
                      "format": "password"
                    },
                    "reportGroup": {
                      "type": "string",
                      "description": "DataCash report group."
                    },
                    "reportUser": {
                      "type": "string",
                      "description": "DataCash report user."
                    },
                    "reportPassword": {
                      "type": "string",
                      "description": "DataCash report password.",
                      "format": "password"
                    },
                    "visaPayoutsClient": {
                      "type": "string",
                      "description": "DataCash Gateway client for Visa payouts (OCT)."
                    },
                    "visaPayoutsPassword": {
                      "type": "string",
                      "description": "DataCash Gateway password for Visa payouts (OCT).",
                      "format": "password"
                    },
                    "masterCardPayoutsClient": {
                      "type": "string",
                      "description": "DataCash Gateway client for MasterCard payouts (OCT)."
                    },
                    "masterCardPayoutsPassword": {
                      "type": "string",
                      "description": "DataCash Gateway password for MasterCard payouts (OCT).",
                      "format": "password"
                    }
                  },
                  "required": [
                    "client",
                    "password"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Datacash settings object.",
                  "properties": {
                    "policy": {
                      "type": "integer",
                      "description": "Policy.",
                      "minimum": 0,
                      "maximum": 7,
                      "default": 2
                    },
                    "delay": {
                      "type": "integer",
                      "description": "Auto Capture delay (in hours).",
                      "minimum": 0,
                      "default": 0
                    }
                  }
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/DataCash3dsServers"
                }
              }
            }
          ]
        },
        "Dengi": {
          "description": "Dengi Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "projectId": {
                      "type": "string",
                      "description": "Dengi Gateway project ID."
                    },
                    "publicKey": {
                      "type": "string",
                      "description": "Dengi Gateway public key.",
                      "format": "password"
                    },
                    "refundKey": {
                      "type": "string",
                      "description": "Dengi Gateway refund key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "projectId",
                    "publicKey",
                    "refundKey"
                  ]
                }
              }
            }
          ]
        },
        "dLocal": {
          "description": "dLocal config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "xLogin": {
                      "type": "string"
                    },
                    "xTransKey": {
                      "type": "string"
                    },
                    "secretKey": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "xLogin",
                    "xTransKey",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "Dragonphoenix": {
          "description": "Dragonphoenix config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Dragonphoenix credentials object.",
                  "properties": {
                    "sid": {
                      "type": "string",
                      "description": "Dragonphoenix site ID."
                    },
                    "rcode": {
                      "type": "string",
                      "description": "Dragonphoenix rcode.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "sid",
                    "rcode"
                  ]
                }
              }
            }
          ]
        },
        "Directa24Banks": {
          "type": "string",
          "enum": [
            "AA",
            "AL",
            "AZ",
            "B",
            "BB",
            "BC",
            "BE",
            "BL",
            "BM",
            "BN",
            "BP",
            "BQ",
            "BU",
            "BV",
            "BW",
            "BX",
            "BZ",
            "CA",
            "CE",
            "CI",
            "CU",
            "EF",
            "EN",
            "EY",
            "FA",
            "FB",
            "FC",
            "GC",
            "GG",
            "HC",
            "I",
            "IA",
            "IB",
            "JM",
            "LC",
            "LE",
            "LL",
            "MC",
            "MD",
            "MP",
            "MT",
            "NB",
            "OM",
            "OX",
            "PC",
            "PH",
            "PL",
            "SB",
            "SC",
            "SE",
            "SF",
            "SM",
            "SS",
            "ST",
            "SU",
            "TC",
            "TG",
            "TY",
            "UB",
            "UI",
            "UL",
            "US",
            "VD",
            "VI",
            "WA",
            "WP",
            "WU"
          ]
        },
        "Directa24": {
          "description": "Directa24 config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Directa24 credentials object.",
                  "properties": {
                    "x_login": {
                      "type": "string",
                      "description": "Directa24 login."
                    },
                    "x_tran_key": {
                      "type": "string",
                      "description": "Directa24 transaction key.",
                      "format": "password"
                    },
                    "secret_key": {
                      "type": "string",
                      "description": "Directa24 secret key.",
                      "format": "password"
                    },
                    "web_pay_login": {
                      "type": "string",
                      "description": "Directa24 web pay status login."
                    },
                    "web_pay_tran_key": {
                      "type": "string",
                      "description": "Directa24 web pay status password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "x_login",
                    "x_tran_key",
                    "secret_key",
                    "web_pay_login",
                    "web_pay_tran_key"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Directa24 settings object.",
                  "properties": {
                    "banks": {
                      "type": "array",
                      "description": "List of banks which will be shown to customers.",
                      "items": {
                        "$ref": "#/components/schemas/Directa24Banks"
                      }
                    },
                    "skipStep": {
                      "type": "boolean",
                      "description": "Skip step for user to enter their personal information."
                    }
                  }
                }
              }
            }
          ]
        },
        "EBANX": {
          "description": "EBANX config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "EBANX credentials object.",
                  "properties": {
                    "integrationKey": {
                      "type": "string",
                      "description": "EBANX integration key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "integrationKey"
                  ]
                }
              }
            }
          ]
        },
        "EPG": {
          "description": "EPG config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "EPG credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Merchant ID."
                    },
                    "productId": {
                      "type": "string",
                      "description": "Product ID."
                    },
                    "merchantPassword": {
                      "type": "string",
                      "description": "Merchant password.",
                      "format": "password"
                    },
                    "merchantKey": {
                      "type": "string",
                      "description": "Merchant key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "productId",
                    "merchantPassword",
                    "merchantKey"
                  ]
                }
              }
            }
          ]
        },
        "EPro": {
          "description": "EPro config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "EPro credentials object.",
                  "properties": {
                    "apiSecretKey": {
                      "type": "string",
                      "description": "EPro API secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiSecretKey"
                  ]
                }
              }
            }
          ]
        },
        "EcorePay": {
          "description": "EcorePay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "description": "EcorePay Account ID."
                    },
                    "accountAuth": {
                      "type": "string",
                      "description": "EcorePay Account Auth.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "accountId",
                    "accountAuth"
                  ]
                }
              }
            }
          ]
        },
        "Elavon": {
          "description": "Elavon config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Elavon credentials object.",
                  "properties": {
                    "ssl_merchant_id": {
                      "type": "string",
                      "description": "Elavon merchant ID."
                    },
                    "ssl_user_id": {
                      "type": "string",
                      "description": "Elavon user ID."
                    },
                    "ssl_pin": {
                      "type": "string",
                      "description": "Elavon pin.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "ssl_merchant_id",
                    "ssl_user_id",
                    "ssl_pin"
                  ]
                }
              }
            }
          ]
        },
        "EMS": {
          "description": "EMS e-Commerce (XML) API config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "settings": {
                  "type": "object",
                  "description": "EMS settings object.",
                  "properties": {
                    "delay": {
                      "type": "integer",
                      "description": "Automatic capture delay in hours."
                    }
                  }
                },
                "credentials": {
                  "type": "object",
                  "description": "EMS credentials object.",
                  "properties": {
                    "storeId": {
                      "type": "string",
                      "description": "EMS store id."
                    },
                    "userId": {
                      "type": "string",
                      "description": "EMS account id."
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "description": "EMS password."
                    },
                    "privateKey": {
                      "type": "string",
                      "format": "password",
                      "description": "Private Key.",
                      "x-multiline": true
                    },
                    "privateKeyPassword": {
                      "type": "string",
                      "format": "password",
                      "description": "Private key password."
                    },
                    "clientCertificate": {
                      "type": "string",
                      "description": "Client Certificate.",
                      "x-multiline": true
                    },
                    "clientCertificatePassword": {
                      "type": "string",
                      "format": "password",
                      "description": "Client Certificate password."
                    },
                    "serverCertificate": {
                      "type": "string",
                      "description": "Server Certificate.",
                      "x-multiline": true
                    }
                  },
                  "required": [
                    "storeId",
                    "userId",
                    "password",
                    "privateKey",
                    "privateKeyPassword",
                    "clientCertificate",
                    "clientCertificatePassword",
                    "serverCertificate"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/EMS3dsServers"
                }
              }
            }
          ]
        },
        "Euteller": {
          "description": "Euteller config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Euteller credentials object.",
                  "properties": {
                    "username": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "eZeeWallet": {
          "description": "eZeeWallet config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "eZeeWallet credentials object.",
                  "properties": {
                    "apiUsername": {
                      "type": "string",
                      "description": "eZeeWallet API username.",
                      "format": "password"
                    },
                    "apiPassword": {
                      "type": "string",
                      "description": "eZeeWallet API password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiUsername",
                    "apiPassword"
                  ]
                }
              }
            }
          ]
        },
        "FinTecSystems": {
          "description": "FinTecSystems config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "FinTecSystems credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "FinTecSystems api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "FinTecSystems settings object.",
                  "properties": {
                    "recipientIBAN": {
                      "type": "string",
                      "description": "IBAN of the recipient account."
                    },
                    "recipientBIC": {
                      "type": "string",
                      "description": "BIC of the recipient account."
                    },
                    "recipientCountry": {
                      "type": "string",
                      "description": "Two letter country code.",
                      "enum": [
                        "AT",
                        "CH",
                        "DE"
                      ]
                    },
                    "recipientHolder": {
                      "type": "string",
                      "description": "Account holder of the recipient account."
                    }
                  },
                  "required": [
                    "recipientIBAN",
                    "recipientBIC",
                    "recipientHolder",
                    "recipientCountry"
                  ]
                }
              }
            }
          ]
        },
        "AmountAdjustmentTolerance": {
          "type": "integer",
          "description": "Tolerance percentage for settled amount.",
          "minimum": 0,
          "maximum": 5,
          "example": 5
        },
        "Finrax": {
          "description": "Finrax config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Finrax credentials object.",
                  "properties": {
                    "businessId": {
                      "type": "string",
                      "description": "Finrax Business Id."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "Finrax API Key.",
                      "format": "password"
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "Finrax API Secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "businessId",
                    "apiKey",
                    "apiSecret"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Finrax settings object.",
                  "required": [
                    "tolerancePercentage"
                  ],
                  "properties": {
                    "tolerancePercentage": {
                      "$ref": "#/components/schemas/AmountAdjustmentTolerance"
                    }
                  }
                }
              }
            }
          ]
        },
        "Flexepin": {
          "description": "Flexepin Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Flexepin API Key."
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "Flexepin API Secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey",
                    "apiSecret"
                  ]
                }
              }
            }
          ]
        },
        "Forte": {
          "description": "Forte Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "description": "Forte Gateway account ID."
                    },
                    "locationId": {
                      "type": "string",
                      "description": "Forte Gateway location ID."
                    },
                    "apiAccessId": {
                      "type": "string",
                      "description": "Forte Gateway api access ID.",
                      "format": "password"
                    },
                    "apiSecretKey": {
                      "type": "string",
                      "description": "Forte Gateway api secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "accountId",
                    "locationId",
                    "apiAccessId",
                    "apiSecretKey"
                  ]
                }
              }
            }
          ]
        },
        "FundSend": {
          "description": "FundSend Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "FundSend Gateway client ID."
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "FundSend Gateway secret word.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "clientId",
                    "secretWord"
                  ]
                }
              }
            }
          ]
        },
        "GET": {
          "description": "GET Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "description": "GET Gateway account ID."
                    }
                  },
                  "required": [
                    "accountId"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/GET3dsServers"
                }
              }
            }
          ]
        },
        "Gigadat": {
          "description": "Gigadat config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Gigadat credentials object.",
                  "properties": {
                    "campaignId": {
                      "type": "string",
                      "description": "Gigadat campaign ID."
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "Gigadat access token.",
                      "format": "password"
                    },
                    "securityToken": {
                      "type": "string",
                      "description": "Gigadat security token.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "campaignId",
                    "accessToken",
                    "securityToken"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "sandbox": {
                      "type": "boolean",
                      "description": "True if gateway account is in sandbox mode.",
                      "default": false
                    }
                  },
                  "required": [
                    "sandbox"
                  ]
                }
              }
            }
          ]
        },
        "GlobalOne": {
          "description": "GlobalOne Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "terminalId": {
                      "type": "string",
                      "description": "GlobalOne Gateway terminal ID."
                    },
                    "sharedSecret": {
                      "type": "string",
                      "description": "GlobalOne Gateway shared secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "terminalId",
                    "sharedSecret"
                  ]
                }
              }
            }
          ]
        },
        "Gooney": {
          "description": "Gooney config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Gooney credentials object.",
                  "properties": {
                    "apiUser": {
                      "type": "string",
                      "description": "Gooney API user."
                    },
                    "apiPassword": {
                      "type": "string",
                      "description": "Gooney API password.",
                      "format": "password"
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "Gooney API key."
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "Gooney API secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "password",
                    "apiKey",
                    "apiSecret"
                  ]
                }
              }
            }
          ]
        },
        "Gpaysafe": {
          "description": "Gpaysafe Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Gpaysafe apiKey."
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "Greenbox": {
          "description": "Greenbox config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Greenbox credentials object.",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "Greenbox client ID."
                    },
                    "locationId": {
                      "type": "string",
                      "description": "Greenbox location ID."
                    },
                    "clientSecret": {
                      "type": "string",
                      "description": "Greenbox client secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "clientId",
                    "clientSecret",
                    "locationId"
                  ]
                }
              }
            }
          ]
        },
        "HiPay": {
          "description": "HiPay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "HiPay credentials object.",
                  "properties": {
                    "apiUsername": {
                      "type": "string",
                      "description": "HiPay API user name."
                    },
                    "apiPassword": {
                      "type": "string",
                      "description": "HiPay API password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiUsername",
                    "apiPassword"
                  ]
                }
              }
            }
          ]
        },
        "ICEPAY": {
          "description": "ICEPAY config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "ICEPAY credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "ICEPAY merchant ID.",
                      "format": "password"
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "ICEPAY API secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "INOVAPAY": {
          "description": "INOVAPAY config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "INOVAPAY credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "INOVAPAY API key."
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "INOVAPAY API secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey",
                    "apiSecret"
                  ]
                }
              }
            }
          ]
        },
        "Ilixium3dsServers": {
          "description": "Ilixium3dsServers 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Ilixium3dsServer": "#/components/schemas/Ilixium3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Ilixium3dsServer"
              ]
            }
          }
        },
        "Ilixium3dsServer": {
          "description": "Ilixium Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Ilixium3dsServers"
            }
          ]
        },
        "Ilixium": {
          "description": "Ilixium Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Ilixium credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Ilixium Gateway merchant ID."
                    },
                    "accountId": {
                      "type": "string",
                      "description": "Ilixium Gateway account ID."
                    },
                    "digestPassword": {
                      "type": "string",
                      "description": "Ilixium Gateway digest password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "accountId",
                    "digestPassword"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Ilixium settings object.",
                  "properties": {
                    "useIpFrame": {
                      "type": "boolean",
                      "description": "Force Ilixium to process via Ip Frame."
                    },
                    "useCreditEndpoint": {
                      "type": "boolean",
                      "description": "Use previous approval credit endpoint for payouts."
                    },
                    "useStandaloneCreditEndpoint": {
                      "type": "boolean",
                      "description": "Use standalone (token) credit endpoint for payouts."
                    }
                  }
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Ilixium3dsServers"
                }
              }
            }
          ]
        },
        "Ingenico3dsServers": {
          "description": "Ingenico 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Ingenico3dsServer": "#/components/schemas/Ingenico3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Ingenico3dsServer"
              ]
            }
          }
        },
        "Ingenico3dsServer": {
          "description": "Ingenico Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Ingenico3dsServers"
            }
          ]
        },
        "Ingenico": {
          "description": "Ingenico Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Ingenico Gateway merchant ID."
                    },
                    "apiKeyId": {
                      "type": "string",
                      "description": "Ingenico Gateway api key ID."
                    },
                    "apiSecretKey": {
                      "type": "string",
                      "description": "Ingenico Gateway api secret key.",
                      "format": "password"
                    },
                    "skipFraudService": {
                      "type": "boolean",
                      "description": "Ingenico skip fraud service."
                    }
                  },
                  "required": [
                    "merchantId",
                    "apiKeyId",
                    "apiSecretKey"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Ingenico3dsServers"
                }
              }
            }
          ]
        },
        "Inovio3dsServers": {
          "description": "Inovio 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Inovio3dsServer": "#/components/schemas/Inovio3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Inovio3dsServer"
              ]
            }
          }
        },
        "Inovio3dsServer": {
          "description": "Inovio Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Inovio3dsServers"
            }
          ]
        },
        "Inovio": {
          "description": "Inovio config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Inovio credentials object.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Inovio username."
                    },
                    "password": {
                      "type": "string",
                      "description": "Inovio password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Inovio settings object.",
                  "properties": {
                    "websiteId": {
                      "type": "string",
                      "description": "Inovio website ID."
                    },
                    "merchantAccountId": {
                      "type": "string",
                      "description": "Inovio merchant account ID."
                    },
                    "productId": {
                      "type": "string",
                      "description": "Inovio product ID."
                    }
                  },
                  "required": [
                    "websiteId",
                    "merchantAccountId",
                    "productId"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Inovio3dsServers"
                }
              }
            }
          ]
        },
        "InstaDebit": {
          "description": "InstaDebit config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "InstaDebit credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "InstaDebit merchant account number."
                    },
                    "password": {
                      "type": "string",
                      "description": "InstaDebit merchant account password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "Intuit": {
          "description": "Intuit Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "The Intuit client_id key."
                    },
                    "clientSecret": {
                      "type": "string",
                      "description": "The Intuit client_secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "clientId",
                    "clientSecret"
                  ]
                }
              }
            }
          ]
        },
        "IpayOptions": {
          "description": "Ipay Options config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Ipay Options credentials object.",
                  "properties": {
                    "sid": {
                      "type": "string",
                      "description": "Ipay Options website ID."
                    },
                    "rcode": {
                      "type": "string",
                      "description": "Ipay Options rcode.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "sid",
                    "rcode"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Ipay Options settings object.",
                  "properties": {
                    "extraStep": {
                      "type": "boolean",
                      "description": "Show extra step for user to enter their email and DNI number."
                    },
                    "subdomain": {
                      "type": "string",
                      "description": "Subdomain to use when sending request to IpayOptions.",
                      "enum": [
                        "miglite",
                        "w88asiapay"
                      ]
                    },
                    "platform": {
                      "type": "string",
                      "description": "Platform which IpayOptions will process.",
                      "enum": [
                        "SOAP",
                        "TxHandler",
                        "SecureHosted"
                      ]
                    },
                    "cardType": {
                      "type": "string",
                      "description": "Manually set the card_type for iDEAL.",
                      "enum": [
                        "ideal",
                        "idealqr",
                        "sofort"
                      ]
                    }
                  }
                }
              }
            }
          ]
        },
        "JetPay": {
          "description": "JetPay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "TerminalID": {
                      "type": "string",
                      "description": "JetPay Gateway terminal ID."
                    }
                  },
                  "required": [
                    "TerminalID"
                  ]
                }
              }
            }
          ]
        },
        "Jeton": {
          "description": "Jeton Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Jeton apiKey.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "method": {
                      "type": "string",
                      "description": "Jeton's method.",
                      "enum": [
                        "CHECKOUT",
                        "DIRECT",
                        "QR",
                        "JETGO"
                      ]
                    }
                  },
                  "required": [
                    "method"
                  ]
                }
              }
            }
          ]
        },
        "Khelocard": {
          "description": "Khelocard config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Credentials object.",
                  "required": [
                    "merchantId",
                    "referrer",
                    "apiKey",
                    "apiSecret"
                  ],
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Merchant ID."
                    },
                    "referrer": {
                      "type": "string",
                      "description": "The referrer URL registered on Khelocard.",
                      "format": "uri"
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "API key.",
                      "format": "password"
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "API secret.",
                      "format": "password"
                    }
                  }
                }
              }
            }
          ]
        },
        "Konnektive": {
          "description": "Konnektive config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Credentials object.",
                  "required": [
                    "loginId",
                    "password"
                  ],
                  "properties": {
                    "loginId": {
                      "type": "string",
                      "description": "Konnektive API login ID."
                    },
                    "password": {
                      "type": "string",
                      "description": "Konnektive API password.",
                      "format": "password"
                    }
                  }
                },
                "settings": {
                  "type": "object",
                  "description": "Settings object.",
                  "required": [
                    "campaignId",
                    "productId"
                  ],
                  "properties": {
                    "campaignId": {
                      "type": "string",
                      "description": "Konnektive campaign ID for which the order is being placed."
                    },
                    "productId": {
                      "type": "string",
                      "description": "Konnektive campaign product ID for which the order is being placed."
                    }
                  }
                }
              }
            }
          ]
        },
        "LPG": {
          "description": "LPG config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "LPG credentials object.",
                  "properties": {
                    "publicKey": {
                      "type": "string",
                      "description": "LPG public API key."
                    },
                    "secureKey": {
                      "type": "string",
                      "description": "LPG secure API key.",
                      "format": "password"
                    },
                    "payoutUsername": {
                      "type": "string",
                      "description": "LPG payout account username.",
                      "format": "password"
                    },
                    "payoutPassword": {
                      "type": "string",
                      "description": "LPG payout account password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "publicKey",
                    "secureKey"
                  ]
                }
              }
            }
          ]
        },
        "Moneris": {
          "description": "Moneris Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiToken": {
                      "type": "string",
                      "description": "Moneris Gateway api token.",
                      "format": "password"
                    },
                    "storeId": {
                      "type": "string",
                      "description": "Moneris Gateway store ID."
                    }
                  },
                  "required": [
                    "storeId",
                    "apiToken"
                  ]
                }
              }
            }
          ]
        },
        "MtaPay": {
          "description": "MTA Pay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "description": "MTA Pay Gateway account ID."
                    },
                    "partyId": {
                      "type": "string",
                      "description": "MTA Pay Gateway party ID."
                    },
                    "md5key": {
                      "type": "string",
                      "description": "MTA Pay Gateway md5key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "accountId",
                    "partyId",
                    "md5key"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "MTA Pay settings object.",
                  "properties": {
                    "goods": {
                      "type": "string",
                      "description": "MTA Pay Gateway goods."
                    },
                    "mobilePay": {
                      "type": "string",
                      "description": "MTA Pay Gateway mobile pay param."
                    }
                  },
                  "required": [
                    "mobilePay",
                    "goods"
                  ]
                }
              }
            }
          ]
        },
        "MuchBetter": {
          "description": "MuchBetter config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "MuchBetter credentials object.",
                  "properties": {
                    "merchantAccountId": {
                      "type": "string",
                      "description": "MuchBetter merchant account ID."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "MuchBetter api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantAccountId",
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "MuchBetter settings object.",
                  "properties": {
                    "brandName": {
                      "type": "string",
                      "description": "MuchBetter brand name used for reporting and logo."
                    },
                    "hasPhoneNumberRequest": {
                      "type": "boolean",
                      "description": "Request phone number before submitting the request to MuchBetter.",
                      "default": false
                    }
                  }
                }
              }
            }
          ]
        },
        "MyFatoorah": {
          "description": "MyFatoorah config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "MyFatoorah credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "MyFatoorah api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "Neosurf": {
          "description": "Neosurf config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Neosurf credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Neosurf merchant ID."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "Neosurf API secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "NMI": {
          "description": "NMI Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "NMI Gateway api token."
                    },
                    "password": {
                      "type": "string",
                      "description": "NMI Gateway store ID.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/NMI3dsServers"
                }
              }
            }
          ]
        },
        "Netbanking": {
          "description": "Netbanking config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Netbanking credentials object.",
                  "properties": {
                    "midcode": {
                      "type": "string",
                      "description": "Netbanking MID code."
                    },
                    "midsecret": {
                      "type": "string",
                      "description": "Netbanking MID secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "midcode",
                    "midsecret"
                  ]
                }
              }
            }
          ]
        },
        "Neteller": {
          "description": "Neteller Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Neteller credentials object.",
                  "properties": {
                    "paysafePaymentsApiUsername": {
                      "type": "string",
                      "description": "Neteller App Paysafe Payments API Username for a private key."
                    },
                    "paysafePaymentsApiPassword": {
                      "type": "string",
                      "description": "Neteller App Paysafe Payments API Password for a private key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "paysafePaymentsApiUsername",
                    "paysafePaymentsApiPassword"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "populateCustomerEmail": {
                      "type": "boolean",
                      "description": "Populate customer email for payment."
                    }
                  }
                }
              }
            }
          ]
        },
        "NGenius3dsServers": {
          "description": "NGenius 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "NGenius3dsServer": "#/components/schemas/NGenius3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "NGenius3dsServer"
              ]
            }
          }
        },
        "NGenius3dsServer": {
          "description": "NGenius Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/NGenius3dsServers"
            }
          ]
        },
        "NGenius": {
          "description": "NGenius config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "NGenius credentials object.",
                  "properties": {
                    "outletId": {
                      "type": "string",
                      "description": "NGenius outlet ID."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "NGenius API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "outletId",
                    "apiKey"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/NGenius3dsServers"
                }
              }
            }
          ]
        },
        "NinjaWallet": {
          "description": "NinjaWallet config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "NinjaWallet credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "NinjaWallet api key.",
                      "format": "password"
                    },
                    "secret": {
                      "type": "string",
                      "description": "NinjaWallet secret.",
                      "format": "password"
                    },
                    "passphrase": {
                      "type": "string",
                      "description": "NinjaWallet passphrase.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey",
                    "secret",
                    "passphrase"
                  ]
                }
              }
            }
          ]
        },
        "NuaPay": {
          "description": "NuaPay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "NuaPay credentials object.",
                  "properties": {
                    "nuaPayCommonName": {
                      "type": "string",
                      "description": "NuaPay common name."
                    },
                    "nuaPaySerialNumber": {
                      "type": "string",
                      "description": "NuaPay serial number."
                    },
                    "nuaPayAccountId": {
                      "type": "string",
                      "description": "NuaPay account ID."
                    },
                    "nuaPayOriginatorIban": {
                      "type": "string",
                      "description": "NuaPay origiantor IBAN.",
                      "format": "password"
                    },
                    "nuaPayApiKey": {
                      "type": "string",
                      "description": "NuaPay api key.",
                      "format": "password"
                    },
                    "nuaPayPrivateKey": {
                      "type": "string",
                      "description": "NuaPay private key.",
                      "format": "password",
                      "x-multiline": true
                    }
                  },
                  "required": [
                    "nuaPayCommonName",
                    "nuaPaySerialNumber",
                    "nuaPayAccountId",
                    "nuaPayOriginatorIban",
                    "nuaPayApiKey",
                    "nuaPayPrivateKey"
                  ]
                }
              }
            }
          ]
        },
        "OchaPay": {
          "description": "OchaPay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiUsername": {
                      "type": "string",
                      "description": "OchaPay Gateway username."
                    },
                    "apiPassword": {
                      "type": "string",
                      "description": "OchaPay Gateway api password.",
                      "format": "password"
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "OchaPay Gateway secret word.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiUsername",
                    "apiPassword",
                    "secretWord"
                  ]
                }
              }
            }
          ]
        },
        "Onlineueberweisen": {
          "description": "Onlineueberweisen config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Onlineueberweisen credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Onlineueberweisen API Key.",
                      "format": "password"
                    },
                    "nuaPayApiKey": {
                      "type": "string",
                      "description": "NuaPay API Key for reconciliation.",
                      "format": "password"
                    },
                    "nuaPayAccountId": {
                      "type": "string",
                      "description": "NuaPay account ID for reconciliation."
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Onlineueberweisen settings object.",
                  "properties": {
                    "payformCode": {
                      "type": "string",
                      "description": "Onlineueberweisen payform code to use customized Payform template.",
                      "default": "default"
                    }
                  }
                }
              }
            }
          ]
        },
        "Pagsmile": {
          "description": "Pagsmile Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Pagsmile merchant ID."
                    },
                    "appId": {
                      "type": "string",
                      "description": "Pagsmile app ID."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "Pagsmile secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "appId",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "Panamerican3dsServers": {
          "description": "Panamerican 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Panamerican3dsServer": "#/components/schemas/Panamerican3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Panamerican3dsServer"
              ]
            }
          }
        },
        "Panamerican3dsServer": {
          "description": "Panamerican Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Panamerican3dsServers"
            }
          ]
        },
        "Panamerican": {
          "description": "Panamerican config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Panamerican credentials object.",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Panamerican's key."
                    },
                    "password": {
                      "type": "string",
                      "description": "Panamerican's Password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "key",
                    "password"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Panamerican3dsServers"
                },
                "settings": {
                  "type": "object",
                  "description": "Panamerican settings object.",
                  "properties": {
                    "extraStep": {
                      "type": "boolean",
                      "description": "Show extra step for user to enter their ID number."
                    },
                    "convertToAscii": {
                      "type": "boolean",
                      "description": "Will convert all chars to ascii."
                    }
                  },
                  "required": [
                    "extraStep"
                  ]
                }
              }
            }
          ]
        },
        "PandaGateway": {
          "description": "Panda Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantCode": {
                      "type": "string",
                      "description": "Panda Gateway merchant code."
                    },
                    "apiCode": {
                      "type": "string",
                      "description": "Panda Gateway api code."
                    },
                    "signKey": {
                      "type": "string",
                      "description": "Panda Gateway sign key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantCode",
                    "apiCode",
                    "signKey"
                  ]
                }
              }
            }
          ]
        },
        "ParamountEft": {
          "description": "Paramount config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Paramount credentials object.",
                  "properties": {
                    "merchant_id": {
                      "type": "string",
                      "description": "Merchant account ID."
                    },
                    "merchant_pass": {
                      "type": "string",
                      "description": "Merchant account password.",
                      "format": "password"
                    },
                    "payee": {
                      "type": "string",
                      "description": "Merchant name/descriptor."
                    }
                  },
                  "required": [
                    "merchant_id",
                    "merchant_pass",
                    "payee"
                  ]
                }
              }
            }
          ]
        },
        "ParamountInterac": {
          "description": "ParamountInterac config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "ParamountInterac credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "ParamountInterac merchant ID."
                    },
                    "encryptionKey": {
                      "type": "string",
                      "description": "ParamountInterac encryption key.",
                      "format": "password"
                    },
                    "password": {
                      "type": "string",
                      "description": "ParamountInterac password for query.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "encryptionKey",
                    "password"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "sandbox": {
                      "type": "boolean",
                      "description": "True if gateway account is in sandbox mode.",
                      "default": false
                    }
                  },
                  "required": [
                    "sandbox"
                  ]
                }
              }
            }
          ]
        },
        "Pay4Fun": {
          "description": "Pay4Fun config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Pay4Fun credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Pay4Fun merchant ID."
                    },
                    "merchantSecret": {
                      "type": "string",
                      "description": "Pay4Fun merchant secret.",
                      "format": "password"
                    },
                    "merchantKey": {
                      "type": "string",
                      "description": "Pay4Fun merchant key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "merchantSecret",
                    "merchantKey"
                  ]
                }
              }
            }
          ]
        },
        "PayCash": {
          "description": "PayCash config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "PayCash credentials object.",
                  "properties": {
                    "emisor": {
                      "type": "string",
                      "description": "Identify of the company."
                    },
                    "token": {
                      "type": "string",
                      "description": "Token.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "emisor",
                    "token"
                  ]
                }
              }
            }
          ]
        },
        "PayPal": {
          "description": "PayPal Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "settings"
              ],
              "properties": {
                "settings": {
                  "type": "object",
                  "description": "PayPal settings object.",
                  "required": [
                    "redirectUrl"
                  ],
                  "properties": {
                    "redirectUrl": {
                      "type": "string",
                      "description": "The URL where the user will be redirected after authorizing the account on PayPal.",
                      "format": "url"
                    }
                  }
                }
              }
            }
          ]
        },
        "Payeezy": {
          "description": "Payeezy Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Payeezy Merchant ID."
                    },
                    "merchantToken": {
                      "type": "string",
                      "description": "Merchant Token.",
                      "format": "password"
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "API Key."
                    },
                    "apiSecret": {
                      "type": "string",
                      "description": "API Secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "merchantToken",
                    "apiKey",
                    "apiSecret"
                  ]
                }
              }
            }
          ]
        },
        "Payflow": {
          "description": "Payflow config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Payflow credentials object.",
                  "properties": {
                    "user": {
                      "type": "string",
                      "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR."
                    },
                    "vendor": {
                      "type": "string",
                      "description": "Your merchant login ID created when you registered for the account."
                    },
                    "password": {
                      "type": "string",
                      "description": "The password you defined while registering for the account.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "user",
                    "vendor",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "PaymenTechnologies": {
          "description": "PaymenTechnologies Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "authenticateId": {
                      "type": "string",
                      "description": "PaymenTechnologies Gateway authenticate ID."
                    },
                    "authenticatePw": {
                      "type": "string",
                      "description": "PaymenTechnologies Gateway authenticate password.",
                      "format": "password"
                    },
                    "publicKey": {
                      "type": "string",
                      "description": "PaymenTechnologies Gateway API public key."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "PaymenTechnologies Gateway API secret key.",
                      "format": "password"
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "PaymenTechnologies API key required for query operations.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "authenticateId",
                    "authenticatePw",
                    "publicKey",
                    "secretKey",
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "use3DSEndpoint": {
                      "type": "boolean",
                      "description": "Use 3DS endpoint."
                    }
                  }
                }
              }
            }
          ]
        },
        "PaymentsOS": {
          "description": "PaymentsOS config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "appId": {
                      "type": "string"
                    },
                    "privateKey": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "appId",
                    "privateKey"
                  ]
                }
              }
            }
          ]
        },
        "Paymero": {
          "description": "Paymero config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Paymero credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Paymero API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Paymero settings object.",
                  "required": [
                    "tolerancePercentage"
                  ],
                  "properties": {
                    "tolerancePercentage": {
                      "type": "integer",
                      "description": "Tolerance percentage for settled amount.",
                      "minimum": 0,
                      "maximum": 5,
                      "example": 5
                    },
                    "targetCurrency": {
                      "description": "This will be the currency to which you want to auto-convert the received cryptocurrency in to.",
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 3,
                      "example": "USD"
                    },
                    "mainCurrency": {
                      "description": "This will be the blockchain on which currency runs.",
                      "type": "string",
                      "enum": [
                        "TRX",
                        "ETH"
                      ]
                    },
                    "amountExceeded": {
                      "description": "Decline transactions when the amount received exceeds the amount requested.",
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            }
          ]
        },
        "Payr": {
          "description": "Payr Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "Payr Gateway client ID."
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "Payr Gateway secret word.",
                      "format": "password"
                    },
                    "apiUserId": {
                      "type": "string",
                      "description": "Username for the Alliance API (transaction reporting)."
                    },
                    "apiSecurityToken": {
                      "type": "string",
                      "description": "Hash of the password for the Alliance API (transaction reporting).",
                      "format": "password"
                    }
                  },
                  "required": [
                    "clientId",
                    "secretWord"
                  ]
                }
              }
            }
          ]
        },
        "Paysafe3dsServers": {
          "description": "Paysafe 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Paysafe3dsServer": "#/components/schemas/Paysafe3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Paysafe3dsServer"
              ]
            }
          }
        },
        "Paysafe3dsServer": {
          "description": "Paysafe Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Paysafe3dsServers"
            }
          ]
        },
        "Paysafe": {
          "description": "Paysafe Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "storeId": {
                      "type": "string",
                      "description": "Paysafe Gateway store ID."
                    },
                    "storePwd": {
                      "type": "string",
                      "description": "Paysafe Gateway store password.",
                      "format": "password"
                    },
                    "accountNum": {
                      "type": "string",
                      "description": "Paysafe Gateway account number."
                    }
                  },
                  "required": [
                    "storeId",
                    "storePwd",
                    "accountNum"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Paysafe3dsServers"
                }
              }
            }
          ]
        },
        "Paysafecash": {
          "description": "Paysafecash Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Paysafecash API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "PayTabs": {
          "description": "PayTabs config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "PayTabs credentials object.",
                  "properties": {
                    "profileId": {
                      "type": "string"
                    },
                    "clientKey": {
                      "type": "string"
                    },
                    "serverKey": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "profileId",
                    "clientKey",
                    "serverKey"
                  ]
                }
              }
            }
          ]
        },
        "PayULatam": {
          "description": "PayULatam config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "PayULatam credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "PayULatam merchant id."
                    },
                    "accountId": {
                      "type": "string",
                      "description": "PayULatam account id."
                    },
                    "apiLogin": {
                      "type": "string",
                      "description": "PayULatam API login."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "PayULatam API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "accountId",
                    "apiLogin",
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "Payvision": {
          "description": "Payvision Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "memberId": {
                      "type": "string",
                      "description": "Payvision Gateway member id."
                    },
                    "memberGuid": {
                      "type": "string",
                      "description": "Payvision Gateway member guid.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "memberId",
                    "memberGuid"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Payvision settings object.",
                  "properties": {
                    "avs": {
                      "type": "boolean",
                      "description": "Payvision Gateway avs."
                    },
                    "delay": {
                      "type": "integer",
                      "description": "Payvision Gateway delay."
                    },
                    "merchantAccountType": {
                      "type": "integer",
                      "description": "Payvision merchant account type."
                    }
                  },
                  "required": [
                    "merchantAccountType"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Payvision3dsServers"
                }
              }
            }
          ]
        },
        "Piastrix3dsServers": {
          "description": "Piastrix 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Piastrix3dsServer": "#/components/schemas/Piastrix3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Piastrix3dsServer"
              ]
            }
          }
        },
        "Piastrix3dsServer": {
          "description": "Piastrix Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Piastrix3dsServers"
            }
          ]
        },
        "Piastrix": {
          "description": "Piastrix config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Piastrix credentials object.",
                  "properties": {
                    "shopId": {
                      "type": "string",
                      "description": "Shop ID."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "Secret Key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "shopId",
                    "secretKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Piastrix settings object.",
                  "properties": {
                    "tolerancePercentage": {
                      "type": "integer",
                      "description": "Tolerance percentage for settled amount.",
                      "minimum": 0,
                      "maximum": 5,
                      "example": 5
                    }
                  }
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Piastrix3dsServers"
                }
              }
            }
          ]
        },
        "Plugnpay": {
          "description": "Plugnpay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "publisher-name": {
                      "type": "string",
                      "description": "Plugnpay Gateway member id."
                    },
                    "publisher-password": {
                      "type": "string",
                      "description": "Plugnpay Gateway avs.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "publisher-name",
                    "publisher-password"
                  ]
                }
              }
            }
          ]
        },
        "Prosa": {
          "description": "Prosa config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Prosa credentials object.",
                  "properties": {
                    "entityId": {
                      "type": "string",
                      "description": "Entity ID."
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "Access token.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "entityId",
                    "accessToken"
                  ]
                }
              }
            }
          ]
        },
        "RPN": {
          "description": "RPN Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "mid": {
                      "type": "string",
                      "description": "RPN MID."
                    },
                    "key": {
                      "type": "string",
                      "description": "RPN Key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "mid",
                    "key"
                  ]
                }
              }
            }
          ]
        },
        "Realex": {
          "description": "Realex Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Realex Gateway merchant id."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "Realex Gateway secret key.",
                      "format": "password"
                    },
                    "rebatePassword": {
                      "type": "string",
                      "description": "Realex Gateway rebate password.",
                      "format": "password"
                    },
                    "account": {
                      "type": "string",
                      "description": "Realex Gateway account."
                    }
                  },
                  "required": [
                    "merchantId",
                    "secretKey",
                    "rebatePassword",
                    "account"
                  ]
                }
              }
            }
          ]
        },
        "Realtime": {
          "description": "Realtime Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "Realtime Gateway client ID."
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "Realtime Gateway secret word.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "clientId",
                    "secretWord"
                  ]
                }
              }
            }
          ]
        },
        "Redsys": {
          "description": "Redsys Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantCode": {
                      "type": "string",
                      "description": "Redsys Gateway merchant code.",
                      "format": "password"
                    },
                    "secretCode": {
                      "type": "string",
                      "description": "Redsys Gateway secret code.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantCode",
                    "secretCode"
                  ]
                }
              }
            }
          ]
        },
        "Rotessa": {
          "description": "Rotessa config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Rotessa credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "Rotessa api key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "Rotessa settings object.",
                  "properties": {
                    "delay": {
                      "type": "integer",
                      "description": "Rotessa Gateway time delay for them to process transaction."
                    }
                  },
                  "required": [
                    "delay"
                  ]
                }
              }
            }
          ]
        },
        "SaltarPay": {
          "description": "SaltarPay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "SaltarPay credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "SaltarPay API key.",
                      "format": "password"
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "SaltarPay secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "SMSVoucher": {
          "description": "SMSVoucher Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "AppId": {
                      "type": "string",
                      "description": "SMSVoucher AppId."
                    }
                  },
                  "required": [
                    "AppId"
                  ]
                }
              }
            }
          ]
        },
        "Sofort": {
          "description": "Sofort config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Sofort credentials object.",
                  "properties": {
                    "configKey": {
                      "type": "string",
                      "description": "Sofort configuration key.",
                      "format": "password"
                    },
                    "nuaPayApiKey": {
                      "type": "string",
                      "description": "NuaPay API Key for reconciliation.",
                      "format": "password"
                    },
                    "nuaPayAccountId": {
                      "type": "string",
                      "description": "NuaPay account ID for reconciliation."
                    }
                  },
                  "required": [
                    "configKey"
                  ]
                }
              }
            }
          ]
        },
        "Sagepay": {
          "description": "Sagepay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "M_ID": {
                      "type": "string",
                      "description": "Sagepay Gateway merchant ID."
                    },
                    "M_KEY": {
                      "type": "string",
                      "description": "Sagepay Gateway merchant key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "M_ID",
                    "M_KEY"
                  ]
                }
              }
            }
          ]
        },
        "SeamlessChex": {
          "description": "SeamlessChex config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "SeamlessChex credentials object.",
                  "properties": {
                    "publicKey": {
                      "type": "string",
                      "description": "SeamlessChex publishable key."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "SeamlessChex secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "publicKey",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "SecureTrading3dsServers": {
          "description": "SecureTrading 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "SecureTrading3dsServer": "#/components/schemas/SecureTrading3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "SecureTrading3dsServer"
              ]
            }
          }
        },
        "SecureTrading3dsServer": {
          "description": "SecureTrading 3DS Server.",
          "allOf": [
            {
              "$ref": "#/components/schemas/SecureTrading3dsServers"
            }
          ]
        },
        "SecureTrading": {
          "description": "SecureTrading config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "SecureTrading credentials object.",
                  "properties": {
                    "websiteId": {
                      "type": "string",
                      "description": "Website ID."
                    },
                    "username": {
                      "type": "string",
                      "description": "SecureTrading web service username."
                    },
                    "password": {
                      "type": "string",
                      "description": "SecureTrading web service password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "websiteId",
                    "username",
                    "password"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/SecureTrading3dsServers"
                }
              }
            }
          ]
        },
        "Skrill": {
          "description": "Skrill config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Skrill credentials object.",
                  "properties": {
                    "accountEmail": {
                      "type": "string",
                      "description": "Email address of your Skrill merchant account."
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "Secret word used for MD5 signature verifications.",
                      "format": "password"
                    },
                    "mqiPassword": {
                      "type": "string",
                      "description": "Password used during MQI/API requests.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "accountEmail",
                    "secretWord"
                  ]
                }
              }
            }
          ]
        },
        "SmartInvoice3dsServers": {
          "description": "SmartInvoice 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "SmartInvoice3dsServer": "#/components/schemas/SmartInvoice3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "SmartInvoice3dsServer"
              ]
            }
          }
        },
        "SmartInvoice3dsServer": {
          "description": "SmartInvoice Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/SmartInvoice3dsServers"
            }
          ]
        },
        "SmartInvoice": {
          "description": "SmartInvoice config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "SmartInvoice credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "SmartInvoice merchant account UID."
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "SmartInvoice application UID.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "applicationId"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/SmartInvoice3dsServers"
                }
              }
            }
          ]
        },
        "SparkPay": {
          "description": "SparkPay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "SparkPay credentials object.",
                  "properties": {
                    "shopId": {
                      "type": "string",
                      "description": "SparkPay shop ID."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "SparkPay secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "shopId",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "StaticGateway": {
          "description": "StaticGateway Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object"
            }
          ]
        },
        "Stripe3dsServers": {
          "description": "Stripe 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Stripe3dsServer": "#/components/schemas/Stripe3dsServer"
            }
          },
          "type": "object",
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Stripe3dsServer"
              ]
            }
          }
        },
        "Stripe3dsServer": {
          "description": "Stripe Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Stripe3dsServers"
            },
            {
              "type": "object",
              "properties": {
                "enforceThreeDSecure": {
                  "type": "boolean",
                  "description": "If true, Stripe will attempt to perform 3D Secure\nand overrides any [dynamic 3D Secure Radar rules](https://stripe.com/docs/radar/rules#request-3ds).\n"
                }
              }
            }
          ]
        },
        "Stripe": {
          "description": "Stripe Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "settings"
              ],
              "properties": {
                "settings": {
                  "type": "object",
                  "description": "Stripe settings object.",
                  "required": [
                    "redirectUrl"
                  ],
                  "properties": {
                    "redirectUrl": {
                      "type": "string",
                      "description": "The URL where the user will be redirected after authorizing the account on Stripe.",
                      "format": "url"
                    },
                    "usePaymentIntents": {
                      "type": "boolean",
                      "description": "If `true` the `PaymentIntents` API will be used instead of `Charges` API.",
                      "default": false
                    },
                    "enforceOffSession": {
                      "type": "boolean",
                      "description": "If `true`, `off_session` param will always be `true` in Stripe requests.",
                      "default": false
                    }
                  }
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Stripe3dsServers"
                }
              }
            }
          ]
        },
        "TestProcessor": {
          "description": "TestProcessor Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "properties": {
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/TestProcessor3dsServers"
                }
              }
            }
          ]
        },
        "ToditoCash": {
          "description": "ToditoCash config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "ToditoCash credentials object.",
                  "properties": {
                    "apiKey": {
                      "type": "string",
                      "description": "ToditoCash API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "TrustPay": {
          "description": "TrustPay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "TrustPay credentials object.",
                  "properties": {
                    "entityId": {
                      "type": "string"
                    },
                    "accessToken": {
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "required": [
                    "entityId",
                    "accessToken"
                  ]
                }
              }
            }
          ]
        },
        "TrustsPay": {
          "description": "TrustsPay config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "TrustsPay credentials object.",
                  "required": [
                    "merchantNo",
                    "gatewayNo",
                    "signkey"
                  ],
                  "properties": {
                    "merchantNo": {
                      "type": "string"
                    },
                    "gatewayNo": {
                      "type": "string"
                    },
                    "signkey": {
                      "type": "string",
                      "format": "password"
                    }
                  }
                }
              }
            }
          ]
        },
        "Trustly": {
          "description": "Trustly config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Trustly credentials object.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Trustly username."
                    },
                    "password": {
                      "type": "string",
                      "description": "Trustly password.",
                      "format": "password"
                    },
                    "publicKey": {
                      "type": "string",
                      "description": "Trustly public key.",
                      "x-multiline": true
                    },
                    "privateKey": {
                      "type": "string",
                      "description": "Trustly private key.",
                      "format": "password",
                      "x-multiline": true
                    }
                  },
                  "required": [
                    "usernmae",
                    "password",
                    "publicKey",
                    "privateKey"
                  ]
                }
              }
            }
          ]
        },
        "TWINT": {
          "description": "TWINT config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "TWINT credentials object.",
                  "properties": {
                    "storeUuid": {
                      "type": "string",
                      "description": "TWINT store UUID."
                    },
                    "cashRegisterId": {
                      "type": "string",
                      "description": "Cash register ID."
                    },
                    "publicKey": {
                      "type": "string",
                      "description": "TWINT public key.",
                      "x-multiline": true
                    },
                    "privateKey": {
                      "type": "string",
                      "description": "TWINT private key.",
                      "format": "password",
                      "x-multiline": true
                    },
                    "keyPassphrase": {
                      "type": "string",
                      "description": "TWINT key's passphrase.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "storeUuid",
                    "cashRegisterId",
                    "publicKey",
                    "privateKey",
                    "keyPassphrase"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "TWINT settings object.",
                  "properties": {
                    "cashRegisterType": {
                      "type": "string",
                      "description": "TWINT cash register type."
                    }
                  },
                  "required": [
                    "cashRegisterType"
                  ]
                }
              }
            }
          ]
        },
        "UPayCard": {
          "description": "UPayCard Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "receiver_account": {
                      "type": "string",
                      "description": "merchant receiver account."
                    },
                    "key": {
                      "type": "string",
                      "description": "merchant key.",
                      "format": "password"
                    },
                    "secret": {
                      "type": "string",
                      "description": "merchant secret.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "receiver_account",
                    "key",
                    "secret"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "UpayCard settings object.",
                  "required": [
                    "tolerancePercentage"
                  ],
                  "properties": {
                    "tolerancePercentage": {
                      "$ref": "#/components/schemas/AmountAdjustmentTolerance"
                    }
                  }
                }
              }
            }
          ]
        },
        "USAePay": {
          "description": "USAePay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "sourceKey": {
                      "type": "string",
                      "description": "USAePay Gateway source key.",
                      "format": "password"
                    },
                    "pin": {
                      "type": "string",
                      "description": "USAePay Gateway pin.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "sourceKey",
                    "pin"
                  ]
                }
              }
            }
          ]
        },
        "VantivLitle": {
          "description": "VantivLitle Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "VantivLitle Gateway username."
                    },
                    "password": {
                      "type": "string",
                      "description": "VantivLitle Gateway password.",
                      "format": "password"
                    },
                    "merchantId": {
                      "type": "string",
                      "description": "VantivLitle Gateway merchant ID."
                    }
                  },
                  "required": [
                    "username",
                    "password",
                    "merchantId"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/VantivLitle3dsServers"
                }
              }
            }
          ]
        },
        "VCreditos": {
          "description": "VCreditos config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "VCreditos credentials object.",
                  "properties": {
                    "publicKey": {
                      "type": "string",
                      "description": "VCreditos API public key."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "VCreditos API secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "publicKey",
                    "secretKey"
                  ]
                }
              }
            }
          ]
        },
        "Wallet88": {
          "description": "Wallet88 config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Wallet88 credentials object.",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Wallet88 API user."
                    },
                    "password": {
                      "type": "string",
                      "description": "Wallet88 API password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "Walpay": {
          "description": "Walpay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantName": {
                      "type": "string",
                      "description": "Walpay Gateway merchant name."
                    },
                    "merchantPin": {
                      "type": "string",
                      "description": "Walpay Gateway merchant pin.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantName",
                    "merchantPin"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Walpay3dsServers"
                }
              }
            }
          ]
        },
        "Wirecard3dsServers": {
          "description": "Wirecard 3DS Servers.",
          "discriminator": {
            "propertyName": "name",
            "mapping": {
              "Wirecard3dsServer": "#/components/schemas/Wirecard3dsServer"
            }
          },
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureServerName"
                }
              ],
              "enum": [
                "Wirecard3dsServer"
              ]
            }
          }
        },
        "Wirecard3dsServer": {
          "description": "Wirecard Integrated.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Wirecard3dsServers"
            }
          ]
        },
        "Wirecard": {
          "description": "Wirecard Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantUsername": {
                      "type": "string",
                      "description": "Wirecard Gateway merchant username."
                    },
                    "merchantPassword": {
                      "type": "string",
                      "description": "Wirecard Gateway merchant password.",
                      "format": "password"
                    },
                    "businessSignature": {
                      "type": "string",
                      "description": "Wirecard Gateway merchant business case signature.",
                      "format": "password"
                    },
                    "delay": {
                      "type": "integer",
                      "description": "Wirecard Gateway delay."
                    },
                    "sftpUsername": {
                      "type": "string",
                      "description": "Wirecard sftp username."
                    },
                    "sftpPrivateKey": {
                      "type": "string",
                      "description": "Wirecard sftp private key.",
                      "format": "password",
                      "x-multiline": true
                    }
                  },
                  "required": [
                    "merchantUsername",
                    "merchantPassword",
                    "businessSignature",
                    "delay"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Wirecard3dsServers"
                }
              }
            }
          ]
        },
        "WorldlineAtosFrankfurt": {
          "description": "WorldlineAtosFrankfurt Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials",
                "settings"
              ],
              "properties": {
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/WorldlineAtosFrankfurt3dsServers"
                },
                "credentials": {
                  "type": "object",
                  "description": "WorldlineAtosFrankfurt credentials.",
                  "properties": {
                    "cardAcceptorIdCode": {
                      "type": "string",
                      "description": "Card Acceptor ID Code."
                    },
                    "acquiringInstitutionIdentificationCode": {
                      "type": "string",
                      "description": "Acquiring Institution Identification Code."
                    }
                  },
                  "required": [
                    "cardAcceptorIdCode",
                    "acquiringInstitutionIdentificationCode"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "WorldlineAtosFrankfurt settings.",
                  "properties": {
                    "cardAcceptorName": {
                      "type": "string",
                      "description": "Card Acceptor Name."
                    },
                    "cardAcceptorLocation": {
                      "type": "string",
                      "description": "Card Acceptor Location."
                    },
                    "cardAcceptorCountryCode": {
                      "type": "string",
                      "description": "Card Acceptor Country Code."
                    }
                  },
                  "required": [
                    "cardAcceptorName",
                    "cardAcceptorLocation",
                    "cardAcceptorCountryCode"
                  ]
                }
              }
            }
          ]
        },
        "Worldpay": {
          "description": "Worldpay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "merchantCode": {
                      "type": "string",
                      "description": "Worldpay Gateway merchant code.",
                      "format": "password"
                    },
                    "merchantPassword": {
                      "type": "string",
                      "description": "Worldpay Gateway merchant password.",
                      "format": "password"
                    },
                    "payoutMerchantCode": {
                      "type": "string",
                      "description": "Optional alternate merchant code for payouts.",
                      "format": "password"
                    },
                    "payoutMerchantPassword": {
                      "type": "string",
                      "description": "Optional alternate merchant password for payouts.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantCode",
                    "merchantPassword"
                  ]
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/Worldpay3dsServers"
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "delay": {
                      "type": "integer",
                      "description": "Auto Capture delay (in hours).",
                      "minimum": 0,
                      "default": 0
                    },
                    "enableStoredCredentials": {
                      "type": "boolean",
                      "description": "True to enable Stored Credentials.",
                      "default": false
                    },
                    "merchantInitiatedReason": {
                      "type": "string",
                      "description": "The value of merchantInitiatedReason to send with merchant-initiated transactions.",
                      "enum": [
                        "UNSCHEDULED",
                        "RECURRING",
                        "INSTALMENT",
                        "REAUTH",
                        "DELAYED",
                        "INCREMENTAL",
                        "RESUBMISSION",
                        "NOSHOW"
                      ],
                      "default": "UNSCHEDULED"
                    }
                  }
                }
              }
            }
          ]
        },
        "Zotapay": {
          "description": "Zotapay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "endpointId": {
                      "type": "string",
                      "description": "Zotapay's endpoint ID."
                    },
                    "merchantId": {
                      "type": "string",
                      "description": "Zotapay's merchant ID."
                    },
                    "merchantSecretKey": {
                      "type": "string",
                      "description": "Zotapay's merchant secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "endpointId",
                    "merchantId",
                    "merchantSecretKey"
                  ]
                }
              }
            }
          ]
        },
        "eMerchantPay": {
          "description": "eMerchantPay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "eMerchantPay Gateway client ID."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "eMerchantPay Gateway api key.",
                      "format": "password"
                    },
                    "username": {
                      "type": "string",
                      "description": "eMerchantPay username for Genesis platform."
                    },
                    "token": {
                      "type": "string",
                      "description": "eMerchantPay token for Genesis platform."
                    },
                    "password": {
                      "type": "string",
                      "description": "eMerchantPay password for Genesis platform.",
                      "format": "password"
                    }
                  }
                },
                "settings": {
                  "type": "object",
                  "description": "eMerchantPay settings object.",
                  "properties": {
                    "platform": {
                      "type": "string",
                      "description": "eMerchantPay platform to process payment.",
                      "enum": [
                        "IPG",
                        "Genesis"
                      ],
                      "default": "IPG"
                    }
                  }
                },
                "threeDSecureServer": {
                  "$ref": "#/components/schemas/eMerchantPay3dsServers"
                }
              }
            }
          ]
        },
        "ecoPayz": {
          "description": "ecoPayz config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "ecoPayz credentials object.",
                  "properties": {
                    "paymentPageId": {
                      "type": "string",
                      "description": "ecoPayz payment page ID."
                    },
                    "merchantAccountNumber": {
                      "type": "string",
                      "description": "ecoPayz merchant account number."
                    },
                    "merchantPassword": {
                      "type": "string",
                      "description": "ecoPayz merchant password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "paymentPageId",
                    "merchantAccountNumber",
                    "merchantPassword"
                  ]
                },
                "settings": {
                  "type": "object",
                  "description": "ecoPayz settings object.",
                  "properties": {
                    "validCurrency": {
                      "type": "string",
                      "description": "Three letter currency code.",
                      "enum": [
                        "CAD",
                        "EUR",
                        "GBP",
                        "USD"
                      ]
                    }
                  },
                  "required": [
                    "validCurrency"
                  ]
                }
              }
            }
          ]
        },
        "iCanPay": {
          "description": "iCanPay Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "authenticateId": {
                      "type": "string",
                      "description": "iCanPay Gateway authenticate ID."
                    },
                    "authenticatePw": {
                      "type": "string",
                      "description": "iCanPay Gateway authenticate password.",
                      "format": "password"
                    },
                    "publicKey": {
                      "type": "string",
                      "description": "iCanPay Gateway API public key."
                    },
                    "secretKey": {
                      "type": "string",
                      "description": "iCanPay Gateway API secret key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "authenticateId",
                    "authenticatePw",
                    "publicKey",
                    "secretKey"
                  ]
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "use3DSEndpoint": {
                      "type": "boolean",
                      "description": "Use 3DS endpoint."
                    }
                  }
                }
              }
            }
          ]
        },
        "iCheque": {
          "description": "iCheque Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string",
                      "description": "iCheque Gateway client ID."
                    },
                    "secretWord": {
                      "type": "string",
                      "description": "iCheque Gateway secret word.",
                      "format": "password"
                    },
                    "apiUserId": {
                      "type": "string",
                      "description": "Username for the Alliance API (transaction reporting)."
                    },
                    "apiSecurityToken": {
                      "type": "string",
                      "description": "Hash of the password for the Alliance API (transaction reporting).",
                      "format": "password"
                    }
                  },
                  "required": [
                    "clientId",
                    "secretWord"
                  ]
                }
              }
            }
          ]
        },
        "iDebit": {
          "description": "iDebit config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "iDebit credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "iDebit merchant account number."
                    },
                    "password": {
                      "type": "string",
                      "description": "iDebit merchant account password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "vegaaH": {
          "description": "vegaaH Gateway config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "properties": {
                    "terminalId": {
                      "type": "string",
                      "description": "vegaaH Gateway terminal ID."
                    },
                    "password": {
                      "type": "string",
                      "description": "vegaaH Gateway password.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "terminalId",
                    "password"
                  ]
                }
              }
            }
          ]
        },
        "Zimpler": {
          "description": "Zimpler config.",
          "allOf": [
            {
              "$ref": "#/components/schemas/GatewayAccount"
            },
            {
              "type": "object",
              "required": [
                "credentials"
              ],
              "properties": {
                "credentials": {
                  "type": "object",
                  "description": "Zimpler credentials object.",
                  "properties": {
                    "merchantId": {
                      "type": "string",
                      "description": "Zimpler merchant id."
                    },
                    "apiKey": {
                      "type": "string",
                      "description": "Zimpler API key.",
                      "format": "password"
                    }
                  },
                  "required": [
                    "merchantId",
                    "apiKey"
                  ]
                }
              }
            }
          ]
        },
        "PaymentCardBrand": {
          "description": "Payment Card brand.",
          "type": "string",
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay",
            "AstroPay Card"
          ]
        },
        "DigitalWallets": {
          "type": "object",
          "description": "Configure which digital wallets are enabled.",
          "title": "Digital Wallets",
          "properties": {
            "applePay": {
              "type": "object",
              "description": "The Apple Pay digital wallet configuration. Skip if not using Apple Pay.",
              "required": [
                "isEnabled"
              ],
              "properties": {
                "isEnabled": {
                  "type": "boolean",
                  "description": "Set true if Apple Pay is enabled.",
                  "default": false
                }
              }
            },
            "googlePay": {
              "type": "object",
              "description": "The Google Pay™ digital wallet configuration. Skip if not using Google Pay™.",
              "required": [
                "isEnabled"
              ],
              "properties": {
                "isEnabled": {
                  "type": "boolean",
                  "description": "Set true if Google Pay is enabled.",
                  "default": false
                },
                "merchantName": {
                  "description": "The merchant name in Google Pay. Leave blank if using FramePay.",
                  "type": "string",
                  "example": "Test Merchant"
                },
                "merchantOrigin": {
                  "description": "The merchant origin in Google Pay. The fully qualified domain name. Leave blank if using FramePay.",
                  "type": "string",
                  "example": "www.example.com"
                }
              }
            }
          }
        },
        "OnBoardingUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "onBoardingUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "DynamicIpnLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "dynamicIpnUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "StaticIpnLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "staticIpnUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "GatewayAccountEmbed": {
          "type": "object",
          "description": "Gateway Account object.",
          "readOnly": true,
          "properties": {
            "gatewayAccount": {
              "$ref": "#/components/schemas/GatewayAccount"
            }
          }
        },
        "WebsiteEmbed": {
          "type": "object",
          "description": "Website object.",
          "readOnly": true,
          "properties": {
            "website": {
              "type": "object"
            }
          }
        },
        "CommonPaymentCard": {
          "type": "object",
          "title": "Payment Card",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "payment-card"
              ]
            },
            "customerId": {
              "description": "The сustomer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "status": {
              "type": "string",
              "description": "Payment instrument status. When an instrument is `active` it means it has been used at least once for an approved transaction.\nTo remove an instrument from being in use, set it as `deactivated` (see the deactivation endpoint).\n",
              "enum": [
                "active",
                "inactive",
                "expired",
                "deactivated",
                "verification-needed"
              ]
            },
            "fingerprint": {
              "description": "A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.",
              "type": "string",
              "readOnly": true
            },
            "bin": {
              "description": "The card's bin (the PAN's first 6 digits).",
              "type": "string",
              "format": "bin",
              "readOnly": true
            },
            "last4": {
              "description": "The PAN's last 4 digits.",
              "type": "string",
              "readOnly": true
            },
            "pan": {
              "description": "The card PAN (primary account number).",
              "type": "string",
              "writeOnly": true
            },
            "expYear": {
              "description": "Card's expiration year.",
              "type": "integer"
            },
            "expMonth": {
              "description": "Card's expiration month.",
              "type": "integer"
            },
            "cvv": {
              "description": "Card's cvv (card verification value).",
              "type": "string",
              "writeOnly": true
            },
            "brand": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentCardBrand"
                }
              ]
            },
            "bankCountry": {
              "description": "Payment instrument bank country.",
              "type": "string",
              "readOnly": true
            },
            "bankName": {
              "description": "Payment instrument bank name.",
              "type": "string",
              "readOnly": true
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "createdTime": {
              "description": "Payment instrument created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Payment instrument updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "AuthTransactionLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "authTransaction"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "AuthTransactionEmbed": {
          "type": "object",
          "description": "Auth Transaction object.",
          "readOnly": true,
          "properties": {
            "authTransaction": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        },
        "PaymentCard": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentCard"
            },
            {
              "properties": {
                "stickyGatewayAccountId": {
                  "description": "Default gateway account ID used for transactions.",
                  "type": "string",
                  "readOnly": true
                },
                "expirationReminderTime": {
                  "description": "Time expiration reminder event will be triggered.",
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServerTimestamp"
                    }
                  ]
                },
                "expirationReminderNumber": {
                  "description": "Number of expiration reminder events triggered.",
                  "type": "integer",
                  "readOnly": true
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      },
                      {
                        "$ref": "#/components/schemas/AuthTransactionLink"
                      },
                      {
                        "$ref": "#/components/schemas/ApprovalUrlLink"
                      }
                    ]
                  }
                },
                "_embedded": {
                  "type": "array",
                  "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/AuthTransactionEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerEmbed"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "PaymentCardEmbed": {
          "type": "object",
          "description": "Payment Card object.",
          "readOnly": true,
          "properties": {
            "paymentCard": {
              "$ref": "#/components/schemas/PaymentCard"
            }
          }
        },
        "BankAccountEmbed": {
          "type": "object",
          "description": "Bank Account object.",
          "readOnly": true,
          "properties": {
            "bankAccount": {
              "$ref": "#/components/schemas/BankAccount"
            }
          }
        },
        "ProductLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "product"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "CommonProduct": {
          "type": "object",
          "required": [
            "name"
          ],
          "description": "Products include digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation. If it is shippable,\nshipping will be calculated upon invoice generation. Pricing and\nvariations are set within Plans.\n",
          "properties": {
            "id": {
              "description": "The product ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ],
              "example": "membership"
            },
            "name": {
              "description": "The product name.",
              "type": "string",
              "maxLength": 255,
              "example": "Premium membership"
            },
            "unitLabel": {
              "description": "The unit label, such as per `seat` or per `unit`.",
              "type": "string",
              "maxLength": 50,
              "example": "seat",
              "default": "unit"
            },
            "description": {
              "description": "The product description.",
              "type": "string",
              "maxLength": 512
            },
            "requiresShipping": {
              "description": "If the product requires shipping, shipping calculations will be applied.",
              "type": "boolean",
              "example": false
            },
            "options": {
              "description": "The product options such as color, size, etc. The product options definition does\nnot include option values. Those are defined within the plans.\n",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "createdTime": {
              "description": "The product created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The product updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "Product": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonProduct"
            },
            {
              "properties": {
                "taxCategoryId": {
                  "description": "The product's tax category identifier string.",
                  "type": "string",
                  "enum": [
                    "00000",
                    "99999",
                    "20010",
                    "40030",
                    "51020",
                    "51010",
                    "31000",
                    "30070"
                  ]
                },
                "accountingCode": {
                  "description": "The product accounting code.",
                  "type": "string",
                  "example": "4010"
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/SelfLink"
                  }
                }
              }
            }
          ]
        },
        "ProductEmbed": {
          "type": "object",
          "description": "Product object.",
          "readOnly": true,
          "properties": {
            "product": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "PlanPriceFormula": {
          "type": "object",
          "discriminator": {
            "propertyName": "formula",
            "mapping": {
              "fixed-fee": "#/components/schemas/fixed-fee",
              "flat-rate": "#/components/schemas/flat-rate",
              "stairstep": "#/components/schemas/stairstep",
              "tiered": "#/components/schemas/tiered",
              "volume": "#/components/schemas/volume"
            }
          },
          "required": [
            "formula"
          ],
          "properties": {
            "formula": {
              "type": "string",
              "description": "The price formula determines what algorithm is used to calculate the invoice price based on a few factors,\n- the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order)\n- the price brackets data\n\nTo determine which formula is correct, please see the price formula documentation.\n",
              "enum": [
                "fixed-fee",
                "flat-rate",
                "stairstep",
                "tiered",
                "volume"
              ]
            }
          }
        },
        "fixed-fee": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "description": "For the very simple price when it's fixed and does not depend on the quantity chosen by customer.\n\nIf the price is 0, it's free.\n",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                }
              }
            }
          ]
        },
        "flat-rate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "description": "Flat-rate pricing is represented in a simple price per unit.\nSome examples:\n\n- $30 per unit\n- $0.10 per transaction\n- $50 per period\n\nIf the price is 0, it's free.\n",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                },
                "maxQuantity": {
                  "description": "If the value is `null`, it''s assumed to be infinite.",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          ]
        },
        "stairstep": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "brackets"
              ],
              "properties": {
                "brackets": {
                  "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"stairstep\" example:\n\nPrice total | Max quantity | Description\n------------|--------------|------------\n$5          | 1            | 1\n$13         | 5            | 2 to 5\n$30         | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.\n",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "description": "If the price is 0, it is free.",
                        "type": "number",
                        "format": "double",
                        "example": 99.95
                      },
                      "maxQuantity": {
                        "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "tiered": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "brackets"
              ],
              "properties": {
                "brackets": {
                  "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"tiered\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.\n",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "description": "If the price is 0, it is free.",
                        "type": "number",
                        "format": "double",
                        "example": 99.95
                      },
                      "maxQuantity": {
                        "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "volume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "brackets"
              ],
              "properties": {
                "brackets": {
                  "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"volume\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.\n",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "description": "If the price is 0, it is free.",
                        "type": "number",
                        "format": "double",
                        "example": 99.95
                      },
                      "maxQuantity": {
                        "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "PlanPeriod": {
          "type": "object",
          "required": [
            "unit",
            "length"
          ],
          "properties": {
            "unit": {
              "description": "The unit of time.",
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "year"
              ]
            },
            "length": {
              "description": "The length of time.",
              "type": "integer"
            }
          }
        },
        "PlanBillingTiming": {
          "type": "string",
          "default": "prepaid",
          "description": "The billing timing in relation to the service period.\nFor `prepaid` plans the customer pays when the service period starts,\nwhereas, for `postpaid` plans, the customer pays when the service period ends.\n",
          "enum": [
            "prepaid",
            "postpaid"
          ]
        },
        "CommonPlan": {
          "type": "object",
          "required": [
            "name",
            "currency",
            "productId",
            "pricing"
          ],
          "properties": {
            "id": {
              "description": "The plan ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "The plan name, displayed on invoices and receipts.",
              "type": "string"
            },
            "productId": {
              "description": "The related product ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "productOptions": {
              "type": "object",
              "description": "Name-value pairs to specify the product options.",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "color": "red",
                "size": "xxl"
              }
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "currencySign": {
              "description": "Currency sign.",
              "readOnly": true,
              "type": "string"
            },
            "pricing": {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            "recurringInterval": {
              "description": "The service interval. For a one-time item, use `null`.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlanPeriod"
                },
                {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "description": "The number of invoices this subscription order will generate\n(if 1, it will not generate any beyond the initial order creation).\nFor example, set this property to `12`, when the `periodUnit` is month and the\n`periodDuration` is 1, for a 1 year contract billed monthly.\n",
                      "type": "integer"
                    },
                    "billingTiming": {
                      "$ref": "#/components/schemas/PlanBillingTiming"
                    }
                  }
                }
              ]
            },
            "trial": {
              "type": "object",
              "description": "The trial. Set `null` if no trial.",
              "required": [
                "price",
                "period"
              ],
              "properties": {
                "price": {
                  "description": "The price of the trial. For a free trial, use `0`.",
                  "type": "number",
                  "format": "double"
                },
                "period": {
                  "$ref": "#/components/schemas/PlanPeriod"
                }
              }
            },
            "isTrialOnly": {
              "type": "boolean",
              "description": "Whether a plan has a trial without recurring instructions.",
              "readOnly": true
            },
            "setup": {
              "type": "object",
              "description": "The setup. Set `null` if no setup.",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "description": "The price of a setup - 0 is a valid value (for free).",
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "revision": {
              "type": "integer",
              "readOnly": true,
              "description": "Increments when the plan is modified. \nCompare to materialized subscription items revision.\n"
            },
            "createdTime": {
              "description": "Plan created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Plan updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "IssueTimeShiftInstruction": {
          "type": "object",
          "description": "The calculation instruction of billing time.\nThis is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.\n",
          "required": [
            "chronology",
            "duration",
            "unit"
          ],
          "properties": {
            "chronology": {
              "type": "string",
              "description": "The chronology of the billing time relatively to the service period start.",
              "enum": [
                "before"
              ]
            },
            "duration": {
              "type": "integer",
              "description": "The number of the units.",
              "minimum": 1
            },
            "unit": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimeUnit"
                },
                {
                  "$ref": "#/components/schemas/TimePluralUnit"
                }
              ]
            }
          }
        },
        "DueTimeShiftInstruction": {
          "type": "object",
          "description": "The calculation instruction of due time.\nThis is used in conjunction with the **billing anchor** to calculate due time of invoice.\nThe chronology of due time shift is always **after**.\n",
          "default": {
            "duration": 1,
            "unit": "hour"
          },
          "properties": {
            "duration": {
              "type": "integer",
              "description": "The number of the units.",
              "minimum": 1
            },
            "unit": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimeUnit"
                },
                {
                  "$ref": "#/components/schemas/TimePluralUnit"
                }
              ]
            }
          },
          "required": [
            "duration",
            "unit"
          ]
        },
        "InvoiceTimeShift": {
          "type": "object",
          "description": "The invoice time shift in conjunction with `billingTiming` allows to setup different billing use cases such as:\n- Bill immediately when the service period _starts_\n- Bill immediately after the service period _ends_\n- Bill _interval of time_ before the service period _starts_\n- Bill _interval of time_ after the service period _starts_\n- Bill _interval of time_ before the service period _ends_\n- Bill _interval of time_ after the service period _ends_\nIt allows to control the billing time.\n",
          "properties": {
            "issueTimeShift": {
              "$ref": "#/components/schemas/IssueTimeShiftInstruction"
            },
            "dueTimeShift": {
              "$ref": "#/components/schemas/DueTimeShiftInstruction"
            }
          }
        },
        "Plan": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPlan"
            },
            {
              "properties": {
                "invoiceTimeShift": {
                  "description": "You can shift issue time and due time of invoices for this plan.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceTimeShift"
                    }
                  ]
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/SelfLink"
                  }
                }
              }
            }
          ]
        },
        "PlanEmbed": {
          "type": "object",
          "description": "Plan object.",
          "readOnly": true,
          "properties": {
            "plan": {
              "$ref": "#/components/schemas/Plan"
            }
          }
        },
        "InvoiceItem": {
          "type": "object",
          "required": [
            "type",
            "unitPrice"
          ],
          "properties": {
            "id": {
              "description": "The website identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Invoice item's type.",
              "type": "string",
              "enum": [
                "debit",
                "credit"
              ]
            },
            "description": {
              "description": "Invoice item's description.",
              "type": "string"
            },
            "unitPrice": {
              "description": "Invoice item's price.",
              "type": "number",
              "format": "double"
            },
            "quantity": {
              "description": "Invoice item's quantity.",
              "type": "integer"
            },
            "price": {
              "description": "Invoice item's total price.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "productId": {
              "description": "The product's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "discountAmount": {
              "description": "Invoice item discount amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "periodStartTime": {
              "description": "Start time.",
              "type": "string",
              "format": "date-time"
            },
            "periodEndTime": {
              "description": "End time.",
              "type": "string",
              "format": "date-time"
            },
            "periodNumber": {
              "description": "Invoice item subscription order period number.",
              "type": "integer"
            },
            "createdTime": {
              "description": "Invoice item created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Invoice item updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/ProductLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProductEmbed"
                  },
                  {
                    "$ref": "#/components/schemas/PlanEmbed"
                  }
                ]
              }
            }
          }
        },
        "InvoiceTax": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "amount": {
              "description": "Tax amount.",
              "type": "number",
              "format": "double"
            },
            "description": {
              "type": "string",
              "description": "Tax description."
            }
          }
        },
        "InvoiceDiscount": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "couponId": {
              "description": "Coupon's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "redemptionId": {
              "description": "Redemption ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "amount": {
              "description": "Total amount that was discounted by this Coupon.",
              "type": "number",
              "format": "double"
            },
            "description": {
              "type": "string",
              "description": "Discount description."
            }
          }
        },
        "CommonInvoice": {
          "type": "object",
          "required": [
            "currency",
            "websiteId"
          ],
          "properties": {
            "id": {
              "description": "The invoice ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "The website ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "invoiceNumber": {
              "description": "An auto-incrementing number based on the sequence of invoices for any particular customer.",
              "readOnly": true,
              "type": "integer"
            },
            "subscriptionId": {
              "description": "The related order's ID if available, otherwise null.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "amount": {
              "description": "The invoice's amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "amountDue": {
              "description": "The invoice's due amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "subtotalAmount": {
              "description": "The invoice's subtotal amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "discountAmount": {
              "description": "The invoice's discounts amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "taxAmount": {
              "description": "The invoice's taxes amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "shippingAmount": {
              "description": "The invoice's shipping amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "billingAddress": {
              "description": "Invoice's billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "deliveryAddress": {
              "description": "Invoice's delivery address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "poNumber": {
              "description": "Purchase order number which will be displayed on the invoice.",
              "nullable": true,
              "example": "PO123456",
              "type": "string"
            },
            "notes": {
              "description": "Notes for the customer which will be displayed on the invoice.",
              "type": "string"
            },
            "items": {
              "type": "array",
              "description": "Invoice items array.",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/InvoiceItem"
              }
            },
            "taxes": {
              "type": "array",
              "description": "Taxes applied to this invoice.",
              "readOnly": true,
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceTax"
                  }
                ]
              }
            },
            "discounts": {
              "type": "array",
              "description": "Discounts applied.",
              "readOnly": true,
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceDiscount"
                  }
                ]
              }
            },
            "autopayScheduledTime": {
              "description": "Invoice autopay scheduled time.",
              "type": "string",
              "format": "date-time"
            },
            "autopayRetryNumber": {
              "description": "Invoice autopay retry number.",
              "readOnly": true,
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "status": {
              "type": "string",
              "description": "Invoice status.",
              "readOnly": true,
              "enum": [
                "draft",
                "unpaid",
                "paid",
                "past-due",
                "delinquent",
                "abandoned",
                "voided",
                "partially-refunded",
                "refunded",
                "disputed"
              ]
            },
            "delinquentCollectionPeriod": {
              "type": "integer",
              "description": "Delinquent collection period - difference between paidTime and dueTime in days.",
              "readOnly": true
            },
            "collectionPeriod": {
              "type": "integer",
              "description": "Collection period - difference between paidTime and issuedTime in days.",
              "readOnly": true
            },
            "paymentFormUrl": {
              "type": "string",
              "readOnly": true,
              "description": "URL where the customer can be redirected to pay for the invoice\nwith one of the methods which are available for this customer.\nIt's an alternative to creating a new transaction with empty `methods`.\n"
            },
            "abandonedTime": {
              "description": "Invoice abandoned time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "voidedTime": {
              "description": "Invoice voided time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "paidTime": {
              "description": "Invoice paid time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "dueTime": {
              "description": "Invoice due time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "issuedTime": {
              "description": "Invoice issued time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "createdTime": {
              "description": "Invoice created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Invoice updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "OrganizationLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "organization"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "TransactionAllocationsLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "transactionAllocations"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "RecalculateInvoiceLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "recalculateInvoice"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "SubscriptionLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "subscription"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "OrganizationQuestionnaire": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "The role of the owner."
            },
            "monthlyTransactions": {
              "type": "string",
              "description": "The amount of monthly processed transaction."
            },
            "products": {
              "type": "array",
              "description": "The list of products organization is interested in.",
              "items": {
                "type": "string"
              }
            },
            "integrationType": {
              "type": "string",
              "description": "What kind of integration organization looks for."
            },
            "launchTiming": {
              "type": "string",
              "description": "Desired time to go live."
            }
          }
        },
        "Organization": {
          "type": "object",
          "required": [
            "name",
            "country"
          ],
          "properties": {
            "id": {
              "description": "The organization identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "createdTime": {
              "description": "The organization created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The organization updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "name": {
              "description": "The organization name.",
              "type": "string",
              "maxLength": 60
            },
            "address": {
              "description": "The organization street address.",
              "type": "string",
              "maxLength": 60
            },
            "address2": {
              "description": "The organization street address.",
              "type": "string",
              "maxLength": 60
            },
            "city": {
              "description": "The organization city.",
              "type": "string",
              "maxLength": 45
            },
            "region": {
              "description": "The organization region (state).",
              "type": "string",
              "maxLength": 45
            },
            "country": {
              "description": "The organization country ISO Alpha-2 code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$"
            },
            "postalCode": {
              "description": "The organization postal code.",
              "type": "string",
              "maxLength": 10
            },
            "phoneNumbers": {
              "$ref": "#/components/schemas/ContactPhoneNumbers"
            },
            "emails": {
              "$ref": "#/components/schemas/ContactEmails"
            },
            "taxDescriptor": {
              "description": "The organization's tax label. This will be displayed on the invoice.",
              "type": "string",
              "maxLength": 255
            },
            "invoiceTimeZone": {
              "description": "Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\".",
              "type": "string",
              "maxLength": 50
            },
            "isPrimary": {
              "description": "True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false).",
              "type": "boolean"
            },
            "questionnaire": {
              "$ref": "#/components/schemas/OrganizationQuestionnaire"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "OrganizationEmbed": {
          "type": "object",
          "description": "Organization object.",
          "readOnly": true,
          "properties": {
            "organization": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        },
        "Invoice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonInvoice"
            },
            {
              "required": [
                "customerId"
              ]
            },
            {
              "properties": {
                "customerId": {
                  "description": "The сustomer's ID.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                },
                "transactions": {
                  "type": "array",
                  "description": "Invoice transactions array.",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                },
                "retryInstruction": {
                  "description": "The invoice retry instruction.",
                  "type": "object",
                  "properties": {
                    "attempts": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "scheduleInstruction": {
                            "$ref": "#/components/schemas/InvoiceRetryScheduleInstruction"
                          }
                        },
                        "required": [
                          "scheduleInstruction"
                        ]
                      }
                    },
                    "afterAttemptPolicies": {
                      "description": "The policy on the attempt finishes.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "change-subscription-renewal-time"
                        ]
                      }
                    },
                    "afterRetryEndPolicies": {
                      "description": "The policy on the retry ends.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "abandon-invoice",
                          "cancel-subscription"
                        ]
                      }
                    }
                  },
                  "required": [
                    "attempts",
                    "afterAttemptPolicies",
                    "afterRetryEndPolicies"
                  ]
                },
                "revision": {
                  "description": "The number of times the invoice data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
                  "type": "integer",
                  "readOnly": true
                },
                "dueReminderTime": {
                  "description": "Time past due reminder event will be triggered.",
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServerTimestamp"
                    }
                  ]
                },
                "dueReminderNumber": {
                  "description": "Number of past due reminder events triggered.",
                  "type": "integer",
                  "readOnly": true
                },
                "paymentFormUrl": {
                  "description": "The URL customer should follow to pay the invoice. You can replace this URL with your own. To reset it to\nRebilly one – set `null`.\n\nThis URL will be available only if `status` is `unpaid` or `past-due`.\n",
                  "type": "string",
                  "format": "url",
                  "nullable": true
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      },
                      {
                        "$ref": "#/components/schemas/WebsiteLink"
                      },
                      {
                        "$ref": "#/components/schemas/OrganizationLink"
                      },
                      {
                        "$ref": "#/components/schemas/LeadSourceLink"
                      },
                      {
                        "$ref": "#/components/schemas/TransactionAllocationsLink"
                      },
                      {
                        "$ref": "#/components/schemas/RecalculateInvoiceLink"
                      },
                      {
                        "$ref": "#/components/schemas/SubscriptionLink"
                      }
                    ]
                  }
                },
                "_embedded": {
                  "type": "array",
                  "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/CustomerEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/WebsiteEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/OrganizationEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/LeadSourceEmbed"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "InvoicesEmbed": {
          "type": "object",
          "description": "Invoices collection.",
          "readOnly": true,
          "properties": {
            "invoices": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          }
        },
        "TransactionEmbed": {
          "type": "object",
          "description": "Transaction object.",
          "readOnly": true,
          "properties": {
            "transaction": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        },
        "Dispute": {
          "type": "object",
          "required": [
            "currency",
            "amount",
            "transactionId",
            "postedTime",
            "type",
            "status",
            "reasonCode"
          ],
          "properties": {
            "id": {
              "description": "The dispute identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "The dispute's customer ID.",
              "type": "string",
              "readOnly": true
            },
            "transactionId": {
              "description": "The dispute's transaction ID.",
              "type": "string"
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "amount": {
              "description": "The dispute amount.",
              "type": "number",
              "format": "double"
            },
            "acquirerReferenceNumber": {
              "description": "The dispute's acquirer reference number.",
              "type": "string"
            },
            "caseId": {
              "description": "The case ID for the dispute.",
              "type": "string"
            },
            "reasonCode": {
              "description": "The dispute's reason code.",
              "type": "string",
              "enum": [
                "1000",
                "10.1",
                "10.2",
                "10.3",
                "10.4",
                "10.5",
                "11.1",
                "11.2",
                "11.3",
                "12",
                "12.1",
                "12.2",
                "12.3",
                "12.4",
                "12.5",
                "12.6",
                "12.7",
                "13.1",
                "13.2",
                "13.3",
                "13.4",
                "13.5",
                "13.6",
                "13.7",
                "13.8",
                "13.9",
                "2",
                "30",
                "31",
                "35",
                "37",
                "40",
                "41",
                "42",
                "46",
                "47",
                "49",
                "50",
                "53",
                "54",
                "55",
                "57",
                "59",
                "60",
                "62",
                "7",
                "70",
                "71",
                "72",
                "73",
                "74",
                "75",
                "76",
                "77",
                "79",
                "8",
                "80",
                "81",
                "82",
                "83",
                "85",
                "86",
                "93",
                "00",
                "63",
                "A01",
                "A02",
                "A08",
                "F10",
                "F14",
                "F22",
                "F24",
                "F29",
                "C02",
                "C04",
                "C05",
                "C08",
                "C14",
                "C18",
                "C28",
                "C31",
                "C32",
                "M10",
                "M49",
                "P01",
                "P03",
                "P04",
                "P05",
                "P07",
                "P08",
                "P22",
                "P23",
                "R03",
                "R13",
                "M01",
                "FR1",
                "FR4",
                "FR6",
                "AL",
                "AP",
                "AW",
                "CA",
                "CD",
                "CR",
                "DA",
                "DP",
                "DP1",
                "EX",
                "IC",
                "IN",
                "IS",
                "LP",
                "N",
                "NA",
                "NC",
                "P",
                "RG",
                "RM",
                "RN1",
                "RN2",
                "SV",
                "TF",
                "TNM",
                "UA01",
                "UA02",
                "UA32",
                "UA99",
                "UA03",
                "UA10",
                "UA11",
                "UA12",
                "UA18",
                "UA20",
                "UA21",
                "UA22",
                "UA23",
                "UA28",
                "UA30",
                "UA31",
                "UA38",
                "duplicate",
                "fraudulent",
                "subscription_canceled",
                "product_unacceptable",
                "product_not_received",
                "unrecognized",
                "credit_not_processed",
                "customer_initiated",
                "incorrect_account_details",
                "insufficient_funds",
                "bank_cannot_process",
                "debit_not_authorized",
                "general",
                "pre-chargeback-alert",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "9",
                "51",
                "A",
                "B"
              ]
            },
            "category": {
              "description": "The dispute's category.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "fraud",
                "unrecognized",
                "product-not-received",
                "product-unacceptable",
                "product-not-refunded",
                "duplicate",
                "subscription-canceled",
                "uncategorized"
              ]
            },
            "type": {
              "description": "The dispute's type.",
              "type": "string",
              "enum": [
                "information-request",
                "first-chargeback",
                "second-chargeback",
                "arbitration",
                "fraud",
                "ethoca-alert",
                "verifi-alert"
              ]
            },
            "status": {
              "description": "The dispute's status.",
              "type": "string",
              "enum": [
                "response-needed",
                "under-review",
                "forfeited",
                "won",
                "lost",
                "unknown"
              ]
            },
            "postedTime": {
              "description": "Dispute posted time.",
              "type": "string",
              "format": "date-time"
            },
            "deadlineTime": {
              "description": "Dispute deadline time.",
              "type": "string",
              "format": "date-time"
            },
            "rawResponse": {
              "description": "Dispute raw response from gateway.",
              "type": "string",
              "readOnly": true
            },
            "resolvedTime": {
              "description": "Dispute resolved time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "createdTime": {
              "description": "Dispute created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Dispute updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/TransactionLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TransactionEmbed"
                  }
                ]
              }
            }
          }
        },
        "FileCreateFromInline": {
          "type": "object",
          "required": [
            "file"
          ],
          "properties": {
            "file": {
              "description": "The file in base64 encoded format.",
              "type": "string",
              "example": "R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs="
            },
            "isPublic": {
              "description": "The File visibility. If public a permalink is provided.",
              "type": "boolean",
              "example": false
            },
            "name": {
              "description": "The file name used for downloading.",
              "type": "string",
              "example": "logo.png"
            },
            "description": {
              "description": "The file description.",
              "type": "string",
              "example": "My file description"
            },
            "tags": {
              "description": "The tags list.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "test",
                "tags"
              ]
            }
          }
        },
        "FileCreateFromUrl": {
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "description": "The URL of the file to upload.",
              "type": "string",
              "example": "https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png"
            },
            "isPublic": {
              "description": "The File visibility. If public a permalink is provided.",
              "type": "boolean",
              "example": false
            },
            "name": {
              "description": "The file name used for downloading.",
              "type": "string",
              "example": "logo.png"
            },
            "description": {
              "description": "The file description.",
              "type": "string",
              "example": "My file description"
            },
            "tags": {
              "description": "The tags list.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "test",
                "tags"
              ]
            }
          }
        },
        "InvoiceIssue": {
          "type": "object",
          "properties": {
            "issuedTime": {
              "description": "Invoice issued time. Will be issued immediately if `null` or omitted.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "dueTime": {
              "description": "Invoice due time. Will be set same as `issuedTime` if `null` or omitted.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        },
        "InvoiceReissue": {
          "type": "object",
          "properties": {
            "dueTime": {
              "description": "Invoice due time. Will be set as current date-time if `null` or omitted.",
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        },
        "InvoiceLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "invoice"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "InvoiceTransactionAllocation": {
          "type": "object",
          "properties": {
            "invoiceId": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "transactionId": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "amount": {
              "type": "number"
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceLink"
                  },
                  {
                    "$ref": "#/components/schemas/TransactionLink"
                  }
                ]
              }
            }
          }
        },
        "InvoiceTransaction": {
          "type": "object",
          "required": [
            "transactionId"
          ],
          "properties": {
            "transactionId": {
              "description": "Transaction to be applied to the invoice.",
              "type": "string"
            },
            "amount": {
              "description": "Amount which needs to be applied to the invoice. Can't be more than the transaction's amount. If omitted, the lesser of the transaction's unused amount or the invoice's amount due will be used.\n",
              "type": "number",
              "format": "double"
            }
          }
        },
        "InvoiceTimeline": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The Timeline message identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Timeline message type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "timeline-comment-created",
                "invoice-created",
                "invoice-issued",
                "invoice-abandoned",
                "invoice-voided",
                "invoice-past-due",
                "invoice-paid",
                "invoice-partially-paid",
                "invoice-disputed",
                "invoice-refunded",
                "invoice-partially-refunded",
                "invoice-renewal-payment-declined",
                "email-message-sent",
                "coupon-applied",
                "transaction-approved",
                "transaction-abandoned",
                "transaction-canceled",
                "transaction-declined",
                "transaction-initiated",
                "transaction-refunded",
                "transaction-voided"
              ]
            },
            "triggeredBy": {
              "description": "Shows who or what triggered the Timeline event.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "rebilly",
                "app",
                "direct-api"
              ]
            },
            "message": {
              "description": "The message that describes the message details.",
              "type": "string"
            },
            "extraData": {
              "$ref": "#/components/schemas/TimelineExtraData"
            },
            "occurredTime": {
              "description": "Timeline message time.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "KycDocumentRejection": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "document-unreadable",
                "document-expired",
                "document-not-matching",
                "underage-person",
                "other"
              ]
            },
            "message": {
              "description": "The rejection message.",
              "type": "string",
              "example": "Provided document is unreadable"
            }
          }
        },
        "CommonKycDocument": {
          "type": "object",
          "required": [
            "customerId",
            "documentType",
            "status"
          ],
          "properties": {
            "id": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "The сustomer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "fileId": {
              "deprecated": true,
              "description": "Linked file object id.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "fileIds": {
              "description": "Linked file object id's.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            },
            "documentType": {
              "description": "Document type submitted for validation, only identity-proof type is analyzed in an automated manner.",
              "type": "string",
              "enum": [
                "identity-proof",
                "address-proof",
                "funds-proof",
                "purchase-proof"
              ]
            },
            "documentSubtype": {
              "description": "Document subtype submitted for validation.",
              "type": "string",
              "enum": [
                "passport",
                "id-card",
                "driver-license",
                "utility-bill",
                "rental-receipt",
                "lease-agreement",
                "copy-credit-card",
                "credit-card-statement",
                "bank-statement",
                "inheritance-documentation",
                "tax-return",
                "salary-slip",
                "sale-of-assets"
              ]
            },
            "matchLevel": {
              "description": "The level of strictness for the document matches.",
              "type": "integer",
              "minimum": 1,
              "maximum": 2,
              "example": 2
            },
            "status": {
              "description": "Status of the validation.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "pending",
                "in-progress",
                "accepted",
                "rejected"
              ]
            },
            "reason": {
              "description": "Reason for uploading.",
              "type": "string"
            },
            "rejectionReason": {
              "$ref": "#/components/schemas/KycDocumentRejection"
            },
            "createdTime": {
              "description": "Creation date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Latest update date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "processedTime": {
              "description": "Processing date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "reviewerId": {
              "description": "Reviewer's user ID.",
              "type": "string",
              "nullable": true,
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "reviewerName": {
              "description": "Reviewer's first and last name.",
              "type": "string",
              "nullable": true,
              "readOnly": true
            },
            "reviewTime": {
              "description": "Date and time of manual review.",
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "IdentityMatches": {
          "type": "object",
          "properties": {
            "containsImage": {
              "description": "Flag that indicates if there is an image that contains a face on it.",
              "type": "boolean",
              "example": true
            },
            "isIdentityDocument": {
              "description": "Flag that indicates if this looks like and ID.",
              "type": "boolean",
              "example": true
            },
            "isPublishedOnline": {
              "description": "If there is an exact match found online.",
              "type": "boolean",
              "example": false
            },
            "firstName": {
              "description": "The customer first name if it was matched, null otherwise.",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "description": "The customer last name if it was matched, null otherwise.",
              "type": "string",
              "example": "Doe"
            },
            "dateOfBirth": {
              "description": "The date of birth found on the document, null if not found.",
              "type": "string",
              "format": "date-time"
            },
            "expiryDate": {
              "description": "The expiry date found on the document, null if not found.",
              "type": "string",
              "format": "date-time"
            },
            "issueDate": {
              "description": "The issued date found on the document, null if not found.",
              "type": "string",
              "format": "date-time"
            },
            "hasMinimalAge": {
              "description": "Checks the minimal age, 21+ for USA and 18+ for all other countries. Null if dateOfBirth could not be determined.",
              "type": "boolean",
              "readOnly": true,
              "example": true
            }
          }
        },
        "ProofOfIdentity": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonKycDocument"
            },
            {
              "properties": {
                "documentMatches": {
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "score": {
                      "description": "The calculated score that represents the % of confidence that this ID represents the given customer.",
                      "type": "number",
                      "format": "double",
                      "example": 0.75
                    },
                    "data": {
                      "$ref": "#/components/schemas/IdentityMatches"
                    }
                  }
                },
                "parsedData": {
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "score": {
                      "description": "The calculated score that represents the % of confidence that this ID represents the given customer.",
                      "type": "number",
                      "format": "double",
                      "example": 0.75
                    },
                    "data": {
                      "$ref": "#/components/schemas/IdentityMatches"
                    }
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 3,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/FileLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "AddressMatches": {
          "type": "object",
          "properties": {
            "firstName": {
              "description": "The customer first name if it was matched, null otherwise.",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "description": "The customer last name if it was matched, null otherwise.",
              "type": "string",
              "example": "Doe"
            },
            "line1": {
              "description": "The customer address if it was matched, null otherwise.",
              "type": "string",
              "example": "36 Craven St"
            },
            "city": {
              "description": "The customer city if it was matched, null otherwise.",
              "type": "string",
              "example": "London"
            },
            "region": {
              "description": "The customer region if it was matched, null otherwise.",
              "type": "string",
              "example": "London"
            },
            "postalCode": {
              "description": "The customer postal code if it was matched, null otherwise.",
              "type": "string",
              "example": "WC2N 5NF"
            },
            "wordCount": {
              "description": "The number of words in the document.",
              "type": "integer",
              "example": 350
            },
            "wordCountResult": {
              "description": "Flag that indicates if the word count passed the threshold.",
              "type": "boolean",
              "readOnly": true,
              "example": true
            },
            "uniqueWords": {
              "description": "The number of unique words in the document.",
              "type": "integer",
              "example": 175
            },
            "uniqueWordsResult": {
              "description": "Flag that indicates if the unique words passed the threshold.",
              "type": "boolean",
              "readOnly": true,
              "example": true
            },
            "date": {
              "description": "The date on the document proving the document is recent.",
              "type": "string",
              "format": "date",
              "example": "2021-01-01T00:00:00.000Z"
            },
            "phone": {
              "description": "The phone of the company or agency that sent the document.",
              "type": "string",
              "example": "(123) 456-7890"
            }
          }
        },
        "ProofOfAddress": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonKycDocument"
            },
            {
              "properties": {
                "documentMatches": {
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "score": {
                      "description": "The calculated score that represents the % of confidence that this proof of address represents the given customer.",
                      "type": "number",
                      "format": "double",
                      "example": 0.75
                    },
                    "data": {
                      "$ref": "#/components/schemas/AddressMatches"
                    }
                  }
                },
                "parsedData": {
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "score": {
                      "description": "The calculated score that represents the % of confidence that this proof of address represents the given customer.",
                      "type": "number",
                      "format": "double",
                      "example": 0.75
                    },
                    "data": {
                      "$ref": "#/components/schemas/AddressMatches"
                    }
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 3,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/FileLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "ProofOfFunds": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonKycDocument"
            }
          ]
        },
        "KycDocument": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/ProofOfIdentity"
            },
            {
              "$ref": "#/components/schemas/ProofOfAddress"
            },
            {
              "$ref": "#/components/schemas/ProofOfFunds"
            }
          ],
          "discriminator": {
            "propertyName": "documentType",
            "mapping": {
              "identity-proof": "#/components/schemas/ProofOfIdentity",
              "address-proof": "#/components/schemas/ProofOfAddress",
              "funds-proof": "#/components/schemas/ProofOfFunds"
            }
          }
        },
        "ResetPasswordToken": {
          "type": "object",
          "required": [
            "username",
            "password"
          ],
          "properties": {
            "token": {
              "description": "The token's identifier string.",
              "type": "string",
              "readOnly": true
            },
            "username": {
              "description": "The token's username.",
              "type": "string"
            },
            "credentialId": {
              "description": "Token's credential ID.",
              "type": "string",
              "readOnly": true
            },
            "expiredTime": {
              "description": "Password expired time.",
              "type": "string",
              "format": "date-time"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "PaymentCardCreateToken": {
          "type": "object",
          "required": [
            "customerId",
            "token"
          ],
          "properties": {
            "customerId": {
              "description": "The Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "token": {
              "description": "PaymentCardToken ID.",
              "type": "string"
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "PaymentCardCreatePlain": {
          "type": "object",
          "required": [
            "method",
            "customerId",
            "pan",
            "expYear",
            "expMonth",
            "billingAddress"
          ],
          "properties": {
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "enum": [
                "payment-card"
              ]
            },
            "customerId": {
              "description": "The Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "pan": {
              "description": "The card PAN (Primary Account Number).",
              "type": "string",
              "writeOnly": true
            },
            "expYear": {
              "description": "Card's expiration year.",
              "type": "integer"
            },
            "expMonth": {
              "description": "Card's expiration month.",
              "type": "integer"
            },
            "cvv": {
              "description": "Card's cvv (card verification value).",
              "type": "string",
              "writeOnly": true
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "PaymentCardUpdatePlain": {
          "type": "object",
          "properties": {
            "cvv": {
              "description": "Card's cvv (card verification value).",
              "type": "string"
            },
            "expMonth": {
              "description": "Card's expiration month.",
              "type": "integer"
            },
            "expYear": {
              "description": "Card's expiration year.",
              "type": "integer"
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "stickyGatewayAccountId": {
              "description": "Sticky gateway account ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "CommonPayPalAccount": {
          "type": "object",
          "required": [
            "method",
            "customerId",
            "billingAddress"
          ],
          "title": "PayPal Account",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "enum": [
                "paypal"
              ]
            },
            "customerId": {
              "description": "The customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "username": {
              "description": "PayPal username.",
              "type": "string",
              "readOnly": true
            },
            "status": {
              "description": "PayPal account status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "inactive",
                "active",
                "deactivated"
              ]
            },
            "createdTime": {
              "description": "PayPal account created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "PayPal account updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "PayPalAccount": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPayPalAccount"
            },
            {
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerLink"
                      },
                      {
                        "$ref": "#/components/schemas/AuthTransactionLink"
                      },
                      {
                        "$ref": "#/components/schemas/ApprovalUrlLink"
                      }
                    ]
                  }
                },
                "_embedded": {
                  "type": "array",
                  "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/AuthTransactionEmbed"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerEmbed"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "KhelocardCard": {
          "type": "object",
          "title": "Khelocard Card",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "enum": [
                "Khelocard"
              ]
            },
            "customerId": {
              "description": "Customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "fingerprint": {
              "description": "A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.",
              "type": "string"
            },
            "number": {
              "description": "Khelocard card's masked number.",
              "type": "string"
            },
            "last4": {
              "description": "The number's last 4 digits.",
              "type": "string"
            },
            "expYear": {
              "description": "Khelocard card's expiration year.",
              "type": "integer"
            },
            "expMonth": {
              "description": "Khelocard card's expiration month.",
              "type": "integer"
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "status": {
              "description": "The payment instrument status.",
              "type": "string",
              "enum": [
                "active",
                "deactivated"
              ]
            },
            "createdTime": {
              "description": "The payment instrument created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The payment instrument updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            },
            "_links": {
              "type": "array",
              "description": "Links related to the resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CustomerEmbed"
                  }
                ]
              }
            }
          }
        },
        "PaymentInstrument-2": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/PaymentCard"
            },
            {
              "$ref": "#/components/schemas/BankAccount"
            },
            {
              "$ref": "#/components/schemas/PayPalAccount"
            },
            {
              "$ref": "#/components/schemas/KhelocardCard"
            }
          ]
        },
        "PaymentInstrumentCreateToken": {
          "type": "object",
          "required": [
            "customerId",
            "token"
          ],
          "properties": {
            "customerId": {
              "description": "The customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "token": {
              "description": "Payment token ID.",
              "type": "string"
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "PaymentInstrumentUpdateToken": {
          "type": "object",
          "properties": {
            "token": {
              "description": "Payment token ID.",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address (if supplied – overrides billing address from token).",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            }
          }
        },
        "ReadyToPayAmount": {
          "type": "object",
          "title": "With amount",
          "required": [
            "currency",
            "amount"
          ],
          "properties": {
            "currency": {
              "$ref": "#/components/schemas/CurrencyCode"
            },
            "amount": {
              "description": "The amount.",
              "type": "number",
              "format": "double"
            }
          }
        },
        "ReadyToPayItems": {
          "type": "object",
          "title": "With items",
          "required": [
            "items"
          ],
          "properties": {
            "items": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "planId",
                  "quantity"
                ],
                "properties": {
                  "planId": {
                    "description": "The plan identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "quantity": {
                    "description": "Number of units of the product on the given plan.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "ReadyToPay": {
          "type": "object",
          "required": [
            "websiteId",
            "riskMetadata"
          ],
          "properties": {
            "websiteId": {
              "description": "The website identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "billingAddress": {
              "description": "The billing address.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          },
          "oneOf": [
            {
              "$ref": "#/components/schemas/ReadyToPayAmount"
            },
            {
              "$ref": "#/components/schemas/ReadyToPayItems"
            }
          ]
        },
        "CoreReadyToPay": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "customerId": {
                  "description": "The customer identifier string.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/ReadyToPay"
            }
          ]
        },
        "PaymentCardDigitalWalletFeature": {
          "type": "object",
          "title": "Digital Wallet",
          "properties": {
            "name": {
              "type": "string",
              "description": "The feature name.",
              "enum": [
                "Google Pay",
                "Apple Pay"
              ]
            }
          }
        },
        "ReadyToPayPaymentCardMethod": {
          "type": "object",
          "title": "Payment Card",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "description": "The payment method.",
              "enum": [
                "payment-card"
              ]
            },
            "feature": {
              "type": "object",
              "nullable": true,
              "description": "The specific feature (eg. digital wallet or a processor) of this method. If method doesn't have any features – will be null.\n",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PaymentCardDigitalWalletFeature"
                }
              ]
            },
            "brands": {
              "type": "array",
              "description": "The list of supported brands.",
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/PaymentCardBrand"
              }
            },
            "filters": {
              "type": "array",
              "description": "For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "AchPlaidFeature": {
          "type": "object",
          "title": "Plaid",
          "properties": {
            "name": {
              "type": "string",
              "description": "The feature name.",
              "enum": [
                "Plaid"
              ]
            },
            "linkToken": {
              "type": "string",
              "description": "The Plaid `linkToken` for frontend integrations."
            },
            "expirationTime": {
              "type": "string",
              "format": "date-time",
              "description": "The expiration time of a `linkToken`."
            }
          }
        },
        "ReadyToPayAchMethod": {
          "type": "object",
          "title": "ACH",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "description": "The payment method.",
              "enum": [
                "ach"
              ]
            },
            "feature": {
              "type": "object",
              "nullable": true,
              "description": "The specific feature (eg. digital wallet or a processor) of this method. If method doesn't have any features – will be null.\n",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AchPlaidFeature"
                }
              ]
            },
            "filters": {
              "type": "array",
              "description": "For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "TokenPaymentMethod": {
          "type": "string",
          "description": "The token payment method.",
          "enum": [
            "cash",
            "check",
            "paypal",
            "AdvCash",
            "Alfa-click",
            "Alipay",
            "AstroPay Card",
            "AstroPay-GO",
            "bank-transfer",
            "bank-transfer-2",
            "bank-transfer-3",
            "bank-transfer-4",
            "bank-transfer-5",
            "bank-transfer-6",
            "bank-transfer-7",
            "bank-transfer-8",
            "bank-transfer-9",
            "Beeline",
            "Belfius-direct-net",
            "bitcoin",
            "Boleto",
            "cash-deposit",
            "CASHlib",
            "CashToCode",
            "China UnionPay",
            "CODVoucher",
            "Conekta-oxxo",
            "Cupon-de-pagos",
            "cryptocurrency",
            "domestic-cards",
            "echeck",
            "ecoPayz",
            "ecoVoucher",
            "EPS",
            "ePay.bg",
            "eZeeWallet",
            "Flexepin",
            "Giropay",
            "Gpaysafe",
            "Google Pay",
            "iDebit",
            "iDEAL",
            "ING-homepay",
            "INOVAPAY-pin",
            "INOVAPAY-wallet",
            "InstaDebit",
            "instant-bank-transfer",
            "Interac",
            "Interac-online",
            "Interac-eTransfer",
            "invoice",
            "Jeton",
            "jpay",
            "Khelocard",
            "Klarna",
            "Megafon",
            "miscellaneous",
            "Bancontact",
            "MTS",
            "MuchBetter",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "Nordea-Solo",
            "OchaPay",
            "online-bank-transfer",
            "Onlineueberweisen",
            "oriental-wallet",
            "OXXO",
            "Pagsmile-deposit-express",
            "Pagsmile-lottery",
            "PayCash",
            "Payeer",
            "Paymero",
            "Perfect-money",
            "Piastrix",
            "plaid-account",
            "PayTabs",
            "Paysafecard",
            "Paysafecash",
            "Pay4Fun",
            "PinPay",
            "phone",
            "PhonePe",
            "POLi",
            "Przelewy24",
            "QIWI",
            "QQPay",
            "Resurs",
            "SEPA",
            "Skrill",
            "Skrill Rapid Transfer",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "swift-dbt",
            "Tele2",
            "Terminaly-RF",
            "ToditoCash-card",
            "Trustly",
            "UPayCard",
            "UPI",
            "VCreditos",
            "voucher",
            "voucher-2",
            "voucher-3",
            "voucher-4",
            "Webmoney",
            "Webpay",
            "Webpay-2",
            "Webpay Card",
            "WeChat Pay",
            "Yandex-money",
            "Zotapay",
            "Zimpler"
          ]
        },
        "ReadyToPayGenericMethod": {
          "type": "object",
          "title": "Generic",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "description": "The payment method.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TokenPaymentMethod"
                }
              ]
            },
            "filters": {
              "type": "array",
              "description": "For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ReadyToPayMethods": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReadyToPayPaymentCardMethod"
              },
              {
                "$ref": "#/components/schemas/ReadyToPayAchMethod"
              },
              {
                "$ref": "#/components/schemas/ReadyToPayGenericMethod"
              }
            ]
          },
          "example": [
            {
              "method": "payment-card",
              "feature": {
                "name": "Google Pay"
              },
              "brands": [
                "Visa",
                "MasterCard"
              ],
              "filters": [
                "brand:Visa,MasterCard;bin:!411111"
              ]
            },
            {
              "method": "ach",
              "feature": {
                "name": "Plaid",
                "linkToken": "some-random-link_token-for-plaid",
                "expirationTime": "2006-01-02T15:04:05Z"
              }
            },
            {
              "method": "payment-card",
              "feature": null,
              "brands": [
                "Visa"
              ],
              "filters": [
                "brand:Visa;bin:411111,444433"
              ]
            },
            {
              "method": "ach",
              "feature": null,
              "filters": []
            },
            {
              "method": "paypal",
              "filters": []
            },
            {
              "method": "Skrill",
              "filters": []
            }
          ]
        },
        "Subscription": {
          "type": "object",
          "discriminator": {
            "propertyName": "orderType",
            "mapping": {
              "one-time-order": "#/components/schemas/one-time-order",
              "subscription-order": "#/components/schemas/subscription-order"
            }
          },
          "required": [
            "orderType",
            "customerId",
            "websiteId",
            "items"
          ],
          "properties": {
            "id": {
              "description": "The Order identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "orderType": {
              "description": "Specifies the type of order, a subscription or a one-time purchase.\n",
              "type": "string",
              "enum": [
                "subscription-order",
                "one-time-order"
              ],
              "default": "subscription-order"
            },
            "billingStatus": {
              "description": "The billing status of the most recent invoice.  It may\nhelp you determine if you should change the service status\nsuch as suspending the service.\n",
              "type": "string",
              "readOnly": true,
              "enum": [
                "unpaid",
                "past-due",
                "delinquent",
                "paid",
                "voided",
                "refunded",
                "disputed",
                "voided"
              ]
            },
            "customerId": {
              "description": "Unique id for each customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "Unique id for each website.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "initialInvoiceId": {
              "description": "Unique id for the initial invoice.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "recentInvoiceId": {
              "description": "Unique id for the most recently issued invoice. It might not be `paid` yet.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "items": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "plan"
                ],
                "properties": {
                  "planId": {
                    "description": "Unique id for each plan.",
                    "deprecated": true,
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "quantity": {
                    "description": "Number of units of the product on the given plan.",
                    "type": "integer"
                  },
                  "plan": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/CommonPlan"
                      }
                    ],
                    "properties": {
                      "id": {
                        "readOnly": false,
                        "description": "The Plan identifier.",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ResourceId"
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "currency",
                      "productId",
                      "pricing"
                    ]
                  },
                  "revision": {
                    "type": "integer",
                    "readOnly": true,
                    "description": "Increments with each override change to this specific item."
                  },
                  "isModified": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "Indicates if the plan information was modified for this subscription."
                  },
                  "isGrandfathered": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "Indicates if the plan's current revision is greater than this item's plan revision."
                  }
                }
              }
            },
            "deliveryAddress": {
              "description": "Delivery address.",
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "billingAddress": {
              "description": "Billing address.",
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "riskMetadata": {
              "nullable": true,
              "example": null,
              "description": "Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/RiskMetadata"
                }
              ]
            },
            "activationTime": {
              "description": "Order activation time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "couponIds": {
              "type": "array",
              "nullable": true,
              "description": "A list of coupons to redeem on the customer and restrict to this subscription.\nRead more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).\n\nThis parameter respects the following logic:\n\n- When not passed then applied coupons will not be changed.\n\n- When empty array passed then all applied coupon redemptions will be canceled.\n\n- When list of coupons is passed then not applied yet coupons will be applied, already applied coupons\nwill not change their state, applied coupons that are not presented in passed list will be canceled.\n\nIf list of applied coupons on pending order will be changed due to this param during update order,\n Invoice for the order will be reissued.\n",
              "writeOnly": true,
              "items": {
                "type": "string",
                "description": "Coupon ID."
              }
            },
            "poNumber": {
              "description": "Purchase order number, will be displayed on the issued invoices.",
              "nullable": true,
              "example": "PO123456",
              "type": "string"
            },
            "revision": {
              "description": "The number of times the order data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "InitialInvoiceLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "initialInvoice"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "RecentInvoiceLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "recentInvoice"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "RecentInvoiceEmbed": {
          "type": "object",
          "description": "Recent Invoice object.",
          "readOnly": true,
          "properties": {
            "recentInvoice": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        },
        "InitialInvoiceEmbed": {
          "type": "object",
          "description": "Initial Invoice object.",
          "readOnly": true,
          "properties": {
            "initialInvoice": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        },
        "SubscriptionMetadata": {
          "type": "object",
          "properties": {
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "createdTime": {
              "description": "Order created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Order updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerLink"
                  },
                  {
                    "$ref": "#/components/schemas/InitialInvoiceLink"
                  },
                  {
                    "$ref": "#/components/schemas/RecentInvoiceLink"
                  },
                  {
                    "$ref": "#/components/schemas/WebsiteLink"
                  },
                  {
                    "$ref": "#/components/schemas/ApprovalUrlLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RecentInvoiceEmbed"
                  },
                  {
                    "$ref": "#/components/schemas/InitialInvoiceEmbed"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerEmbed"
                  },
                  {
                    "$ref": "#/components/schemas/WebsiteEmbed"
                  },
                  {
                    "$ref": "#/components/schemas/LeadSourceEmbed"
                  }
                ]
              }
            }
          }
        },
        "one-time-order": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Subscription"
            },
            {
              "properties": {
                "status": {
                  "description": "One-time order status.",
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "pending",
                    "completed",
                    "abandoned"
                  ]
                }
              }
            },
            {
              "$ref": "#/components/schemas/SubscriptionMetadata"
            }
          ]
        },
        "UpcomingInvoiceItem": {
          "type": "object",
          "description": "Line item.",
          "required": [
            "type",
            "unitPriceAmount",
            "unitPriceCurrency",
            "quantity"
          ],
          "properties": {
            "type": {
              "description": "Type of line item.",
              "type": "string",
              "enum": [
                "debit",
                "credit"
              ]
            },
            "description": {
              "description": "Description of line item.",
              "type": "string"
            },
            "unitPriceAmount": {
              "description": "Unit price of the line item.",
              "type": "number",
              "format": "double",
              "example": 49.95
            },
            "unitPriceCurrency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "quantity": {
              "description": "Quantity of line item.",
              "type": "integer",
              "example": 1
            },
            "periodStartTime": {
              "description": "Date-time when the period begins for this item.",
              "type": "string",
              "format": "date-time"
            },
            "periodEndTime": {
              "description": "Date-time when the period ends for this item.",
              "type": "string",
              "format": "date-time"
            },
            "createdTime": {
              "description": "Date-time when the item was added to the subscription.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "UpcomingInvoiceItemCollection": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/UpcomingInvoiceItem"
          }
        },
        "SubscriptionCancellationState": {
          "type": "object",
          "properties": {
            "canceledTime": {
              "description": "Subscription order canceled time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "canceledBy": {
              "description": "Canceled by.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "merchant",
                "customer",
                "rebilly"
              ]
            },
            "cancelCategory": {
              "description": "Cancel category.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "billing-failure",
                "did-not-use",
                "did-not-want",
                "missing-features",
                "bugs-or-problems",
                "do-not-remember",
                "risk-warning",
                "contract-expired",
                "too-expensive",
                "never-started",
                "switched-plan",
                "other"
              ]
            },
            "cancelDescription": {
              "description": "Cancel reason description in free form.",
              "type": "string",
              "readOnly": true,
              "maxLength": 255
            }
          }
        },
        "subscription-order": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Subscription"
            },
            {
              "properties": {
                "status": {
                  "description": "The status of the subscription service. A subscription starts\nin the `pending` status, and will become `active` when the\nservice period begins.\n",
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "pending",
                    "active",
                    "canceled",
                    "churned",
                    "suspended",
                    "paused",
                    "abandoned",
                    "trial-ended"
                  ]
                },
                "inTrial": {
                  "description": "True if the subscription is currently in a trial period.",
                  "type": "boolean",
                  "readOnly": true
                },
                "trial": {
                  "type": "object",
                  "description": "To use plan defaults do not send the `trial` key, or send a `null`. value with it.",
                  "required": [
                    "endTime"
                  ],
                  "properties": {
                    "enabled": {
                      "description": "Enable or disable the trial for this subscription. If enabled for plans without trial prices, the trial will be free.",
                      "type": "boolean"
                    },
                    "endTime": {
                      "description": "The time the trial should end.",
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "isTrialOnly": {
                  "description": "Whether a subscription ends after a trial period. Recurring settings are ignored if it's `true`.",
                  "type": "boolean",
                  "default": false
                },
                "invoiceTimeShift": {
                  "description": "You can shift issue time and due time of invoices for this subscription.\nThis setting overrides plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same billing period,\nthis property allows to subscribe to different plans.\n",
                  "nullable": true,
                  "example": null,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceTimeShift"
                    }
                  ]
                },
                "recurringInterval": {
                  "type": "object",
                  "description": "The recurring interval to override plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same recurring period length,\nthis property allows to subscribe to different plans.\n",
                  "nullable": true,
                  "example": null,
                  "properties": {
                    "periodAnchorInstruction": {
                      "$ref": "#/components/schemas/ServicePeriodAnchorInstruction"
                    }
                  }
                },
                "autopay": {
                  "description": "Autopay determines if a payment attempt will be automatic.",
                  "type": "boolean",
                  "default": true
                },
                "startTime": {
                  "description": "Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.",
                  "nullable": true,
                  "example": null,
                  "type": "string",
                  "format": "date-time"
                },
                "endTime": {
                  "description": "Subscription end time.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServerTimestamp"
                    }
                  ]
                },
                "renewalTime": {
                  "description": "Subscription renewal time.",
                  "type": "string",
                  "format": "date-time"
                },
                "rebillNumber": {
                  "description": "The current period number.",
                  "type": "integer",
                  "readOnly": true
                },
                "renewalReminderTime": {
                  "description": "Time renewal reminder event will be triggered.",
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServerTimestamp"
                    }
                  ]
                },
                "renewalReminderNumber": {
                  "description": "Number of renewal reminder events triggered.",
                  "type": "integer",
                  "readOnly": true
                },
                "trialReminderTime": {
                  "description": "Time renewal reminder event will be triggered.",
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ServerTimestamp"
                    }
                  ]
                },
                "trialReminderNumber": {
                  "description": "Number of renewal reminder events triggered.",
                  "type": "integer",
                  "readOnly": true
                },
                "lineItems": {
                  "description": "Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.",
                  "readOnly": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UpcomingInvoiceItemCollection"
                    }
                  ]
                },
                "lineItemSubtotal": {
                  "type": "object",
                  "readOnly": true,
                  "description": "Subtotal of line items in this subscription (signed value). If credits exceed debits, it will be a negative number.",
                  "properties": {
                    "currency": {
                      "$ref": "#/components/schemas/CurrencyCode"
                    },
                    "amount": {
                      "type": "number",
                      "format": "double",
                      "example": 49.95
                    }
                  }
                }
              }
            },
            {
              "$ref": "#/components/schemas/SubscriptionCancellationState"
            },
            {
              "$ref": "#/components/schemas/SubscriptionMetadata"
            }
          ]
        },
        "Search": {
          "type": "object",
          "properties": {
            "customers": {
              "description": "List of returned customers.",
              "readOnly": true,
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Customer"
                  }
                ]
              }
            },
            "invoices": {
              "description": "List of returned invoices.",
              "readOnly": true,
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Invoice"
                  }
                ]
              }
            },
            "orders": {
              "description": "List of returned orders.",
              "readOnly": true,
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Subscription"
                  }
                ]
              }
            },
            "transactions": {
              "description": "List of returned transactions.",
              "readOnly": true,
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Transaction"
                  }
                ]
              }
            },
            "searched": {
              "description": "Names of searched resources, even if they returned nothing.",
              "readOnly": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "PriceBasedShippingRate": {
          "type": "object",
          "required": [
            "name",
            "currency",
            "price"
          ],
          "properties": {
            "name": {
              "description": "The shipping rate name.",
              "type": "string",
              "maxLength": 255
            },
            "minOrderSubtotal": {
              "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00.",
              "type": "number",
              "format": "double",
              "default": 0
            },
            "maxOrderSubtotal": {
              "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum).",
              "type": "number",
              "format": "double"
            },
            "price": {
              "description": "The shipping price - 0 is a valid value (for free).",
              "type": "number",
              "format": "double"
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "ShippingZone": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "id": {
              "description": "The shipping zone identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "The shipping zone name.",
              "type": "string",
              "maxLength": 255
            },
            "countries": {
              "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
              "type": "array",
              "items": {
                "description": "Country ISO Alpha-2 code.",
                "type": "string",
                "pattern": "^[A-Z]{2}$"
              }
            },
            "rates": {
              "description": "Price-based shipping rate instructions.",
              "type": "array",
              "items": {
                "description": "Price based shipping rate instruction.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PriceBasedShippingRate"
                  }
                ]
              }
            },
            "isDefault": {
              "description": "Is this Shipping Zone default.",
              "readOnly": true
            },
            "createdTime": {
              "description": "The shipping zone created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The shipping zone updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "SubscriptionChange": {
          "type": "object",
          "required": [
            "planId",
            "renewalPolicy",
            "prorated"
          ],
          "properties": {
            "planId": {
              "description": "The plan identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "quantity": {
              "description": "Number of units of the product on the given plan. If null or omitted, current quantity will not be changed.",
              "type": "integer"
            },
            "renewalPolicy": {
              "description": "The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.",
              "type": "string",
              "enum": [
                "reset",
                "retain"
              ]
            },
            "prorated": {
              "description": "Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period.\nIn addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,\nfor the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.\n",
              "type": "boolean"
            },
            "effectiveTime": {
              "description": "The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.",
              "type": "string",
              "format": "date-time"
            },
            "preview": {
              "description": "If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.",
              "type": "boolean",
              "default": false
            },
            "keepTrial": {
              "description": "If set to true and the subscription order has an active trial, it will use that trial further. Works with 'retain' renewalPolicy only.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "SubscriptionInvoice": {
          "type": "object",
          "properties": {
            "transactionId": {
              "description": "If present, applies a payment to the invoice created.  If the payment is for the invoice total, it would be marked as paid.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "SubscriptionCancellation": {
          "type": "object",
          "required": [
            "subscriptionId",
            "churnTime"
          ],
          "properties": {
            "id": {
              "description": "Cancellation identifier.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "subscriptionId": {
              "description": "Identifier of the canceled subscription order.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "proratedInvoiceId": {
              "description": "Identifier of the invoice on which the cancellation proration is calculated.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "appliedInvoiceId": {
              "description": "The identifier of the invoice where the cancellation fees or credits are applied.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "canceledBy": {
              "description": "Who did the cancellation.",
              "type": "string",
              "default": "customer",
              "enum": [
                "merchant",
                "customer"
              ]
            },
            "reason": {
              "description": "Cancellation reason.",
              "type": "string",
              "default": "other",
              "enum": [
                "did-not-use",
                "did-not-want",
                "missing-features",
                "bugs-or-problems",
                "do-not-remember",
                "risk-warning",
                "contract-expired",
                "too-expensive",
                "other",
                "billing-failure"
              ]
            },
            "description": {
              "description": "Cancel reason description in free form.",
              "type": "string",
              "maxLength": 255
            },
            "prorated": {
              "description": "Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and\nsubscription's next renewal time.\n",
              "type": "boolean",
              "default": false
            },
            "status": {
              "description": "\"draft\" defines that the cancellation isn't applied on an invoice and subscription but\ncan be inspected to see the charge.\n\"confirmed\" will set a subscription to be canceled when the `churnTime` is reached.\n\"completed\" is a read-only status which is set by the system when the churnTime is reached.\nThe cancellation may not be changed or deleted when the status is \"completed\".\n",
              "type": "string",
              "default": "confirmed",
              "enum": [
                "draft",
                "confirmed",
                "completed",
                "revoked"
              ]
            },
            "canceledTime": {
              "description": "The cancellation time (when the status is confirmed which is by default unless specified \"draft\").",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "createdTime": {
              "description": "The time of resource creation (when it is posted).",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "churnTime": {
              "description": "The time when the subscription will be deactivated.",
              "type": "string",
              "format": "date-time"
            },
            "lineItems": {
              "description": "Items to be added to the new invoice. Proration item is generated and added automatically.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpcomingInvoiceItemCollection"
                }
              ]
            },
            "lineItemSubtotal": {
              "description": "Subtotal of the line items which will be added after the subscription's cancellation.",
              "readOnly": true,
              "type": "number",
              "example": 49.95
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "SubscriptionReactivation": {
          "type": "object",
          "required": [
            "subscriptionId"
          ],
          "properties": {
            "id": {
              "description": "Reactivation identifier.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "subscriptionId": {
              "description": "Identifier of the reactivated subscription.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "cancellationId": {
              "description": "Identifier of the related cancellation.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "description": {
              "description": "Reactivation reason description in free form.",
              "type": "string",
              "maxLength": 255
            },
            "effectiveTime": {
              "description": "The date from which the service period would start, unless the subscription is canceled but still active.\nIn case the susbcription is still active, the subscription will continue the current service period.\nIf omitted, it will default to the current time.\n",
              "type": "string",
              "format": "date-time"
            },
            "renewalTime": {
              "description": "The time of the next subscription renewal. If omitted then it is computed from the effective time.\nIf the subscription is canceled but active it is ignored, so the next renewal will happen as scheduled.\n",
              "type": "string",
              "format": "date-time"
            },
            "createdTime": {
              "description": "The time of resource creation (when it is posted).",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "OrderTimeline": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The Timeline message identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Timeline message type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "timeline-comment-created",
                "order-renewed",
                "order-activated",
                "order-completed",
                "order-reactivated",
                "order-canceled",
                "order-upgraded",
                "order-downgraded",
                "order-billing-address-changed",
                "order-delivery-address-changed",
                "order-renewal-time-changed",
                "order-churned",
                "order-custom-fields-changed",
                "order-items-changed",
                "order-billing-anchor-changed",
                "order-recurring-interval-changed",
                "order-risk-metadata-changed",
                "order-paid-early",
                "order-quantity-changed",
                "email-message-sent",
                "coupon-applied",
                "invoice-created",
                "invoice-issued",
                "invoice-abandoned",
                "invoice-voided",
                "invoice-past-due",
                "invoice-paid",
                "invoice-partially-paid",
                "invoice-disputed",
                "invoice-refunded",
                "invoice-partially-refunded",
                "invoice-renewal-payment-declined"
              ]
            },
            "triggeredBy": {
              "description": "Shows who or what triggered the Timeline message.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "rebilly",
                "app",
                "direct-api"
              ]
            },
            "message": {
              "description": "The message that describes the message details.",
              "type": "string"
            },
            "extraData": {
              "$ref": "#/components/schemas/TimelineExtraData"
            },
            "occurredTime": {
              "description": "Timeline message time.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "CommonPaymentToken": {
          "type": "object",
          "required": [
            "method"
          ],
          "properties": {
            "id": {
              "description": "The token identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "isUsed": {
              "description": "Whether the token was already used.",
              "type": "boolean",
              "default": false,
              "readOnly": true
            },
            "method": {
              "type": "string"
            },
            "riskMetadata": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RiskMetadata"
                }
              ]
            },
            "leadSource": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LeadSource"
                }
              ],
              "writeOnly": true
            },
            "createdTime": {
              "description": "Token created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Token updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "usageTime": {
              "description": "Token usage time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "expirationTime": {
              "description": "Token expiration time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "PaymentCardToken": {
          "type": "object",
          "title": "Payment Card Token",
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentToken"
            }
          ],
          "required": [
            "method",
            "paymentInstrument"
          ],
          "properties": {
            "method": {
              "description": "The token payment method.",
              "type": "string",
              "enum": [
                "payment-card"
              ]
            },
            "paymentInstrument": {
              "description": "The payment card instrument details.",
              "type": "object",
              "properties": {
                "pan": {
                  "description": "Payment Card PAN (Primary Account Number).",
                  "type": "string",
                  "writeOnly": true
                },
                "cvv": {
                  "description": "Payment Card CVV/CVC.",
                  "type": "string",
                  "writeOnly": true
                },
                "expMonth": {
                  "description": "Payment Card expiration month.",
                  "type": "integer"
                },
                "expYear": {
                  "description": "Payment Card expiration year.",
                  "type": "integer"
                },
                "bin": {
                  "description": "Payment Card BIN (the PAN's first 6 digits).",
                  "type": "string",
                  "format": "bin",
                  "readOnly": true
                },
                "last4": {
                  "description": "Payment Card PAN's last 4 digits.",
                  "type": "string",
                  "readOnly": true
                },
                "brand": {
                  "readOnly": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentCardBrand"
                    }
                  ]
                }
              }
            },
            "billingAddress": {
              "description": "The billing address object.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            }
          }
        },
        "BankAccountInstrument": {
          "type": "object",
          "description": "The bank account BBAN or IBAN instrument.",
          "required": [
            "accountNumberType"
          ],
          "discriminator": {
            "propertyName": "accountNumberType",
            "mapping": {
              "BBAN": "#/components/schemas/BBANInstrument",
              "IBAN": "#/components/schemas/IBANInstrument"
            }
          },
          "properties": {
            "accountNumberType": {
              "description": "Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
              "type": "string",
              "default": "BBAN",
              "enum": [
                "IBAN",
                "BBAN"
              ]
            }
          }
        },
        "BBANInstrument": {
          "description": "Bank account BBAN instrument.",
          "allOf": [
            {
              "$ref": "#/components/schemas/BankAccountInstrument"
            },
            {
              "type": "object",
              "required": [
                "accountNumber",
                "routingNumber",
                "accountType"
              ],
              "properties": {
                "accountNumber": {
                  "description": "Bank Account Number.",
                  "type": "string",
                  "pattern": "^[0-9]+$",
                  "writeOnly": true
                },
                "routingNumber": {
                  "description": "Bank Routing Number.",
                  "type": "string",
                  "pattern": "^[0-9]+$"
                },
                "accountType": {
                  "description": "Bank Account Type.",
                  "type": "string",
                  "enum": [
                    "checking",
                    "savings",
                    "other"
                  ]
                },
                "bic": {
                  "description": "Bank Identifier Code.",
                  "type": "string"
                },
                "bankName": {
                  "description": "Bank name.",
                  "type": "string"
                },
                "last4": {
                  "description": "Bank Account Number's last 4 digits.",
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          ]
        },
        "IBANInstrument": {
          "description": "Bank account IBAN instrument.",
          "allOf": [
            {
              "$ref": "#/components/schemas/BankAccountInstrument"
            },
            {
              "type": "object",
              "required": [
                "accountNumber"
              ],
              "properties": {
                "accountNumber": {
                  "description": "Bank Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available in [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
                  "type": "string",
                  "writeOnly": true
                },
                "bic": {
                  "description": "Bank Identifier Code.",
                  "type": "string"
                },
                "bankName": {
                  "description": "Bank name.",
                  "type": "string"
                },
                "last4": {
                  "description": "Bank Account Number's last 4 digits.",
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          ]
        },
        "BankAccountToken": {
          "type": "object",
          "title": "Bank Account Token.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentToken"
            }
          ],
          "required": [
            "method",
            "paymentInstrument",
            "billingAddress"
          ],
          "properties": {
            "method": {
              "description": "The token payment method.",
              "type": "string",
              "enum": [
                "ach",
                "echeck"
              ]
            },
            "paymentInstrument": {
              "$ref": "#/components/schemas/BankAccountInstrument"
            },
            "billingAddress": {
              "description": "The billing address object.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            }
          }
        },
        "DigitalWalletToken": {
          "type": "object",
          "title": "Digital Wallet Token",
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentToken"
            }
          ],
          "required": [
            "method",
            "paymentInstrument"
          ],
          "properties": {
            "method": {
              "description": "The token payment method.",
              "type": "string",
              "enum": [
                "digital-wallet"
              ]
            },
            "paymentInstrument": {
              "description": "The payment instrument details.",
              "type": "object",
              "required": [
                "type",
                "amount",
                "currency",
                "descriptor",
                "payload"
              ],
              "properties": {
                "type": {
                  "description": "The digital wallet type.",
                  "type": "string",
                  "enum": [
                    "Apple Pay",
                    "Google Pay"
                  ]
                },
                "amount": {
                  "description": "Authorized for the digital wallet amount.",
                  "type": "number",
                  "format": "double"
                },
                "currency": {
                  "description": "Authorized for the digital wallet currency.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CurrencyCode"
                    }
                  ]
                },
                "descriptor": {
                  "description": "The descriptor for a payment.",
                  "type": "string"
                },
                "bin": {
                  "description": "Payment Card BIN (the PAN's first 6 digits).",
                  "type": "string",
                  "format": "bin",
                  "readOnly": true
                },
                "last4": {
                  "description": "Payment Card PAN's last 4 digits.",
                  "type": "string",
                  "readOnly": true
                },
                "brand": {
                  "readOnly": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaymentCardBrand"
                    }
                  ]
                },
                "expMonth": {
                  "readOnly": true,
                  "description": "Payment Card expiration month.",
                  "type": "integer"
                },
                "expYear": {
                  "readOnly": true,
                  "description": "Payment Card expiration year.",
                  "type": "integer"
                },
                "payload": {
                  "writeOnly": true,
                  "description": "The digital wallet encoded data. May contain the digital wallet billing address.",
                  "type": "object"
                }
              }
            },
            "billingAddress": {
              "readOnly": true,
              "description": "The billing address object.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            }
          }
        },
        "PlaidAccountToken": {
          "type": "object",
          "title": "Plaid Account Token",
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentToken"
            }
          ],
          "required": [
            "method",
            "billingAddress",
            "paymentInstrument"
          ],
          "properties": {
            "method": {
              "description": "The token method.",
              "type": "string",
              "enum": [
                "plaid-account"
              ]
            },
            "paymentInstrument": {
              "description": "The Plaid payment instrument details.",
              "type": "object",
              "required": [
                "credentialHash",
                "publicToken",
                "accountId"
              ],
              "properties": {
                "credentialHash": {
                  "description": "The Plaid credentials hash.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                },
                "publicToken": {
                  "type": "string",
                  "description": "The Plaid public token."
                },
                "accountId": {
                  "type": "string",
                  "description": "The Plaid account ID."
                }
              }
            },
            "billingAddress": {
              "description": "The billing address object.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            }
          }
        },
        "KhelocardCardToken": {
          "type": "object",
          "title": "Khelocard card token",
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentToken"
            }
          ],
          "required": [
            "method",
            "billingAddress",
            "paymentInstrument"
          ],
          "properties": {
            "method": {
              "description": "The token method.",
              "type": "string",
              "enum": [
                "Khelocard"
              ]
            },
            "paymentInstrument": {
              "description": "The token instrument details.",
              "type": "object",
              "required": [
                "number",
                "cvv",
                "expYear",
                "expMonth"
              ],
              "properties": {
                "number": {
                  "description": "Khelocard card number.",
                  "type": "string",
                  "writeOnly": true
                },
                "cvv": {
                  "description": "Khelocard card CVV.",
                  "type": "string",
                  "writeOnly": true
                },
                "last4": {
                  "description": "Khelocard card number's last 4 digits.",
                  "type": "string",
                  "readOnly": true
                },
                "expMonth": {
                  "description": "Khelocard card expiration month.",
                  "type": "integer"
                },
                "expYear": {
                  "description": "Khelocard card expiration year.",
                  "type": "integer"
                }
              }
            },
            "billingAddress": {
              "description": "The billing address object.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            }
          }
        },
        "AlternativePaymentToken": {
          "type": "object",
          "title": "Alternative payment token.",
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentToken"
            }
          ],
          "required": [
            "method",
            "billingAddress"
          ],
          "properties": {
            "method": {
              "$ref": "#/components/schemas/TokenPaymentMethod"
            },
            "billingAddress": {
              "description": "The billing address object.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            }
          }
        },
        "CompositeToken": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/PaymentCardToken"
            },
            {
              "$ref": "#/components/schemas/BankAccountToken"
            },
            {
              "$ref": "#/components/schemas/DigitalWalletToken"
            },
            {
              "$ref": "#/components/schemas/PlaidAccountToken"
            },
            {
              "$ref": "#/components/schemas/KhelocardCardToken"
            },
            {
              "$ref": "#/components/schemas/AlternativePaymentToken"
            }
          ]
        },
        "DigitalWalletValidation": {
          "type": "object",
          "required": [
            "type"
          ],
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "Apple Pay": "#/components/schemas/ApplePayValidation"
            }
          },
          "properties": {
            "type": {
              "description": "Type of the digital wallet to validate.",
              "type": "string",
              "enum": [
                "Apple Pay"
              ]
            }
          }
        },
        "ApplePayValidation": {
          "description": "Apple Pay session validation.",
          "allOf": [
            {
              "$ref": "#/components/schemas/DigitalWalletValidation"
            },
            {
              "type": "object",
              "required": [
                "validationRequest"
              ],
              "properties": {
                "type": {
                  "type": "string"
                },
                "validationRequest": {
                  "description": "The validation request.",
                  "type": "object",
                  "properties": {
                    "validationURL": {
                      "type": "string",
                      "description": "The URL provided by the Apple Pay SDK to perform the validation."
                    },
                    "domainName": {
                      "type": "string",
                      "description": "The domain where the client code like FramePay is executed. Should be registered in the Apple Pay console by Rebilly before using.\n",
                      "example": "www.example.com"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "A name of your store, suitable for display.",
                      "example": "My Store"
                    }
                  },
                  "writeOnly": true
                },
                "validationResponse": {
                  "description": "The validation response to use by the Apple Pay SDK to proceed.",
                  "type": "object",
                  "readOnly": true
                }
              }
            }
          ]
        },
        "PaymentToken": {
          "type": "object",
          "title": "Payment Token",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "description": "Payment Token ID.",
              "type": "string"
            }
          }
        },
        "PaymentInstrument-3": {
          "type": "object",
          "title": "Payment Instrument",
          "required": [
            "paymentInstrumentId"
          ],
          "properties": {
            "paymentInstrumentId": {
              "description": "The Payment Instrument identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "PaymentMethods": {
          "type": "object",
          "title": "Payment Methods",
          "properties": {
            "methods": {
              "type": "array",
              "description": "The list of available payment methods.\nOnly payment methods with at least one active gateway account are allowed.\n\nIf not specified all available payment methods will be displayed.\n\nCustomer can choose any of those as well as the payment instrument for them.\nAdditional steps will occur via a redirect to `approvalUrl`.\n",
              "items": {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            }
          }
        },
        "PaymentInstruction": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/PaymentToken"
            },
            {
              "$ref": "#/components/schemas/PaymentInstrument-3"
            },
            {
              "$ref": "#/components/schemas/PaymentMethods"
            }
          ]
        },
        "CommonTransactionRequest": {
          "type": "object",
          "required": [
            "websiteId",
            "customerId",
            "currency",
            "amount"
          ],
          "properties": {
            "websiteId": {
              "description": "The website identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "The customer identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "amount": {
              "description": "The transaction amount.",
              "type": "number",
              "format": "double",
              "example": 97.97
            },
            "invoiceIds": {
              "description": "The array of invoice identifiers.",
              "nullable": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "paymentInstruction": {
              "description": "Payment instruction. If not supplied, customer's default payment instrument will be used.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentInstruction"
                }
              ]
            },
            "paymentInstrument": {
              "deprecated": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentInstrument"
                }
              ]
            },
            "billingAddress": {
              "description": "Billing address. If not supplied, we use the billing address associated with the payment instrument, and then customer.",
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "requestId": {
              "description": "The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.",
              "type": "string",
              "nullable": true,
              "maxLength": 50,
              "pattern": "^[\\-\\w]+$",
              "example": "44433322-2c4y-483z-a0a9-158621f77a21"
            },
            "gatewayAccountId": {
              "description": "Rebilly will select the appropriate payment gateway account for the transaction based on the properties of the transaction and the `gateway-account-requested` event rules configurations. If you wish to prevent Rebilly from making the gateway account selection, you may supply a gateway account id here, and it will be used instead. Only use this field if you intend to override the settings.",
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "description": {
              "nullable": true,
              "description": "The payment description.",
              "type": "string",
              "maxLength": 255
            },
            "notificationUrl": {
              "nullable": true,
              "description": "The URL where a server-to-server notification request type `POST` with a transaction payload will be sent when the transaction's result is finalized. Do not trust the notification; follow with a `GET` request to confirm the result of the transaction. Please respond with a `2xx` HTTP status code, or we will reattempt the request again. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly.\n",
              "type": "string",
              "format": "uri"
            },
            "redirectUrl": {
              "nullable": true,
              "description": "The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly.",
              "type": "string",
              "format": "uri"
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            },
            "isProcessedOutside": {
              "description": "True if transaction was processed outside Rebilly.",
              "type": "boolean",
              "default": false
            },
            "isMerchantInitiated": {
              "description": "True if the transaction was initiated by the merchant.",
              "type": "boolean",
              "default": false
            },
            "processedTime": {
              "type": "string",
              "description": "The time the transaction was processed. Can be specified only if transaction was processed outside Rebilly.",
              "format": "date-time"
            }
          }
        },
        "TransactionRequest": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonTransactionRequest"
            },
            {
              "required": [
                "type"
              ]
            },
            {
              "properties": {
                "type": {
                  "description": "The type of transaction requested.\nYou should always include the type within your API request.\nThis supports a limited subset of Transaction types.  To refund or void, use the refund endpoint.\nTo `capture` use the `sale` type. If any existing `authorize` transactions are eligible, then they will be captured and the `sale` will be converted to a `capture` type.\n",
                  "type": "string",
                  "enum": [
                    "3ds-authentication",
                    "sale",
                    "authorize"
                  ]
                }
              }
            }
          ]
        },
        "PayoutRequest": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonTransactionRequest"
            }
          ]
        },
        "TransactionGatewayLog": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "headers": {
              "description": "The request headers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "url": {
              "description": "The request URL.",
              "type": "string"
            },
            "request": {
              "description": "The request body.",
              "type": "string"
            },
            "response": {
              "description": "The response body.",
              "type": "string"
            },
            "responseHeaders": {
              "description": "The response headers.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/HttpHeaders"
                }
              ]
            },
            "duration": {
              "description": "The request time (miliseconds).",
              "type": "integer"
            },
            "createdTime": {
              "description": "The log entry created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/TransactionLink"
              }
            }
          }
        },
        "TransactionQuery": {
          "type": "object",
          "properties": {
            "result": {
              "description": "Transaction result.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "abandoned",
                "approved",
                "canceled",
                "declined",
                "unknown"
              ]
            },
            "status": {
              "description": "Transaction status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "completed",
                "conn-error",
                "disputed",
                "never-sent",
                "offsite",
                "partially-refunded",
                "pending",
                "refunded",
                "sending",
                "suspended",
                "timeout",
                "voided",
                "waiting-approval",
                "waiting-capture",
                "waiting-gateway",
                "waiting-refund"
              ]
            },
            "amount": {
              "description": "The transaction's amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "currency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            }
          }
        },
        "TransactionUpdate": {
          "type": "object",
          "description": "Update a Transaction manually to completed status with given result with optional currency and amount.",
          "required": [
            "result"
          ],
          "properties": {
            "result": {
              "description": "Transaction result.",
              "type": "string",
              "enum": [
                "abandoned",
                "approved",
                "canceled",
                "declined"
              ]
            },
            "amount": {
              "description": "The transaction amount.",
              "type": "number",
              "format": "double"
            },
            "currency": {
              "description": "The transaction currency.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            }
          }
        },
        "TransactionRefund": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "Refund amount.",
              "type": "number",
              "format": "double"
            }
          }
        },
        "TransactionTimeline": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The Timeline message identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Timeline message type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "amount-adjusted",
                "blocklist-matched",
                "bump-offer-accepted",
                "bump-offer-presented",
                "bump-offer-rejected",
                "customer-redirected-offsite",
                "customer-returned",
                "dcc-offer-accepted",
                "dcc-offer-forced",
                "dcc-offer-presented",
                "dcc-offer-rejected",
                "dispute-changed",
                "dispute-created",
                "dispute-forfeited",
                "dispute-lost",
                "dispute-responded",
                "dispute-won",
                "gateway-connection-failed",
                "gateway-connection-timed-out",
                "gateway-response-received",
                "risk-score-changed",
                "timeline-comment-created",
                "transaction-abandoned",
                "transaction-amount-discrepancy-found",
                "transaction-approved",
                "transaction-canceled",
                "transaction-capture-delayed",
                "transaction-captured",
                "transaction-declined",
                "transaction-discrepancy-found",
                "transaction-initiated",
                "transaction-reconciled",
                "transaction-refunded",
                "transaction-retried",
                "transaction-rules-processed",
                "transaction-scheduled-time-changed",
                "transaction-timeout-resolved",
                "transaction-voided",
                "transaction-waiting-gateway",
                "transaction-queried",
                "transaction-updated"
              ]
            },
            "triggeredBy": {
              "description": "Shows who or what triggered the Timeline message.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "rebilly",
                "app",
                "direct-api"
              ]
            },
            "message": {
              "description": "The message that describes the message details.",
              "type": "string"
            },
            "extraData": {
              "$ref": "#/components/schemas/TimelineExtraData"
            },
            "occurredTime": {
              "description": "Timeline message time.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "GlobalWebhookEventType": {
          "type": "string",
          "description": "Rebilly webhooks event type.",
          "enum": [
            "aml-list-possibly-matched",
            "customer-created",
            "customer-merged",
            "customer-one-time-password-requested",
            "customer-updated",
            "dispute-created",
            "experian-check-performed",
            "gateway-account-downtime-ended",
            "gateway-account-downtime-started",
            "gateway-account-limit-reached",
            "gateway-account-requested",
            "invoice-abandoned",
            "invoice-created",
            "invoice-issued",
            "invoice-modified",
            "invoice-paid",
            "invoice-past-due",
            "invoice-past-due-reminder",
            "invoice-reissued",
            "invoice-voided",
            "kyc-document-accepted",
            "kyc-document-modified",
            "kyc-document-rejected",
            "kyc-document-reviewed",
            "nsf-response-received",
            "offsite-payment-completed",
            "order-completed",
            "payment-card-created",
            "payment-card-expiration-reminder",
            "payment-card-expired",
            "renewal-invoice-issued",
            "renewal-invoice-payment-canceled",
            "renewal-invoice-payment-declined",
            "risk-score-changed",
            "subscription-activated",
            "subscription-canceled",
            "subscription-modified",
            "subscription-reactivated",
            "subscription-renewal-reminder",
            "subscription-renewed",
            "subscription-trial-converted",
            "subscription-trial-end-reminder",
            "subscription-trial-ended",
            "subscription-trial-end-changed",
            "transaction-amount-discrepancy-found",
            "transaction-declined",
            "transaction-discrepancy-found",
            "transaction-process-requested",
            "transaction-processed",
            "transaction-reconciled",
            "transaction-timeout-resolved",
            "waiting-gateway-transaction-completed"
          ]
        },
        "GatewayAccountLimit": {
          "type": "object",
          "required": [
            "cap"
          ],
          "properties": {
            "id": {
              "description": "The gateway account limit identifier.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "status": {
              "description": "The gateway account limit status.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "monitoring",
                "reached"
              ]
            },
            "startTime": {
              "description": "The limit's current period start time.",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "endTime": {
              "description": "The limit's current period end time. At this time, the limit will reset.",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "frequency": {
              "description": "The limit's period will reset according to the frequency.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "daily",
                "monthly"
              ]
            },
            "type": {
              "description": "The limit can be on `money` or `count` of transactions.\nIf `money` is chosen, the currency is the report currency.\n",
              "type": "string",
              "readOnly": true,
              "enum": [
                "count",
                "money"
              ]
            },
            "cap": {
              "description": "The limit's value cap is the maximum desired value.\nIf type is money, the currency is the report currency.\nThe cap only applies to approved transactions of type `authorize` or `sale`.\n",
              "type": "integer",
              "example": 1000
            },
            "usage": {
              "description": "The limit's actual usage during this period.",
              "type": "integer",
              "example": 375,
              "readOnly": true
            },
            "createdTime": {
              "description": "Gateway account limit created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Gateway account limit updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/SelfLink"
              }
            }
          }
        },
        "GatewayAccountLimitLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "gatewayAccountLimit"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "KycDocumentLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "kycDocument"
              ]
            }
          },
          "required": [
            "rel"
          ]
        }
      },
      "parameters": {
        "organizationId": {
          "name": "Organization-Id",
          "in": "header",
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used).",
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "required": false
        },
        "collectionLimit": {
          "name": "limit",
          "in": "query",
          "description": "The collection items limit.",
          "schema": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1000
          }
        },
        "collectionOffset": {
          "name": "offset",
          "in": "query",
          "description": "The collection items offset.",
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        "resourceId": {
          "name": "id",
          "in": "path",
          "description": "The resource identifier string.",
          "required": true,
          "schema": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[@~\\-\\.\\w]+$"
          }
        },
        "collectionFilter": {
          "name": "filter",
          "in": "query",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n",
          "schema": {
            "type": "string"
          }
        },
        "collectionQuery": {
          "name": "q",
          "in": "query",
          "description": "The partial search of the text fields.",
          "schema": {
            "type": "string"
          }
        },
        "collectionExpand": {
          "name": "expand",
          "in": "query",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n",
          "schema": {
            "type": "string"
          }
        },
        "collectionFields": {
          "name": "fields",
          "in": "query",
          "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned.",
          "schema": {
            "type": "string"
          }
        },
        "collectionSort": {
          "name": "sort",
          "in": "query",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
          "style": "form",
          "explode": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "customFieldResource": {
          "name": "resource",
          "in": "path",
          "description": "The resource type string.",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "customers",
              "payment-instruments",
              "subscriptions",
              "transactions",
              "websites",
              "products",
              "plans",
              "bump-offers"
            ]
          }
        },
        "imageSize": {
          "name": "imageSize",
          "in": "query",
          "description": "Resize image to specified size. Supports any sizes from 10x10 to 2000x2000 (format `{width}x{height}`). The image will be returned in the original size if the value is invalid. This parameter will be ignored for non-image files.",
          "schema": {
            "type": "string",
            "example": "700x700",
            "pattern": "^[1-9]{1}[0-9]{1,3}x[1-9]{1}[0-9]{1,3}$"
          }
        },
        "mediaTypeJsonPdf": {
          "name": "Accept",
          "in": "header",
          "description": "The response media type.",
          "schema": {
            "type": "string",
            "enum": [
              "application/json",
              "application/pdf"
            ],
            "default": "application/json"
          }
        },
        "subscriptionExpand": {
          "name": "expand",
          "in": "query",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nTo expand multiple objects, it accepts a comma-separated list of objects (example: `expand=recentInvoice,initialInvoice`).\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n",
          "schema": {
            "type": "string"
          }
        },
        "tag": {
          "name": "tag",
          "in": "path",
          "description": "The tag name.",
          "required": true,
          "schema": {
            "type": "string",
            "pattern": "^[@~\\-\\.\\w\\s]+$"
          }
        },
        "customerId": {
          "name": "customerId",
          "in": "path",
          "description": "The customer identifier string.",
          "required": true,
          "schema": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[@~\\-\\.\\w]+$"
          }
        }
      },
      "headers": {
        "Rate-Limit-Limit": {
          "description": "The number of allowed requests in the current period.",
          "schema": {
            "type": "integer"
          }
        },
        "Rate-Limit-Remaining": {
          "description": "The number of remaining requests in the current period.",
          "schema": {
            "type": "integer"
          }
        },
        "Rate-Limit-Reset": {
          "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset.\n",
          "schema": {
            "type": "string"
          }
        },
        "Pagination-Total": {
          "description": "Total items count.",
          "schema": {
            "type": "integer"
          }
        },
        "Pagination-Limit": {
          "description": "Items per page limit.",
          "schema": {
            "type": "integer"
          }
        },
        "Pagination-Offset": {
          "description": "Pagination offset.",
          "schema": {
            "type": "integer"
          }
        },
        "Location": {
          "description": "The location of the related resource.",
          "schema": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "responses": {
        "Unauthorized": {
          "description": "Unauthorized access, invalid credentials was used.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "Forbidden": {
          "description": "Access forbidden.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "ValidationError": {
          "description": "Invalid data was sent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvalidError"
              }
            }
          }
        },
        "NotFound": {
          "description": "Resource was not found.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "Conflict": {
          "description": "Conflict.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "Customer": {
          "description": "Customer.",
          "headers": {
            "Rate-Limit-Limit": {
              "$ref": "#/components/headers/Rate-Limit-Limit"
            },
            "Rate-Limit-Remaining": {
              "$ref": "#/components/headers/Rate-Limit-Remaining"
            },
            "Rate-Limit-Reset": {
              "$ref": "#/components/headers/Rate-Limit-Reset"
            }
          },
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          }
        },
        "Found": {
          "description": "Resource was moved.",
          "headers": {
            "Location": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      },
      "requestBodies": {
        "Attachment": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "description": "Attachment resource.",
          "required": true
        },
        "Blocklist": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blocklist"
              }
            }
          },
          "description": "Blocklist resource.",
          "required": true
        },
        "Coupon": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Coupon"
              }
            }
          },
          "description": "Coupon resource.",
          "required": true
        },
        "Credential": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credential"
              }
            }
          },
          "description": "Credential resource.",
          "required": true
        },
        "Customer": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "description": "Customer resource.",
          "required": true
        },
        "Dispute": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dispute"
              }
            }
          },
          "description": "Dispute resource.",
          "required": true
        },
        "Invoice": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "description": "Invoice resource.",
          "required": true
        },
        "PostPaymentInstrument": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PaymentInstrumentCreateToken"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentCardCreatePlain"
                  },
                  {
                    "$ref": "#/components/schemas/BankAccountCreatePlain"
                  },
                  {
                    "$ref": "#/components/schemas/PayPalAccount"
                  }
                ]
              }
            }
          },
          "description": "PaymentInstrument resource.",
          "required": true
        },
        "PatchPaymentInstrument": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentInstrumentUpdateToken"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentCardUpdatePlain"
                  },
                  {
                    "$ref": "#/components/schemas/BankAccountUpdatePlain"
                  }
                ]
              }
            }
          },
          "description": "PaymentInstrument resource.",
          "required": true
        },
        "Plan": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plan"
              }
            }
          },
          "description": "Plan resource.",
          "required": true
        },
        "Product": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "description": "Product resource.",
          "required": true
        },
        "Subscription": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "description": "Order resource.",
          "required": true
        },
        "SubscriptionCancellation": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCancellation"
              }
            }
          },
          "description": "Cancellation resource.",
          "required": true
        },
        "Tag": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "description": "Tag resource.",
          "required": true
        },
        "TransactionRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              }
            }
          },
          "description": "Transaction resource.",
          "required": true
        },
        "PatchTransactionRequest": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customFields": {
                    "$ref": "#/components/schemas/ResourceCustomFields"
                  }
                }
              }
            }
          },
          "description": "Use the patch transaction request to modify custom fields.",
          "required": true
        },
        "PayoutRequest": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutRequest"
              }
            }
          },
          "description": "Transaction resource.",
          "required": true
        },
        "Customer-2": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customerId": {
                    "description": "The customer ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/CustomerLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Customer webhook request body resource."
        },
        "MergedCustomer": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targetCustomerId": {
                    "description": "The ID of the customer containing the merged data.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "duplicatedCustomer": {
                    "$ref": "#/components/schemas/Customer"
                  },
                  "_embedded": {
                    "type": "object",
                    "description": "Customer object.",
                    "properties": {
                      "targetCustomer": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/CustomerLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Merged customer webhook request body resource."
        },
        "Dispute-2": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "disputeId": {
                    "description": "The dispute ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "dispute": {
                        "$ref": "#/components/schemas/Dispute"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/DisputeLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Dispute webhook request body resource."
        },
        "ExperianCheckPerformed": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customerId": {
                    "description": "The ID of the checked customer.",
                    "type": "string"
                  },
                  "outcome": {
                    "description": "The check decision where `1` - record matches, `0` - no matches found, `-1` - record mismatches.",
                    "type": "integer",
                    "enum": [
                      -1,
                      0,
                      1
                    ],
                    "example": 1
                  },
                  "reason": {
                    "description": "The text representation of the outcome.",
                    "type": "string",
                    "example": "Individual has a 90 percent or greater match to forename surname premise postcode with ID verified and DOB"
                  },
                  "errorCode": {
                    "description": "Error code produced by the Experian system.",
                    "type": "string",
                    "example": "001"
                  },
                  "errorMessage": {
                    "description": "Error message produced by the Experian system.",
                    "type": "string",
                    "example": "Authentication Error: Bad Username or Password"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "description": "Customer object.",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/Customer"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/CustomerLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Experian check performed webhook request body resource."
        },
        "GatewayAccount": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gatewayAccountId": {
                    "description": "The gateway account ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "gatewayAccount": {
                        "$ref": "#/components/schemas/GatewayAccount"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/GatewayAccountLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Gateway account limit was reached body resource."
        },
        "GatewayAccountAndGatewayAccountLimit": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "gatewayAccountId": {
                    "description": "The gateway account ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "gatewayAccount": {
                        "$ref": "#/components/schemas/GatewayAccount"
                      },
                      "gatewayAccountLimit": {
                        "$ref": "#/components/schemas/GatewayAccountLimit"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 2,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/GatewayAccountLink"
                        },
                        {
                          "$ref": "#/components/schemas/GatewayAccountLimitLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Gateway account limit was reached body resource."
        },
        "Transaction": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transactionId": {
                    "description": "The transaction ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "transaction": {
                        "$ref": "#/components/schemas/Transaction"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/TransactionLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Transaction webhook request body resource."
        },
        "Invoice-2": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "invoiceId": {
                    "description": "The invoice ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/InvoiceLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Invoice webhook request body resource."
        },
        "KycDocument": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customerId": {
                    "description": "The customer ID.",
                    "type": "string"
                  },
                  "kycDocumentId": {
                    "description": "The KYC document ID.",
                    "type": "string"
                  },
                  "fileId": {
                    "description": "The file ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "customer": {
                        "$ref": "#/components/schemas/Customer"
                      },
                      "kycDocument": {
                        "$ref": "#/components/schemas/KycDocument"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 3,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/CustomerLink"
                        },
                        {
                          "$ref": "#/components/schemas/FileLink"
                        },
                        {
                          "$ref": "#/components/schemas/KycDocumentLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "KYC document webhook request body resource."
        },
        "Subscription-2": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subscriptionId": {
                    "description": "The order ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/SubscriptionLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Order webhook request body resource."
        },
        "PaymentCard": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "paymentCardId": {
                    "description": "The payment card ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "paymentCard": {
                        "$ref": "#/components/schemas/PaymentCard"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 1,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/PaymentCardLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Payment card webhook request body resource."
        },
        "InvoiceAndSubscription": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subscriptionId": {
                    "description": "The order ID.",
                    "type": "string"
                  },
                  "invoiceId": {
                    "description": "The invoice ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "$ref": "#/components/schemas/Subscription"
                      },
                      "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 2,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/SubscriptionLink"
                        },
                        {
                          "$ref": "#/components/schemas/InvoiceLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Invoice and Order webhook request body resource."
        },
        "InvoiceAndTransaction": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transactionId": {
                    "description": "The transaction ID.",
                    "type": "string"
                  },
                  "invoiceId": {
                    "description": "The invoice ID.",
                    "type": "string"
                  },
                  "eventType": {
                    "$ref": "#/components/schemas/GlobalWebhookEventType"
                  },
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "transaction": {
                        "$ref": "#/components/schemas/Transaction"
                      },
                      "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  },
                  "_links": {
                    "type": "array",
                    "description": "The links related to resource.",
                    "minItems": 2,
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/TransactionLink"
                        },
                        {
                          "$ref": "#/components/schemas/InvoiceLink"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "Invoice and Transaction webhook request body resource."
        }
      }
    },
    "x-webhooks": {
      "aml-list-possibly-matched": {
        "post": {
          "summary": "AML list possibly matched",
          "operationId": "aml-list-possibly-matched",
          "tags": [
            "AML"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Customer-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "customer-created": {
        "post": {
          "summary": "Customer created",
          "operationId": "customer-created",
          "tags": [
            "Customers"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Customer-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "customer-merged": {
        "post": {
          "summary": "Customer merged",
          "operationId": "customer-merged",
          "tags": [
            "Customers"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/MergedCustomer"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "customer-one-time-password-requested": {
        "post": {
          "summary": "Customer one-time-password requested",
          "operationId": "customer-one-time-password-requested",
          "tags": [
            "Customers"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Customer-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "customer-updated": {
        "post": {
          "summary": "Customer updated",
          "operationId": "customer-updated",
          "tags": [
            "Customers"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Customer-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "dispute-created": {
        "post": {
          "summary": "Dispute created",
          "operationId": "dispute-created",
          "tags": [
            "Disputes"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Dispute-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "experian-check-performed": {
        "post": {
          "summary": "Experian check performed",
          "operationId": "experian-check-performed",
          "tags": [
            "Customers"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/ExperianCheckPerformed"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "gateway-account-downtime-ended": {
        "post": {
          "summary": "Gateway account downtime ended",
          "operationId": "gateway-account-downtime-ended",
          "tags": [
            "Gateway Accounts"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/GatewayAccount"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "gateway-account-downtime-started": {
        "post": {
          "summary": "Gateway account downtime started",
          "operationId": "gateway-account-downtime-started",
          "tags": [
            "Gateway Accounts"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/GatewayAccount"
          },
          "responses": {
            "2XX": {
              "description": "Return any 2XX status to indicate that the data was received successfully."
            }
          }
        }
      },
      "gateway-account-limit-reached": {
        "post": {
          "summary": "Gateway account limit reached",
          "operationId": "gateway-account-limit-reached",
          "tags": [
            "Gateway Accounts"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/GatewayAccountAndGatewayAccountLimit"
          },
          "responses": {
            "2XX": {
              "description": "Return any 2XX status to indicate that the data was received successfully."
            }
          }
        }
      },
      "gateway-account-requested": {
        "post": {
          "summary": "Gateway account requested",
          "operationId": "gateway-account-requested",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-abandoned": {
        "post": {
          "summary": "Invoice abandoned",
          "operationId": "invoice-abandoned",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-created": {
        "post": {
          "summary": "Invoice created",
          "operationId": "invoice-created",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-issued": {
        "post": {
          "summary": "Invoice issued",
          "operationId": "invoice-issued",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-modified": {
        "post": {
          "summary": "Invoice modified",
          "operationId": "invoice-modified",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-paid": {
        "post": {
          "summary": "Invoice paid",
          "operationId": "invoice-paid",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-past-due": {
        "post": {
          "summary": "Invoice past due",
          "operationId": "invoice-past-due",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-past-due-reminder": {
        "post": {
          "summary": "Invoice past due reminder",
          "operationId": "invoice-past-due-reminder",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-reissued": {
        "post": {
          "summary": "Invoice reissued",
          "operationId": "invoice-reissued",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "invoice-voided": {
        "post": {
          "summary": "Invoice voided",
          "operationId": "invoice-voided",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Invoice-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "kyc-document-accepted": {
        "post": {
          "summary": "KYC document accepted",
          "operationId": "kyc-document-accepted",
          "tags": [
            "KYC Documents"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/KycDocument"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "kyc-document-modified": {
        "post": {
          "summary": "KYC document modified",
          "operationId": "kyc-document-modified",
          "tags": [
            "KYC Documents"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/KycDocument"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "kyc-document-rejected": {
        "post": {
          "summary": "KYC document rejected",
          "operationId": "kyc-document-rejected",
          "tags": [
            "KYC Documents"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/KycDocument"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "kyc-document-reviewed": {
        "post": {
          "summary": "KYC document reviewed",
          "operationId": "kyc-document-reviewed",
          "tags": [
            "KYC Documents"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/KycDocument"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "nsf-response-received": {
        "post": {
          "summary": "NSF response received",
          "operationId": "nsf-response-received",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "offsite-payment-completed": {
        "post": {
          "summary": "Offsite payment completed",
          "operationId": "offsite-payment-completed",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "order-completed": {
        "post": {
          "summary": "Order completed",
          "operationId": "order-completed",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "payment-card-created": {
        "post": {
          "summary": "Payment card created",
          "operationId": "payment-card-created",
          "tags": [
            "Payment Cards"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/PaymentCard"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "payment-card-expiration-reminder": {
        "post": {
          "summary": "Payment card expiration reminder",
          "operationId": "payment-card-expiration-reminder",
          "tags": [
            "Payment Cards"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/PaymentCard"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "payment-card-expired": {
        "post": {
          "summary": "Payment card expired",
          "operationId": "payment-card-expired",
          "tags": [
            "Payment Cards"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/PaymentCard"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "renewal-invoice-issued": {
        "post": {
          "summary": "Renewal invoice issued",
          "operationId": "renewal-invoice-issued",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/InvoiceAndSubscription"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "renewal-invoice-payment-canceled": {
        "post": {
          "summary": "Renewal invoice payment canceled",
          "operationId": "renewal-invoice-payment-canceled",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/InvoiceAndTransaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "renewal-invoice-payment-declined": {
        "post": {
          "summary": "Renewal invoice payment declined",
          "operationId": "renewal-invoice-payment-declined",
          "tags": [
            "Invoices"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/InvoiceAndTransaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "risk-score-changed": {
        "post": {
          "summary": "Risk score changed",
          "operationId": "risk-score-changed",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-activated": {
        "post": {
          "summary": "Order activated",
          "operationId": "subscription-activated",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-canceled": {
        "post": {
          "summary": "Subscription order canceled",
          "operationId": "subscription-canceled",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-modified": {
        "post": {
          "summary": "Order modified",
          "operationId": "subscription-modified",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-reactivated": {
        "post": {
          "summary": "Subscription reactivated",
          "operationId": "subscription-reactivated",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-renewal-reminder": {
        "post": {
          "summary": "Subscription renewal reminder",
          "operationId": "subscription-renewal-reminder",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-renewed": {
        "post": {
          "summary": "Subscription renewed",
          "operationId": "subscription-renewed",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-trial-converted": {
        "post": {
          "summary": "Subscription trial converted",
          "operationId": "subscription-trial-converted",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-trial-end-reminder": {
        "post": {
          "summary": "Subscription trial end reminder",
          "operationId": "subscription-trial-end-reminder",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-trial-ended": {
        "post": {
          "summary": "Subscription trial ended",
          "operationId": "subscription-trial-ended",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "subscription-trial-end-changed": {
        "post": {
          "summary": "Subscription trial end changed",
          "operationId": "subscription-trial-end-changed",
          "tags": [
            "Orders"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Subscription-2"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "transaction-amount-discrepancy-found": {
        "post": {
          "summary": "Transaction amount discrepancy found",
          "operationId": "transaction-amount-discrepancy-found",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "transaction-declined": {
        "post": {
          "summary": "Transaction declined",
          "operationId": "transaction-declined",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "transaction-discrepancy-found": {
        "post": {
          "summary": "Transaction discrepancy found",
          "operationId": "transaction-discrepancy-found",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "transaction-process-requested": {
        "post": {
          "summary": "Transaction process requested",
          "operationId": "transaction-process-requested",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "transaction-processed": {
        "post": {
          "summary": "Transaction processed",
          "operationId": "transaction-processed",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "transaction-timeout-resolved": {
        "post": {
          "summary": "Transaction timeout resolved",
          "operationId": "transaction-timeout-resolved",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      },
      "waiting-gateway-transaction-completed": {
        "post": {
          "summary": "Waiting gateway transaction completed",
          "operationId": "waiting-gateway-transaction-completed",
          "tags": [
            "Transactions"
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/Transaction"
          },
          "responses": {
            "2xx": {
              "description": "Return any 2xx status to indicate that the data was received successfully."
            }
          }
        }
      }
    }
  }
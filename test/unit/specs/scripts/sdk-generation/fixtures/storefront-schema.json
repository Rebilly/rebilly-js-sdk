{
    "openapi": "3.0.0",
    "info": {
      "version": "0.1",
      "title": "Rebilly Storefront REST API",
      "contact": {
        "name": "Rebilly API Support",
        "url": "https://www.rebilly.com/contact/",
        "email": "integrations@rebilly.com"
      },
      "license": {
        "name": "Rebilly",
        "url": "https://www.rebilly.com/api-license/"
      },
      "termsOfService": "https://www.rebilly.com/terms-of-use/",
      "x-logo": {
        "url": "https://rebilly-core.redoc.ly/rb_apiLogo.svg",
        "backgroundColor": "#0033A0"
      },
      "description": "# Introduction\nThe Rebilly Storefront API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body. You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's Storefront API.\n"
    },
    "tags": [
      {
        "name": "Account management"
      },
      {
        "name": "Account"
      },
      {
        "name": "Authentication"
      },
      {
        "name": "Checkout Forms"
      },
      {
        "name": "Email verification"
      },
      {
        "name": "Password reset"
      },
      {
        "name": "KYC Document"
      },
      {
        "name": "Payments"
      },
      {
        "name": "Payment Instrument"
      },
      {
        "name": "Purchase"
      },
      {
        "name": "Transaction"
      },
      {
        "name": "Orders"
      },
      {
        "name": "Invoice"
      },
      {
        "name": "Product"
      },
      {
        "name": "Plan"
      },
      {
        "name": "System"
      },
      {
        "name": "Website"
      }
    ],
    "x-tagGroups": [
      {
        "name": "Account management",
        "tags": [
          "Account",
          "Authentication",
          "Email verification",
          "Password reset",
          "KYC Document"
        ]
      },
      {
        "name": "Payments",
        "tags": [
          "Payment Instrument",
          "Transaction"
        ]
      },
      {
        "name": "Orders",
        "tags": [
          "Checkout Forms",
          "Purchase",
          "Invoice",
          "Product",
          "Plan"
        ]
      },
      {
        "name": "System",
        "tags": [
          "Website"
        ]
      }
    ],
    "servers": [
      {
        "url": "https://api-sandbox.rebilly.com/storefront",
        "description": "Sandbox Server."
      },
      {
        "url": "https://api.rebilly.com/storefront",
        "description": "Live Server."
      }
    ],
    "components": {
      "securitySchemes": {
        "CustomerJWT": {
          "description": "You can create a JSON Web Token (JWT) via [Storefront Authentication](https://storefront-api-docs.rebilly.com/#operation/StorefrontPostLogin).\nUsage format: `Bearer <JWT>`.\n",
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        },
        "PublishableApiKey": {
          "description": "Only for the Tokens resource.\nYou can create a Publishable API Key via our [API Keys resource](https://user-api-docs.rebilly.com/#tag/API-Keys), by specifying the type as `publishable`.\n",
          "name": "Authorization",
          "type": "apiKey",
          "in": "header"
        }
      },
      "schemas": {
        "ResourceId": {
          "type": "string",
          "description": "The resource ID. Defaults to UUID v4.",
          "maxLength": 50,
          "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
        },
        "ContactPhoneNumbers": {
          "description": "The list of phone numbers.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "value"
            ],
            "properties": {
              "label": {
                "description": "The phone label.",
                "type": "string",
                "maxLength": 45,
                "example": "main"
              },
              "value": {
                "description": "The phone value.",
                "type": "string",
                "maxLength": 50,
                "example": "512-710-1640"
              },
              "primary": {
                "description": "True if phone is primary.",
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "ContactEmails": {
          "description": "The list of emails.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "label",
              "value"
            ],
            "properties": {
              "label": {
                "description": "The email label.",
                "type": "string",
                "maxLength": 45,
                "example": "main"
              },
              "value": {
                "description": "The email value.",
                "type": "string",
                "format": "email",
                "maxLength": 255,
                "example": "rebilly@example.com"
              },
              "primary": {
                "description": "True if email is primary.",
                "type": "boolean",
                "example": true
              }
            }
          }
        },
        "ContactObject": {
          "type": "object",
          "properties": {
            "firstName": {
              "description": "The contact first name.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 45,
              "example": "Benjamin",
              "nullable": true
            },
            "lastName": {
              "description": "The contact last name.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 45,
              "example": "Franklin",
              "nullable": true
            },
            "organization": {
              "description": "The contact organization.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 255,
              "nullable": true,
              "example": null
            },
            "address": {
              "description": "The contact street address.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\/\\pL,.#;:()']+$",
              "maxLength": 60,
              "example": "36 Craven St",
              "nullable": true
            },
            "address2": {
              "description": "The contact street address (second line).",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\/\\pL,.#;:()']+$",
              "maxLength": 60,
              "nullable": true
            },
            "city": {
              "description": "The contact city.",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\pL,.']+$",
              "maxLength": 45,
              "nullable": true,
              "example": "London"
            },
            "region": {
              "description": "The contact region (state).",
              "type": "string",
              "pattern": "^[\\w\\s\\-\\/\\pL,.#;:()']+$",
              "maxLength": 45,
              "nullable": true,
              "example": "London"
            },
            "country": {
              "description": "The contact country ISO Alpha-2 code.",
              "type": "string",
              "pattern": "^[A-Z]{2}$",
              "maxLength": 2,
              "nullable": true,
              "example": "GB"
            },
            "postalCode": {
              "description": "The contact postal code.",
              "type": "string",
              "pattern": "^[\\w\\s\\-]+$",
              "maxLength": 10,
              "nullable": true,
              "example": "WC2N 5NF"
            },
            "phoneNumbers": {
              "$ref": "#/components/schemas/ContactPhoneNumbers"
            },
            "emails": {
              "$ref": "#/components/schemas/ContactEmails"
            },
            "hash": {
              "description": "A hash that can be used to compare multiple contacts for identical attribute values.",
              "type": "string",
              "maxLength": 40,
              "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
              "readOnly": true
            }
          }
        },
        "InstrumentReference": {
          "type": "object",
          "title": "Instrument",
          "required": [
            "method",
            "paymentInstrumentId"
          ],
          "properties": {
            "method": {
              "type": "string",
              "enum": [
                "payment-card",
                "ach",
                "paypal"
              ]
            },
            "paymentInstrumentId": {
              "description": "The payment instrument ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "PaymentMethod": {
          "type": "string",
          "description": "The payment method.",
          "enum": [
            "payment-card",
            "ach",
            "cash",
            "check",
            "paypal",
            "AdvCash",
            "Airpay",
            "Alfa-click",
            "Alipay",
            "APAR",
            "Apple Pay",
            "AstroPay Card",
            "AstroPay-GO",
            "bank-transfer",
            "bank-transfer-2",
            "bank-transfer-3",
            "bank-transfer-4",
            "bank-transfer-5",
            "bank-transfer-6",
            "bank-transfer-7",
            "bank-transfer-8",
            "bank-transfer-9",
            "Beeline",
            "Belfius-direct-net",
            "bitcoin",
            "Boleto",
            "Boleto-2",
            "Boleto-3",
            "cash-deposit",
            "CASHlib",
            "CashToCode",
            "CCAvenue",
            "China UnionPay",
            "CODVoucher",
            "Conekta-oxxo",
            "Conekta-spei",
            "cryptocurrency",
            "Cupon-de-pagos",
            "domestic-cards",
            "echeck",
            "ecoPayz",
            "ecoVoucher",
            "EPS",
            "ePay.bg",
            "Ethereum",
            "e-wallet",
            "eZeeWallet",
            "Flexepin",
            "Giropay",
            "Google Pay",
            "Gpaysafe",
            "iDebit",
            "iDEAL",
            "ING-homepay",
            "INOVAPAY-pin",
            "INOVAPAY-wallet",
            "InstaDebit",
            "instant-bank-transfer",
            "Interac-online",
            "Interac-eTransfer",
            "Interac-express-connect",
            "Interac",
            "invoice",
            "Jeton",
            "jpay",
            "Khelocard",
            "Klarna",
            "Litecoin",
            "LPG-online",
            "LPG-payment-card",
            "Megafon",
            "miscellaneous",
            "Bancontact",
            "MTS",
            "MuchBetter",
            "MyFatoorah",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "Nordea-Solo",
            "OchaPay",
            "online-bank-transfer",
            "Onlineueberweisen",
            "oriental-wallet",
            "OXXO",
            "Pagsmile-lottery",
            "Pagsmile-deposit-express",
            "PayCash",
            "Payeer",
            "Paysafecard",
            "PayTabs",
            "Pay4Fun",
            "Paymero",
            "Paymero-QR",
            "PayULatam",
            "Perfect-money",
            "Piastrix",
            "PIX",
            "PinPay",
            "phone",
            "PhonePe",
            "POLi",
            "Przelewy24",
            "QIWI",
            "QQPay",
            "Resurs",
            "SEPA",
            "Siirto",
            "Skrill",
            "Skrill Rapid Transfer",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "swift-dbt",
            "Tele2",
            "Terminaly-RF",
            "Tether",
            "ToditoCash-card",
            "Trustly",
            "TWINT",
            "UniCrypt",
            "UPayCard",
            "UPI",
            "VCreditos",
            "voucher",
            "voucher-2",
            "voucher-3",
            "voucher-4",
            "Webmoney",
            "Webpay",
            "Webpay-2",
            "Webpay Card",
            "WeChat Pay",
            "Yandex-money",
            "Zotapay",
            "Zimpler"
          ]
        },
        "MethodReference": {
          "type": "object",
          "title": "Method only",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        },
        "PaymentInstrumentReference": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/InstrumentReference"
            },
            {
              "$ref": "#/components/schemas/MethodReference"
            }
          ]
        },
        "ResourceCustomFields": {
          "description": "Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats).\n",
          "type": "object",
          "default": {},
          "example": {
            "foo": "bar"
          }
        },
        "ServerTimestamp": {
          "type": "string",
          "description": "Read-only timestamp, automatically assigned on back-end.",
          "format": "date-time",
          "readOnly": true
        },
        "Link": {
          "type": "object",
          "properties": {
            "href": {
              "description": "The link URL.",
              "type": "string"
            }
          },
          "required": [
            "href"
          ]
        },
        "SelfLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "self"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "Account": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The account ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "The website identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "username": {
              "type": "string",
              "description": "Username.",
              "readOnly": true
            },
            "primaryAddress": {
              "$ref": "#/components/schemas/ContactObject"
            },
            "paymentToken": {
              "type": "string",
              "writeOnly": true,
              "description": "A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n"
            },
            "defaultPaymentInstrument": {
              "$ref": "#/components/schemas/PaymentInstrumentReference"
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "createdTime": {
              "description": "The customer created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The customer updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  }
                ]
              }
            }
          }
        },
        "BlankProblem": {
          "description": "The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": true,
          "properties": {
            "status": {
              "type": "integer",
              "description": "The HTTP status code.",
              "minimum": 400,
              "maximum": 599
            },
            "title": {
              "type": "string",
              "description": "A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
            }
          }
        },
        "DocumentedProblem": {
          "type": "object",
          "allOf": [
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".",
                  "format": "uri"
                }
              }
            },
            {
              "$ref": "#/components/schemas/BlankProblem"
            }
          ]
        },
        "DetailedProblem": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/BlankProblem"
            },
            {
              "properties": {
                "detail": {
                  "type": "string",
                  "description": "A human-readable explanation specific to this occurrence of the problem."
                }
              }
            }
          ]
        },
        "Problem": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/DocumentedProblem"
            },
            {
              "$ref": "#/components/schemas/DetailedProblem"
            }
          ]
        },
        "Error": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Problem"
            },
            {
              "properties": {
                "error": {
                  "deprecated": true,
                  "type": "string"
                }
              }
            }
          ]
        },
        "ValidationErrorExtensions": {
          "type": "object",
          "properties": {
            "invalidFields": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "description": "The field name. Dot notation is used for nested object field names."
                  },
                  "message": {
                    "type": "string"
                  }
                }
              },
              "example": [
                {
                  "field": "field1",
                  "message": "field1 is invalid"
                },
                {
                  "field": "subObject.field2",
                  "message": "field2 is invalid"
                },
                {
                  "field": "subObject.field2",
                  "message": "another error in the field2"
                }
              ]
            }
          }
        },
        "InvalidError": {
          "description": "Invalid data was sent.",
          "allOf": [
            {
              "$ref": "#/components/schemas/Error"
            },
            {
              "$ref": "#/components/schemas/ValidationErrorExtensions"
            }
          ]
        },
        "CheckoutFormFixedPlan": {
          "title": "Fixed quantity",
          "type": "object",
          "required": [
            "planId",
            "type",
            "quantity"
          ],
          "properties": {
            "planId": {
              "description": "The plan identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "If `variable` customers will be able to choose the quantity.",
              "type": "string",
              "enum": [
                "fixed"
              ]
            },
            "quantity": {
              "description": "The quantity.",
              "type": "integer",
              "minimum": 1
            }
          }
        },
        "CheckoutFormVariablePlan": {
          "title": "Variable quantity",
          "type": "object",
          "required": [
            "planId",
            "type",
            "quantity"
          ],
          "properties": {
            "planId": {
              "description": "The plan identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "If `variable` customers will be able to choose the quantity.",
              "type": "string",
              "enum": [
                "variable"
              ]
            },
            "quantity": {
              "description": "The default quantity.",
              "type": "integer"
            },
            "minimum": {
              "description": "The minimum quantity.",
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "multipleOf": {
              "description": "The step quantity.",
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "maximum": {
              "description": "The maximum quantity.",
              "type": "integer",
              "minimum": 1,
              "default": 100
            }
          }
        },
        "CheckoutFormPlan": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CheckoutFormFixedPlan"
            },
            {
              "$ref": "#/components/schemas/CheckoutFormVariablePlan"
            }
          ]
        },
        "CheckoutFormPlans": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CheckoutFormPlan"
          }
        },
        "CommonCheckoutForm": {
          "type": "object",
          "required": [
            "websiteId",
            "plans"
          ],
          "properties": {
            "id": {
              "description": "The checkout form identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "Checkout form website ID.",
              "type": "string",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "plans": {
              "description": "The list of plans that would be applied to customer order by default.",
              "minItems": 1,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CheckoutFormPlans"
                }
              ]
            },
            "addonPlans": {
              "description": "The list of independent addons.\nCustomer will be able to select whether to add the plans from the list or not.",
              "default": [],
              "allOf": [
                {
                  "$ref": "#/components/schemas/CheckoutFormPlans"
                }
              ]
            },
            "bumpPlans": {
              "description": "The list of plans that can be used instead of ones specified in `plans`.\nCustomer will be able to select whether to purchase bump plans or the regular ones.",
              "default": [],
              "allOf": [
                {
                  "$ref": "#/components/schemas/CheckoutFormPlans"
                }
              ]
            },
            "accountsEnabled": {
              "description": "If `true` customer will be able to sign-up and sign-in using the form.",
              "type": "boolean",
              "default": false
            },
            "couponsEnabled": {
              "description": "If `true` customer will be able to use coupons on the form.",
              "type": "boolean",
              "default": false
            },
            "purchaseLimit": {
              "description": "If the purchase limit is set – every purchase will decrease it. Zero purchase limit will make form inactive.",
              "type": "integer",
              "minimum": 0,
              "nullable": true,
              "default": null
            },
            "paymentMethods": {
              "description": "The list of available payment methods. Only payment methods with at least one active gateway account are allowed.\nIf not specified all available payment methods will be displayed.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            },
            "customization": {
              "description": "Visual customization options for the form.",
              "type": "object",
              "properties": {
                "logoId": {
                  "description": "Linked file object ID.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResourceId"
                    }
                  ]
                },
                "summary": {
                  "description": "Summary text.",
                  "type": "string"
                },
                "buttonText": {
                  "description": "You can use placeholder `{{amount}}` to substitute with the form total.",
                  "type": "string",
                  "default": "Pay {{amount}}"
                },
                "colors": {
                  "description": "Control the primary color used in the form and button text.",
                  "type": "object",
                  "properties": {
                    "primary": {
                      "description": "Primary color for the form in hexadecimal format.",
                      "type": "string",
                      "maxLength": 6,
                      "default": "0044d4"
                    },
                    "buttonText": {
                      "description": "Button text color for the form in hexadecimal format.",
                      "type": "string",
                      "maxLength": 6,
                      "default": "ffffff"
                    }
                  }
                },
                "links": {
                  "description": "Various urls that appear on the form.",
                  "type": "object",
                  "properties": {
                    "refundPolicy": {
                      "description": "The url to the website refund policy.",
                      "type": "string",
                      "format": "url"
                    },
                    "privacyPolicy": {
                      "description": "The url to the website privacy policy.",
                      "type": "string",
                      "format": "url"
                    },
                    "termsOfService": {
                      "description": "The url to the website terms of service.",
                      "type": "string",
                      "format": "url"
                    }
                  }
                },
                "tracking": {
                  "description": "Various tracking system identifier strings.",
                  "type": "object",
                  "properties": {
                    "googleAnalytics": {
                      "description": "The Google Analytics tracking identifier string.",
                      "type": "string",
                      "example": "UA-XXXXX-YY"
                    },
                    "googleTagManager": {
                      "description": "The Google Tag Manager tracking identifier string.",
                      "type": "string",
                      "example": "GTM-XXXXX"
                    },
                    "gtagJs": {
                      "description": "The Google Analytics tracking identifier string for Google's Global Site Tag (gtag.js) service.",
                      "type": "string",
                      "example": "UA-XXXXX-YY"
                    },
                    "facebookPixel": {
                      "description": "The Facebook Pixel tracking identifier string.",
                      "type": "string",
                      "example": 1234567890
                    },
                    "segmentAnalytics": {
                      "description": "The Segment Analytics tracking identifier string.",
                      "type": "string",
                      "example": 1234567890
                    },
                    "heapIo": {
                      "description": "The Heap.io tracking identifier string.",
                      "type": "string",
                      "example": 1234567890
                    }
                  }
                },
                "requiredAdditionalFields": {
                  "description": "The list of fields which are marked as required.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": [
                      "information.companyName",
                      "information.phoneNumber"
                    ]
                  }
                }
              }
            },
            "createdTime": {
              "description": "Checkout form created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Checkout form updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "StorefrontCheckoutForm": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonCheckoutForm"
            },
            {
              "type": "object",
              "properties": {
                "token": {
                  "description": "The session's token used for authentication.",
                  "type": "string",
                  "readOnly": true
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "CurrencyCode": {
          "type": "string",
          "description": "ISO 4217 alphabetic currency code.",
          "minLength": 3,
          "maxLength": 3,
          "example": "USD"
        },
        "ProductLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "product"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "CommonProduct": {
          "type": "object",
          "required": [
            "name"
          ],
          "description": "Products include digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation. If it is shippable,\nshipping will be calculated upon invoice generation. Pricing and\nvariations are set within Plans.\n",
          "properties": {
            "id": {
              "description": "The product ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ],
              "example": "membership"
            },
            "name": {
              "description": "The product name.",
              "type": "string",
              "maxLength": 255,
              "example": "Premium membership"
            },
            "unitLabel": {
              "description": "The unit label, such as per `seat` or per `unit`.",
              "type": "string",
              "maxLength": 50,
              "example": "seat",
              "default": "unit"
            },
            "description": {
              "description": "The product description.",
              "type": "string",
              "maxLength": 512
            },
            "requiresShipping": {
              "description": "If the product requires shipping, shipping calculations will be applied.",
              "type": "boolean",
              "example": false
            },
            "options": {
              "description": "The product options such as color, size, etc. The product options definition does\nnot include option values. Those are defined within the plans.\n",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "createdTime": {
              "description": "The product created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "The product updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "Product": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonProduct"
            },
            {
              "properties": {
                "taxCategoryId": {
                  "description": "The product's tax category identifier string.",
                  "type": "string",
                  "enum": [
                    "00000",
                    "99999",
                    "20010",
                    "40030",
                    "51020",
                    "51010",
                    "31000",
                    "30070"
                  ]
                },
                "accountingCode": {
                  "description": "The product accounting code.",
                  "type": "string",
                  "example": "4010"
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/SelfLink"
                  }
                }
              }
            }
          ]
        },
        "ProductEmbed": {
          "type": "object",
          "description": "Product object.",
          "readOnly": true,
          "properties": {
            "product": {
              "$ref": "#/components/schemas/Product"
            }
          }
        },
        "PlanPriceFormula": {
          "type": "object",
          "discriminator": {
            "propertyName": "formula",
            "mapping": {
              "fixed-fee": "#/components/schemas/fixed-fee",
              "flat-rate": "#/components/schemas/flat-rate",
              "stairstep": "#/components/schemas/stairstep",
              "tiered": "#/components/schemas/tiered",
              "volume": "#/components/schemas/volume"
            }
          },
          "required": [
            "formula"
          ],
          "properties": {
            "formula": {
              "type": "string",
              "description": "The price formula determines what algorithm is used to calculate the invoice price based on a few factors,\n- the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order)\n- the price brackets data\n\nTo determine which formula is correct, please see the price formula documentation.\n",
              "enum": [
                "fixed-fee",
                "flat-rate",
                "stairstep",
                "tiered",
                "volume"
              ]
            }
          }
        },
        "fixed-fee": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "description": "For the very simple price when it's fixed and does not depend on the quantity chosen by customer.\n\nIf the price is 0, it's free.\n",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                }
              }
            }
          ]
        },
        "flat-rate": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "description": "Flat-rate pricing is represented in a simple price per unit.\nSome examples:\n\n- $30 per unit\n- $0.10 per transaction\n- $50 per period\n\nIf the price is 0, it's free.\n",
                  "type": "number",
                  "format": "double",
                  "example": 99.95
                },
                "maxQuantity": {
                  "description": "If the value is `null`, it''s assumed to be infinite.",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          ]
        },
        "stairstep": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "brackets"
              ],
              "properties": {
                "brackets": {
                  "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"stairstep\" example:\n\nPrice total | Max quantity | Description\n------------|--------------|------------\n$5          | 1            | 1\n$13         | 5            | 2 to 5\n$30         | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.\n",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "description": "If the price is 0, it is free.",
                        "type": "number",
                        "format": "double",
                        "example": 99.95
                      },
                      "maxQuantity": {
                        "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "tiered": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "brackets"
              ],
              "properties": {
                "brackets": {
                  "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"tiered\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.\n",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "description": "If the price is 0, it is free.",
                        "type": "number",
                        "format": "double",
                        "example": 99.95
                      },
                      "maxQuantity": {
                        "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "volume": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            {
              "type": "object",
              "required": [
                "brackets"
              ],
              "properties": {
                "brackets": {
                  "description": "The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe \"volume\" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.\n",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "price": {
                        "description": "If the price is 0, it is free.",
                        "type": "number",
                        "format": "double",
                        "example": 99.95
                      },
                      "maxQuantity": {
                        "description": "If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
                        "type": "integer",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "PlanPeriod": {
          "type": "object",
          "required": [
            "unit",
            "length"
          ],
          "properties": {
            "unit": {
              "description": "The unit of time.",
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "year"
              ]
            },
            "length": {
              "description": "The length of time.",
              "type": "integer"
            }
          }
        },
        "PlanBillingTiming": {
          "type": "string",
          "default": "prepaid",
          "description": "The billing timing in relation to the service period.\nFor `prepaid` plans the customer pays when the service period starts,\nwhereas, for `postpaid` plans, the customer pays when the service period ends.\n",
          "enum": [
            "prepaid",
            "postpaid"
          ]
        },
        "CommonPlan": {
          "type": "object",
          "required": [
            "name",
            "currency",
            "productId",
            "pricing"
          ],
          "properties": {
            "id": {
              "description": "The plan ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "The plan name, displayed on invoices and receipts.",
              "type": "string"
            },
            "productId": {
              "description": "The related product ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "productOptions": {
              "type": "object",
              "description": "Name-value pairs to specify the product options.",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "color": "red",
                "size": "xxl"
              }
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "currencySign": {
              "description": "Currency sign.",
              "readOnly": true,
              "type": "string"
            },
            "pricing": {
              "$ref": "#/components/schemas/PlanPriceFormula"
            },
            "recurringInterval": {
              "description": "The service interval. For a one-time item, use `null`.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlanPeriod"
                },
                {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "description": "The number of invoices this subscription order will generate\n(if 1, it will not generate any beyond the initial order creation).\nFor example, set this property to `12`, when the `periodUnit` is month and the\n`periodDuration` is 1, for a 1 year contract billed monthly.\n",
                      "type": "integer"
                    },
                    "billingTiming": {
                      "$ref": "#/components/schemas/PlanBillingTiming"
                    }
                  }
                }
              ]
            },
            "trial": {
              "type": "object",
              "description": "The trial. Set `null` if no trial.",
              "required": [
                "price",
                "period"
              ],
              "properties": {
                "price": {
                  "description": "The price of the trial. For a free trial, use `0`.",
                  "type": "number",
                  "format": "double"
                },
                "period": {
                  "$ref": "#/components/schemas/PlanPeriod"
                }
              }
            },
            "isTrialOnly": {
              "type": "boolean",
              "description": "Whether a plan has a trial without recurring instructions.",
              "readOnly": true
            },
            "setup": {
              "type": "object",
              "description": "The setup. Set `null` if no setup.",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "description": "The price of a setup - 0 is a valid value (for free).",
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "revision": {
              "type": "integer",
              "readOnly": true,
              "description": "Increments when the plan is modified. \nCompare to materialized subscription items revision.\n"
            },
            "createdTime": {
              "description": "Plan created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Plan updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "TimeUnit": {
          "type": "string",
          "enum": [
            "second",
            "minute",
            "hour",
            "day",
            "month",
            "year"
          ]
        },
        "TimePluralUnit": {
          "type": "string",
          "enum": [
            "seconds",
            "minutes",
            "hours",
            "days",
            "months",
            "years"
          ]
        },
        "IssueTimeShiftInstruction": {
          "type": "object",
          "description": "The calculation instruction of billing time.\nThis is used in conjunction with the **service period anchor** to calculate the time the invoice is issued.\n",
          "required": [
            "chronology",
            "duration",
            "unit"
          ],
          "properties": {
            "chronology": {
              "type": "string",
              "description": "The chronology of the billing time relatively to the service period start.",
              "enum": [
                "before"
              ]
            },
            "duration": {
              "type": "integer",
              "description": "The number of the units.",
              "minimum": 1
            },
            "unit": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimeUnit"
                },
                {
                  "$ref": "#/components/schemas/TimePluralUnit"
                }
              ]
            }
          }
        },
        "DueTimeShiftInstruction": {
          "type": "object",
          "description": "The calculation instruction of due time.\nThis is used in conjunction with the **billing anchor** to calculate due time of invoice.\nThe chronology of due time shift is always **after**.\n",
          "default": {
            "duration": 1,
            "unit": "hour"
          },
          "properties": {
            "duration": {
              "type": "integer",
              "description": "The number of the units.",
              "minimum": 1
            },
            "unit": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimeUnit"
                },
                {
                  "$ref": "#/components/schemas/TimePluralUnit"
                }
              ]
            }
          },
          "required": [
            "duration",
            "unit"
          ]
        },
        "InvoiceTimeShift": {
          "type": "object",
          "description": "The invoice time shift in conjunction with `billingTiming` allows to setup different billing use cases such as:\n- Bill immediately when the service period _starts_\n- Bill immediately after the service period _ends_\n- Bill _interval of time_ before the service period _starts_\n- Bill _interval of time_ after the service period _starts_\n- Bill _interval of time_ before the service period _ends_\n- Bill _interval of time_ after the service period _ends_\nIt allows to control the billing time.\n",
          "properties": {
            "issueTimeShift": {
              "$ref": "#/components/schemas/IssueTimeShiftInstruction"
            },
            "dueTimeShift": {
              "$ref": "#/components/schemas/DueTimeShiftInstruction"
            }
          }
        },
        "Plan": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPlan"
            },
            {
              "properties": {
                "invoiceTimeShift": {
                  "description": "You can shift issue time and due time of invoices for this plan.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/InvoiceTimeShift"
                    }
                  ]
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "#/components/schemas/SelfLink"
                  }
                }
              }
            }
          ]
        },
        "PlanEmbed": {
          "type": "object",
          "description": "Plan object.",
          "readOnly": true,
          "properties": {
            "plan": {
              "$ref": "#/components/schemas/Plan"
            }
          }
        },
        "InvoiceItem": {
          "type": "object",
          "required": [
            "type",
            "unitPrice"
          ],
          "properties": {
            "id": {
              "description": "The website identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Invoice item's type.",
              "type": "string",
              "enum": [
                "debit",
                "credit"
              ]
            },
            "description": {
              "description": "Invoice item's description.",
              "type": "string"
            },
            "unitPrice": {
              "description": "Invoice item's price.",
              "type": "number",
              "format": "double"
            },
            "quantity": {
              "description": "Invoice item's quantity.",
              "type": "integer"
            },
            "price": {
              "description": "Invoice item's total price.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "productId": {
              "description": "The product's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "discountAmount": {
              "description": "Invoice item discount amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "periodStartTime": {
              "description": "Start time.",
              "type": "string",
              "format": "date-time"
            },
            "periodEndTime": {
              "description": "End time.",
              "type": "string",
              "format": "date-time"
            },
            "periodNumber": {
              "description": "Invoice item subscription order period number.",
              "type": "integer"
            },
            "createdTime": {
              "description": "Invoice item created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Invoice item updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/ProductLink"
                  }
                ]
              }
            },
            "_embedded": {
              "type": "array",
              "description": "Any embedded objects available that are requested by the `expand` querystring parameter.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ProductEmbed"
                  },
                  {
                    "$ref": "#/components/schemas/PlanEmbed"
                  }
                ]
              }
            }
          }
        },
        "InvoiceTax": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "amount": {
              "description": "Tax amount.",
              "type": "number",
              "format": "double"
            },
            "description": {
              "type": "string",
              "description": "Tax description."
            }
          }
        },
        "InvoiceDiscount": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "couponId": {
              "description": "Coupon's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "redemptionId": {
              "description": "Redemption ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "amount": {
              "description": "Total amount that was discounted by this Coupon.",
              "type": "number",
              "format": "double"
            },
            "description": {
              "type": "string",
              "description": "Discount description."
            }
          }
        },
        "CommonInvoice": {
          "type": "object",
          "required": [
            "currency",
            "websiteId"
          ],
          "properties": {
            "id": {
              "description": "The invoice ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "The website ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "invoiceNumber": {
              "description": "An auto-incrementing number based on the sequence of invoices for any particular customer.",
              "readOnly": true,
              "type": "integer"
            },
            "subscriptionId": {
              "description": "The related order's ID if available, otherwise null.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "currency": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "amount": {
              "description": "The invoice's amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "amountDue": {
              "description": "The invoice's due amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "subtotalAmount": {
              "description": "The invoice's subtotal amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "discountAmount": {
              "description": "The invoice's discounts amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "taxAmount": {
              "description": "The invoice's taxes amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "shippingAmount": {
              "description": "The invoice's shipping amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "billingAddress": {
              "description": "Invoice's billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "deliveryAddress": {
              "description": "Invoice's delivery address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "poNumber": {
              "description": "Purchase order number which will be displayed on the invoice.",
              "nullable": true,
              "example": "PO123456",
              "type": "string"
            },
            "notes": {
              "description": "Notes for the customer which will be displayed on the invoice.",
              "type": "string"
            },
            "items": {
              "type": "array",
              "description": "Invoice items array.",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/InvoiceItem"
              }
            },
            "taxes": {
              "type": "array",
              "description": "Taxes applied to this invoice.",
              "readOnly": true,
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceTax"
                  }
                ]
              }
            },
            "discounts": {
              "type": "array",
              "description": "Discounts applied.",
              "readOnly": true,
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceDiscount"
                  }
                ]
              }
            },
            "autopayScheduledTime": {
              "description": "Invoice autopay scheduled time.",
              "type": "string",
              "format": "date-time"
            },
            "autopayRetryNumber": {
              "description": "Invoice autopay retry number.",
              "readOnly": true,
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "status": {
              "type": "string",
              "description": "Invoice status.",
              "readOnly": true,
              "enum": [
                "draft",
                "unpaid",
                "paid",
                "past-due",
                "delinquent",
                "abandoned",
                "voided",
                "partially-refunded",
                "refunded",
                "disputed"
              ]
            },
            "delinquentCollectionPeriod": {
              "type": "integer",
              "description": "Delinquent collection period - difference between paidTime and dueTime in days.",
              "readOnly": true
            },
            "collectionPeriod": {
              "type": "integer",
              "description": "Collection period - difference between paidTime and issuedTime in days.",
              "readOnly": true
            },
            "paymentFormUrl": {
              "type": "string",
              "readOnly": true,
              "description": "URL where the customer can be redirected to pay for the invoice\nwith one of the methods which are available for this customer.\nIt's an alternative to creating a new transaction with empty `methods`.\n"
            },
            "abandonedTime": {
              "description": "Invoice abandoned time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "voidedTime": {
              "description": "Invoice voided time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "paidTime": {
              "description": "Invoice paid time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "dueTime": {
              "description": "Invoice due time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "issuedTime": {
              "description": "Invoice issued time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "createdTime": {
              "description": "Invoice created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Invoice updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "ThreeDSecureResult": {
          "type": "object",
          "readOnly": true,
          "required": [
            "enrolled",
            "authenticated",
            "liability",
            "isDowngraded"
          ],
          "properties": {
            "version": {
              "description": "3D Secure version.",
              "type": "string",
              "enum": [
                "1.0.2",
                "2.1.0",
                "2.2.0"
              ]
            },
            "enrolled": {
              "description": "Is the cardholder enrolled in 3D Secure.",
              "type": "string",
              "enum": [
                "yes",
                "no",
                "invalid card/timeout",
                "unavailable"
              ]
            },
            "authenticated": {
              "description": "3D Secure authentication response status.",
              "type": "string",
              "enum": [
                "yes",
                "no",
                "not applicable",
                "attempted"
              ]
            },
            "liability": {
              "type": "string",
              "enum": [
                "protected",
                "not protected",
                "protected (attempt)"
              ]
            },
            "flow": {
              "description": "3D Secure 2 authentication flow.",
              "type": "string",
              "enum": [
                "frictionless",
                "challenge"
              ]
            },
            "isDowngraded": {
              "description": "If 3D Secure 2 was attempted but downgraded to 3D Secure 1.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "GatewayName": {
          "description": "The payment gateway name.",
          "type": "string",
          "enum": [
            "A1Gateway",
            "Adyen",
            "Airpay",
            "AmexVPC",
            "APAR",
            "ApcoPay",
            "AsiaPaymentGateway",
            "AstroPayCard",
            "AuthorizeNet",
            "Bambora",
            "BitPay",
            "BlueSnap",
            "BraintreePayments",
            "Cardknox",
            "Cashflows",
            "CASHlib",
            "CashToCode",
            "CauriPayment",
            "Cayan",
            "CCAvenue",
            "Chase",
            "Circle",
            "Citadel",
            "Clearhaus",
            "CODVoucher",
            "CoinPayments",
            "Conekta",
            "Coppr",
            "Credorax",
            "Cryptonator",
            "CyberSource",
            "DataCash",
            "Dengi",
            "Dragonphoenix",
            "Directa24",
            "dLocal",
            "EBANX",
            "ecoPayz",
            "EcorePay",
            "Elavon",
            "Euteller",
            "eMerchantPay",
            "EMS",
            "EPG",
            "EPro",
            "eZeeWallet",
            "Finrax",
            "Flexepin",
            "FinTecSystems",
            "FundSend",
            "Forte",
            "GET",
            "Gigadat",
            "GlobalOnePay",
            "Gooney",
            "Gpaysafe",
            "Greenbox",
            "HiPay",
            "iCanPay",
            "ICEPAY",
            "iCheque",
            "iDebit",
            "Ilixium",
            "Ingenico",
            "INOVAPAY",
            "Inovio",
            "Intuit",
            "InstaDebit",
            "IpayOptions",
            "JetPay",
            "Jeton",
            "Khelocard",
            "Konnektive",
            "LPG",
            "Moneris",
            "MtaPay",
            "MuchBetter",
            "MyFatoorah",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "NGenius",
            "NinjaWallet",
            "NMI",
            "NuaPay",
            "OchaPay",
            "Onlineueberweisen",
            "Pagsmile",
            "Panamerican",
            "ParamountEft",
            "ParamountInterac",
            "PandaGateway",
            "Pay4Fun",
            "PayCash",
            "Payeezy",
            "Payflow",
            "PaymenTechnologies",
            "PaymentsOS",
            "Paymero",
            "PayPal",
            "Payr",
            "Paysafe",
            "Paysafecash",
            "PayTabs",
            "PayULatam",
            "Payvision",
            "Piastrix",
            "Plugnpay",
            "Prosa",
            "Realex",
            "Realtime",
            "Redsys",
            "Rotessa",
            "RPN",
            "SaltarPay",
            "Sagepay",
            "SeamlessChex",
            "SecureTrading",
            "Skrill",
            "SmartInvoice",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "StaticGateway",
            "Stripe",
            "TestProcessor",
            "ToditoCash",
            "TrustPay",
            "TrustsPay",
            "Trustly",
            "TWINT",
            "UPayCard",
            "USAePay",
            "VantivLitle",
            "vegaaH",
            "VCreditos",
            "Wallet88",
            "Walpay",
            "Wirecard",
            "WorldlineAtosFrankfurt",
            "Worldpay",
            "Zimpler",
            "Zotapay"
          ]
        },
        "CommonTransaction": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The transaction ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "websiteId": {
              "description": "The website ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "The сustomer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "type": {
              "description": "Transaction type.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "3ds-authentication",
                "authorize",
                "capture",
                "credit",
                "refund",
                "sale",
                "void"
              ]
            },
            "status": {
              "description": "Transaction status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "completed",
                "conn-error",
                "disputed",
                "never-sent",
                "offsite",
                "partially-refunded",
                "pending",
                "refunded",
                "sending",
                "suspended",
                "timeout",
                "voided",
                "waiting-approval",
                "waiting-capture",
                "waiting-gateway",
                "waiting-refund"
              ]
            },
            "result": {
              "description": "Transaction result.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "abandoned",
                "approved",
                "canceled",
                "declined",
                "unknown"
              ]
            },
            "amount": {
              "description": "The transaction's amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "currency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "purchaseAmount": {
              "description": "The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "purchaseCurrency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "requestAmount": {
              "description": "The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "requestCurrency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "parentTransactionId": {
              "description": "The parent's transaction ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ],
              "readOnly": true
            },
            "childTransactions": {
              "description": "The child transaction IDs.",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "invoiceIds": {
              "description": "The invoice IDs related to transaction.",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "subscriptionIds": {
              "description": "The orders IDs related to transaction's invoice(s).",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "planIds": {
              "description": "The plan IDs related to transaction's order(s).",
              "readOnly": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceId"
              }
            },
            "isRebill": {
              "type": "boolean",
              "readOnly": true
            },
            "rebillNumber": {
              "description": "The transaction's rebill number.",
              "type": "integer",
              "readOnly": true
            },
            "paymentInstrument": {
              "$ref": "#/components/schemas/PaymentInstrumentReference"
            },
            "billingAddress": {
              "description": "Billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "has3ds": {
              "type": "boolean",
              "readOnly": true
            },
            "3ds": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ThreeDSecureResult"
                }
              ]
            },
            "redirectUrl": {
              "description": "The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.",
              "type": "string",
              "format": "uri"
            },
            "retryNumber": {
              "type": "integer",
              "readOnly": true,
              "description": "The position in the sequence of retries."
            },
            "isRetry": {
              "type": "boolean",
              "readOnly": true,
              "description": "True if this transaction is retry."
            },
            "billingDescriptor": {
              "type": "string",
              "readOnly": true,
              "description": "The billing descriptor that appears on the periodic billing statement. Commonly\n12 or fewer characters for a credit card statement.\n"
            },
            "description": {
              "type": "string",
              "description": "The payment description.",
              "maxLength": 255
            },
            "requestId": {
              "description": "The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.",
              "type": "string"
            },
            "hasAmountAdjustment": {
              "description": "True if transaction has amount adjustment.",
              "type": "boolean",
              "readOnly": true
            },
            "gatewayName": {
              "readOnly": true,
              "description": "Payment Gateway name, available only after the gateway is selected for the transaction.\n",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GatewayName"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "processedTime": {
              "description": "Transaction processed time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "createdTime": {
              "description": "Transaction created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Transaction updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "ApprovalUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "approvalUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "CancelUrlLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "cancelUrl"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "StorefrontTransaction": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonTransaction"
            },
            {
              "properties": {
                "approvalUrl": {
                  "description": "The URL to redirect the end-customer when transaction `status` is `waiting-approval` or `offsite`.",
                  "type": "string",
                  "format": "uri"
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      },
                      {
                        "$ref": "#/components/schemas/ApprovalUrlLink"
                      },
                      {
                        "$ref": "#/components/schemas/CancelUrlLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "StorefrontInvoice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonInvoice"
            },
            {
              "properties": {
                "transactions": {
                  "type": "array",
                  "description": "Invoice transactions array.",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/StorefrontTransaction"
                  }
                },
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "KycDocumentRejection": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "document-unreadable",
                "document-expired",
                "document-not-matching",
                "underage-person",
                "other"
              ]
            },
            "message": {
              "description": "The rejection message.",
              "type": "string",
              "example": "Provided document is unreadable"
            }
          }
        },
        "CommonKycDocument": {
          "type": "object",
          "required": [
            "customerId",
            "documentType",
            "status"
          ],
          "properties": {
            "id": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "customerId": {
              "description": "The сustomer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "fileId": {
              "deprecated": true,
              "description": "Linked file object id.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "fileIds": {
              "description": "Linked file object id's.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              }
            },
            "documentType": {
              "description": "Document type submitted for validation, only identity-proof type is analyzed in an automated manner.",
              "type": "string",
              "enum": [
                "identity-proof",
                "address-proof",
                "funds-proof",
                "purchase-proof"
              ]
            },
            "documentSubtype": {
              "description": "Document subtype submitted for validation.",
              "type": "string",
              "enum": [
                "passport",
                "id-card",
                "driver-license",
                "utility-bill",
                "rental-receipt",
                "lease-agreement",
                "copy-credit-card",
                "credit-card-statement",
                "bank-statement",
                "inheritance-documentation",
                "tax-return",
                "salary-slip",
                "sale-of-assets"
              ]
            },
            "matchLevel": {
              "description": "The level of strictness for the document matches.",
              "type": "integer",
              "minimum": 1,
              "maximum": 2,
              "example": 2
            },
            "status": {
              "description": "Status of the validation.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "pending",
                "in-progress",
                "accepted",
                "rejected"
              ]
            },
            "reason": {
              "description": "Reason for uploading.",
              "type": "string"
            },
            "rejectionReason": {
              "$ref": "#/components/schemas/KycDocumentRejection"
            },
            "createdTime": {
              "description": "Creation date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Latest update date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "processedTime": {
              "description": "Processing date/time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "reviewerId": {
              "description": "Reviewer's user ID.",
              "type": "string",
              "nullable": true,
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "reviewerName": {
              "description": "Reviewer's first and last name.",
              "type": "string",
              "nullable": true,
              "readOnly": true
            },
            "reviewTime": {
              "description": "Date and time of manual review.",
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            }
          }
        },
        "StorefrontKycDocument": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonKycDocument"
            },
            {
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "CustomerJWT": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The session ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ],
              "readOnly": true
            },
            "token": {
              "description": "The session's token used for authentication.",
              "type": "string",
              "readOnly": true
            },
            "createdTime": {
              "description": "Session created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Session updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "expiredTime": {
              "description": "Session expired time. Defaults to one hour.",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "PaymentInstructionsToken": {
          "type": "object",
          "title": "Payment Token",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "description": "Payment token ID.",
              "type": "string"
            }
          }
        },
        "PaymentInstructionsInstrument": {
          "type": "object",
          "title": "Payment Instrument",
          "required": [
            "paymentInstrumentId"
          ],
          "properties": {
            "paymentInstrumentId": {
              "description": "The Payment Instrument ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "HttpHeaders": {
          "type": "object",
          "description": "The HTTP headers.",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "Content-Type": "application/json",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }
        },
        "BrowserData": {
          "type": "object",
          "title": "Browser data",
          "description": "Browser data used for 3DS and risk scoring.",
          "required": [
            "colorDepth",
            "isJavaEnabled",
            "language",
            "screenWidth",
            "screenHeight",
            "timeZoneOffset"
          ],
          "properties": {
            "colorDepth": {
              "description": "The browser's color depth in bits per pixel obtained using the `screen.colorDepth` property.",
              "type": "integer",
              "minimum": 1,
              "maximum": 48,
              "example": 24
            },
            "isJavaEnabled": {
              "description": "Whether Java is enabled in a browser or not. Value is returned from the `navigator.javaEnabled` property.",
              "type": "boolean"
            },
            "language": {
              "description": "The browser's language settings returned from the `navigator.language` property.",
              "type": "string",
              "example": "en-US",
              "maxLength": 8
            },
            "screenWidth": {
              "description": "The browser's screen width returned from the `screen.width` property.",
              "type": "integer",
              "minimum": 0,
              "maximum": 65535,
              "example": 1920
            },
            "screenHeight": {
              "description": "The browser's screen height returned from the `screen.height` property.",
              "type": "integer",
              "minimum": 0,
              "maximum": 65535,
              "example": 1080
            },
            "timeZoneOffset": {
              "description": "The browser's time zone offset in minutes from UTC.\nA positive offset indicates the local time is behind UTC, and negative is ahead.\nCan find it with `(new Date()).getTimezoneOffset()` property.\n",
              "type": "integer",
              "minimum": -1410,
              "maximum": 1410,
              "example": 300
            }
          }
        },
        "RiskMetadata": {
          "type": "object",
          "title": "Risk metadata",
          "description": "Risk metadata used for 3DS and risk scoring.",
          "properties": {
            "ipAddress": {
              "description": "The customer's IP.",
              "type": "string",
              "format": "ipv4 or ipv6",
              "example": "93.92.91.90"
            },
            "fingerprint": {
              "description": "The fingerprint.",
              "type": "string",
              "maxLength": 50,
              "example": "pIUt3xbgX3l9g3YDiLbx"
            },
            "httpHeaders": {
              "$ref": "#/components/schemas/HttpHeaders"
            },
            "browserData": {
              "$ref": "#/components/schemas/BrowserData"
            },
            "isProxy": {
              "description": "True if customer's ip address is related to proxy.",
              "type": "boolean",
              "readOnly": true
            },
            "isVpn": {
              "description": "True if customer's ip address is related to VPN.",
              "type": "boolean",
              "readOnly": true
            },
            "isTor": {
              "description": "True if customer's ip address is related to TOR.",
              "type": "boolean",
              "readOnly": true
            },
            "isHosting": {
              "description": "True if customer's ip address is related to hosting.",
              "type": "boolean",
              "readOnly": true
            },
            "vpnServiceName": {
              "description": "VPN service name, if available.",
              "type": "string",
              "readOnly": true
            },
            "isp": {
              "description": "Internet Service Provider name, if available.",
              "type": "string",
              "readOnly": true
            },
            "country": {
              "description": "Country ISO Alpha-2 code for specified ipAddress.",
              "maxLength": 2,
              "type": "string",
              "readOnly": true,
              "example": "US"
            },
            "region": {
              "description": "Region for specified ipAddress.",
              "type": "string",
              "readOnly": true,
              "example": "NY"
            },
            "city": {
              "description": "City for specified ipAddress.",
              "type": "string",
              "readOnly": true,
              "example": "New York"
            },
            "latitude": {
              "description": "Latitude for specified ipAddress.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "longitude": {
              "description": "Longitude for specified ipAddress.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "postalCode": {
              "description": "Postal code for specified ipAddress.",
              "type": "string",
              "maxLength": 10,
              "readOnly": true
            },
            "timeZone": {
              "description": "Time zone for specified ipAddress.",
              "type": "string",
              "readOnly": true,
              "example": "America/New_York"
            },
            "accuracyRadius": {
              "description": "Accuracy radius for specified ipAddress (kilometers).",
              "type": "integer",
              "readOnly": true
            },
            "distance": {
              "description": "Distance between IP Address and Billing Address geolocation (kilometers).",
              "type": "integer",
              "readOnly": true
            },
            "hasMismatchedBillingAddressCountry": {
              "description": "True if the billing address country and geo-IP address are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "hasMismatchedBankCountry": {
              "description": "True if the bank country and geo-IP address are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "hasMismatchedTimeZone": {
              "description": "True if the browser time zone and IP address associated time zone are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "hasMismatchedHolderName": {
              "description": "True if the customer's name from billing address and from customer's primary address are not the same.",
              "type": "boolean",
              "readOnly": true
            },
            "paymentInstrumentVelocity": {
              "description": "Number of transactions for this payment instrument (based on fingerprint) in the last 24 hours.",
              "type": "integer",
              "readOnly": true
            },
            "deviceVelocity": {
              "description": "Number of transactions for this device (based on fingerprint) in the last 24 hours.",
              "type": "integer",
              "readOnly": true
            },
            "score": {
              "description": "Risk score computed per all the factors.",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "PaymentCardBrand": {
          "description": "Payment Card brand.",
          "type": "string",
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay",
            "AstroPay Card"
          ]
        },
        "CommonPaymentCard": {
          "type": "object",
          "title": "Payment Card",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "payment-card"
              ]
            },
            "customerId": {
              "description": "The сustomer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "status": {
              "type": "string",
              "description": "Payment instrument status. When an instrument is `active` it means it has been used at least once for an approved transaction.\nTo remove an instrument from being in use, set it as `deactivated` (see the deactivation endpoint).\n",
              "enum": [
                "active",
                "inactive",
                "expired",
                "deactivated",
                "verification-needed"
              ]
            },
            "fingerprint": {
              "description": "A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.",
              "type": "string",
              "readOnly": true
            },
            "bin": {
              "description": "The card's bin (the PAN's first 6 digits).",
              "type": "string",
              "format": "bin",
              "readOnly": true
            },
            "last4": {
              "description": "The PAN's last 4 digits.",
              "type": "string",
              "readOnly": true
            },
            "pan": {
              "description": "The card PAN (primary account number).",
              "type": "string",
              "writeOnly": true
            },
            "expYear": {
              "description": "Card's expiration year.",
              "type": "integer"
            },
            "expMonth": {
              "description": "Card's expiration month.",
              "type": "integer"
            },
            "cvv": {
              "description": "Card's cvv (card verification value).",
              "type": "string",
              "writeOnly": true
            },
            "brand": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentCardBrand"
                }
              ]
            },
            "bankCountry": {
              "description": "Payment instrument bank country.",
              "type": "string",
              "readOnly": true
            },
            "bankName": {
              "description": "Payment instrument bank name.",
              "type": "string",
              "readOnly": true
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "createdTime": {
              "description": "Payment instrument created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Payment instrument updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "CommonBankAccount": {
          "type": "object",
          "title": "Bank Account",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "ach"
              ]
            },
            "customerId": {
              "description": "The customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "bankName": {
              "description": "Bank's name.",
              "type": "string"
            },
            "routingNumber": {
              "description": "Bank's routing number.",
              "type": "string"
            },
            "accountNumberType": {
              "description": "Bank's account number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
              "type": "string",
              "default": "BBAN",
              "enum": [
                "BBAN",
                "IBAN"
              ]
            },
            "accountType": {
              "description": "Bank's account type.",
              "type": "string",
              "enum": [
                "checking",
                "savings",
                "other"
              ]
            },
            "bic": {
              "description": "Bank Identifier Code.",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "fingerprint": {
              "description": "A unique value to identify the bank account. It contains alphanumeric values.",
              "type": "string",
              "readOnly": true
            },
            "last4": {
              "description": "The last 4 digits of the bank account.",
              "type": "string",
              "readOnly": true
            },
            "status": {
              "description": "Bank account status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "active",
                "deactivated"
              ]
            },
            "createdTime": {
              "description": "Bank account created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Bank account updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "CommonPayPalAccount": {
          "type": "object",
          "required": [
            "method",
            "customerId",
            "billingAddress"
          ],
          "title": "PayPal Account",
          "properties": {
            "id": {
              "description": "The payment instrument ID.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "method": {
              "description": "The method of payment instrument.",
              "type": "string",
              "enum": [
                "paypal"
              ]
            },
            "customerId": {
              "description": "The customer's ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "billingAddress": {
              "description": "The billing address.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "username": {
              "description": "PayPal username.",
              "type": "string",
              "readOnly": true
            },
            "status": {
              "description": "PayPal account status.",
              "type": "string",
              "readOnly": true,
              "enum": [
                "inactive",
                "active",
                "deactivated"
              ]
            },
            "createdTime": {
              "description": "PayPal account created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "PayPal account updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          }
        },
        "StorefrontPaymentInstrument": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CommonPaymentCard"
            },
            {
              "$ref": "#/components/schemas/CommonBankAccount"
            },
            {
              "$ref": "#/components/schemas/CommonPayPalAccount"
            },
            {
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "StorefrontPlan": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonPlan"
            },
            {
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "StorefrontProduct": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CommonProduct"
            },
            {
              "properties": {
                "_links": {
                  "type": "array",
                  "description": "The links related to resource.",
                  "readOnly": true,
                  "minItems": 1,
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SelfLink"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "PaymentToken": {
          "type": "object",
          "title": "Payment Token",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "description": "Payment Token ID.",
              "type": "string"
            }
          }
        },
        "PaymentInstrument": {
          "type": "object",
          "title": "Payment Instrument",
          "required": [
            "paymentInstrumentId"
          ],
          "properties": {
            "paymentInstrumentId": {
              "description": "The Payment Instrument identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            }
          }
        },
        "PaymentMethods": {
          "type": "object",
          "title": "Payment Methods",
          "properties": {
            "methods": {
              "type": "array",
              "description": "The list of available payment methods.\nOnly payment methods with at least one active gateway account are allowed.\n\nIf not specified all available payment methods will be displayed.\n\nCustomer can choose any of those as well as the payment instrument for them.\nAdditional steps will occur via a redirect to `approvalUrl`.\n",
              "items": {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            }
          }
        },
        "PaymentInstruction": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/PaymentToken"
            },
            {
              "$ref": "#/components/schemas/PaymentInstrument"
            },
            {
              "$ref": "#/components/schemas/PaymentMethods"
            }
          ]
        },
        "Purchase": {
          "type": "object",
          "required": [
            "websiteId",
            "paymentInstruction",
            "items",
            "billingAddress"
          ],
          "properties": {
            "orderId": {
              "description": "The order identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "invoice": {
              "description": "The initial invoice.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorefrontInvoice"
                }
              ]
            },
            "transaction": {
              "description": "The initial transaction.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorefrontTransaction"
                }
              ]
            },
            "websiteId": {
              "description": "The website identifier string.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "items": {
              "type": "array",
              "writeOnly": true,
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "properties": {
                  "planId": {
                    "description": "The plan identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "quantity": {
                    "description": "Number of units of the product on the given plan.",
                    "type": "integer"
                  }
                }
              }
            },
            "billingAddress": {
              "description": "The billing address.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "deliveryAddress": {
              "description": "The delivery address.",
              "writeOnly": true,
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "paymentInstruction": {
              "description": "The payment instruction to be used for purchasing.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentInstruction"
                }
              ]
            },
            "couponIds": {
              "type": "array",
              "description": "The list of coupons applied to the order.",
              "writeOnly": true,
              "items": {
                "type": "string"
              }
            },
            "password": {
              "type": "string",
              "description": "If set would be used to create customer account.",
              "writeOnly": true,
              "nullable": true
            }
          }
        },
        "PreviewPurchase": {
          "type": "object",
          "required": [
            "websiteId",
            "items"
          ],
          "properties": {
            "websiteId": {
              "description": "The website identifier string.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "items": {
              "type": "array",
              "writeOnly": true,
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "properties": {
                  "planId": {
                    "description": "The plan identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "quantity": {
                    "description": "Number of units of the product on the given plan.",
                    "type": "integer"
                  }
                }
              }
            },
            "billingAddress": {
              "description": "The billing address.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "deliveryAddress": {
              "description": "The delivery address.",
              "writeOnly": true,
              "nullable": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "couponIds": {
              "type": "array",
              "writeOnly": true,
              "description": "The list of coupons applied to the order.",
              "items": {
                "type": "string"
              }
            },
            "currency": {
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/CurrencyCode"
                }
              ]
            },
            "lineItems": {
              "type": "array",
              "description": "Purchase items array.",
              "readOnly": true,
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Type of the item.",
                    "type": "string",
                    "enum": [
                      "debit",
                      "credit"
                    ]
                  },
                  "description": {
                    "description": "Description of the item.",
                    "type": "string"
                  },
                  "unitPrice": {
                    "description": "Unit price of the item.",
                    "type": "number",
                    "format": "double",
                    "example": 49.95
                  },
                  "quantity": {
                    "description": "The item total quantity.",
                    "type": "number",
                    "format": "integer"
                  },
                  "price": {
                    "description": "The item total amount.",
                    "type": "number",
                    "format": "double"
                  },
                  "planId": {
                    "description": "The item plan identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "productId": {
                    "description": "The item product identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  }
                }
              }
            },
            "taxes": {
              "type": "array",
              "description": "Taxes applied to this purchase.",
              "readOnly": true,
              "items": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "Tax amount.",
                    "type": "number",
                    "format": "double"
                  },
                  "description": {
                    "type": "string",
                    "description": "Tax description."
                  }
                }
              }
            },
            "discounts": {
              "type": "array",
              "description": "Discounts applied to this purchase.",
              "readOnly": true,
              "items": {
                "type": "object",
                "properties": {
                  "couponId": {
                    "description": "The coupon identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "amount": {
                    "description": "Total amount that was discounted by this coupon.",
                    "type": "number"
                  },
                  "description": {
                    "description": "The discount description.",
                    "type": "string"
                  }
                }
              }
            },
            "subtotalAmount": {
              "description": "The purchase's subtotal amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "taxAmount": {
              "description": "The purchase's taxes amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "shippingAmount": {
              "description": "The purchase's shipping amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "discountsAmount": {
              "description": "The purchase's discounts amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "total": {
              "description": "The purchase's total amount.",
              "type": "number",
              "format": "double",
              "readOnly": true
            }
          }
        },
        "ReadyToPayAmount": {
          "type": "object",
          "title": "With amount",
          "required": [
            "currency",
            "amount"
          ],
          "properties": {
            "currency": {
              "$ref": "#/components/schemas/CurrencyCode"
            },
            "amount": {
              "description": "The amount.",
              "type": "number",
              "format": "double"
            }
          }
        },
        "ReadyToPayItems": {
          "type": "object",
          "title": "With items",
          "required": [
            "items"
          ],
          "properties": {
            "items": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [
                  "planId",
                  "quantity"
                ],
                "properties": {
                  "planId": {
                    "description": "The plan identifier string.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ResourceId"
                      }
                    ]
                  },
                  "quantity": {
                    "description": "Number of units of the product on the given plan.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "ReadyToPay": {
          "type": "object",
          "required": [
            "websiteId",
            "riskMetadata"
          ],
          "properties": {
            "websiteId": {
              "description": "The website identifier string.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "billingAddress": {
              "description": "The billing address.",
              "writeOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactObject"
                }
              ]
            },
            "riskMetadata": {
              "$ref": "#/components/schemas/RiskMetadata"
            }
          },
          "oneOf": [
            {
              "$ref": "#/components/schemas/ReadyToPayAmount"
            },
            {
              "$ref": "#/components/schemas/ReadyToPayItems"
            }
          ]
        },
        "PaymentCardDigitalWalletFeature": {
          "type": "object",
          "title": "Digital Wallet",
          "properties": {
            "name": {
              "type": "string",
              "description": "The feature name.",
              "enum": [
                "Google Pay",
                "Apple Pay"
              ]
            }
          }
        },
        "ReadyToPayPaymentCardMethod": {
          "type": "object",
          "title": "Payment Card",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "description": "The payment method.",
              "enum": [
                "payment-card"
              ]
            },
            "feature": {
              "type": "object",
              "nullable": true,
              "description": "The specific feature (eg. digital wallet or a processor) of this method. If method doesn't have any features – will be null.\n",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PaymentCardDigitalWalletFeature"
                }
              ]
            },
            "brands": {
              "type": "array",
              "description": "The list of supported brands.",
              "minItems": 1,
              "items": {
                "$ref": "#/components/schemas/PaymentCardBrand"
              }
            },
            "filters": {
              "type": "array",
              "description": "For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "AchPlaidFeature": {
          "type": "object",
          "title": "Plaid",
          "properties": {
            "name": {
              "type": "string",
              "description": "The feature name.",
              "enum": [
                "Plaid"
              ]
            },
            "linkToken": {
              "type": "string",
              "description": "The Plaid `linkToken` for frontend integrations."
            },
            "expirationTime": {
              "type": "string",
              "format": "date-time",
              "description": "The expiration time of a `linkToken`."
            }
          }
        },
        "ReadyToPayAchMethod": {
          "type": "object",
          "title": "ACH",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "type": "string",
              "description": "The payment method.",
              "enum": [
                "ach"
              ]
            },
            "feature": {
              "type": "object",
              "nullable": true,
              "description": "The specific feature (eg. digital wallet or a processor) of this method. If method doesn't have any features – will be null.\n",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AchPlaidFeature"
                }
              ]
            },
            "filters": {
              "type": "array",
              "description": "For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "TokenPaymentMethod": {
          "type": "string",
          "description": "The token payment method.",
          "enum": [
            "cash",
            "check",
            "paypal",
            "AdvCash",
            "Alfa-click",
            "Alipay",
            "AstroPay Card",
            "AstroPay-GO",
            "bank-transfer",
            "bank-transfer-2",
            "bank-transfer-3",
            "bank-transfer-4",
            "bank-transfer-5",
            "bank-transfer-6",
            "bank-transfer-7",
            "bank-transfer-8",
            "bank-transfer-9",
            "Beeline",
            "Belfius-direct-net",
            "bitcoin",
            "Boleto",
            "cash-deposit",
            "CASHlib",
            "CashToCode",
            "China UnionPay",
            "CODVoucher",
            "Conekta-oxxo",
            "Cupon-de-pagos",
            "cryptocurrency",
            "domestic-cards",
            "echeck",
            "ecoPayz",
            "ecoVoucher",
            "EPS",
            "ePay.bg",
            "eZeeWallet",
            "Flexepin",
            "Giropay",
            "Gpaysafe",
            "Google Pay",
            "iDebit",
            "iDEAL",
            "ING-homepay",
            "INOVAPAY-pin",
            "INOVAPAY-wallet",
            "InstaDebit",
            "instant-bank-transfer",
            "Interac",
            "Interac-online",
            "Interac-eTransfer",
            "invoice",
            "Jeton",
            "jpay",
            "Khelocard",
            "Klarna",
            "Megafon",
            "miscellaneous",
            "Bancontact",
            "MTS",
            "MuchBetter",
            "Neosurf",
            "Netbanking",
            "Neteller",
            "Nordea-Solo",
            "OchaPay",
            "online-bank-transfer",
            "Onlineueberweisen",
            "oriental-wallet",
            "OXXO",
            "Pagsmile-deposit-express",
            "Pagsmile-lottery",
            "PayCash",
            "Payeer",
            "Paymero",
            "Perfect-money",
            "Piastrix",
            "plaid-account",
            "PayTabs",
            "Paysafecard",
            "Paysafecash",
            "Pay4Fun",
            "PinPay",
            "phone",
            "PhonePe",
            "POLi",
            "Przelewy24",
            "QIWI",
            "QQPay",
            "Resurs",
            "SEPA",
            "Skrill",
            "Skrill Rapid Transfer",
            "SMSVoucher",
            "Sofort",
            "SparkPay",
            "swift-dbt",
            "Tele2",
            "Terminaly-RF",
            "ToditoCash-card",
            "Trustly",
            "UPayCard",
            "UPI",
            "VCreditos",
            "voucher",
            "voucher-2",
            "voucher-3",
            "voucher-4",
            "Webmoney",
            "Webpay",
            "Webpay-2",
            "Webpay Card",
            "WeChat Pay",
            "Yandex-money",
            "Zotapay",
            "Zimpler"
          ]
        },
        "ReadyToPayGenericMethod": {
          "type": "object",
          "title": "Generic",
          "required": [
            "method"
          ],
          "properties": {
            "method": {
              "description": "The payment method.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TokenPaymentMethod"
                }
              ]
            },
            "filters": {
              "type": "array",
              "description": "For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ReadyToPayMethods": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ReadyToPayPaymentCardMethod"
              },
              {
                "$ref": "#/components/schemas/ReadyToPayAchMethod"
              },
              {
                "$ref": "#/components/schemas/ReadyToPayGenericMethod"
              }
            ]
          },
          "example": [
            {
              "method": "payment-card",
              "feature": {
                "name": "Google Pay"
              },
              "brands": [
                "Visa",
                "MasterCard"
              ],
              "filters": [
                "brand:Visa,MasterCard;bin:!411111"
              ]
            },
            {
              "method": "ach",
              "feature": {
                "name": "Plaid",
                "linkToken": "some-random-link_token-for-plaid",
                "expirationTime": "2006-01-02T15:04:05Z"
              }
            },
            {
              "method": "payment-card",
              "feature": null,
              "brands": [
                "Visa"
              ],
              "filters": [
                "brand:Visa;bin:411111,444433"
              ]
            },
            {
              "method": "ach",
              "feature": null,
              "filters": []
            },
            {
              "method": "paypal",
              "filters": []
            },
            {
              "method": "Skrill",
              "filters": []
            }
          ]
        },
        "CustomerLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "customer",
                "targetCustomer"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "LeadSourceData": {
          "type": "object",
          "properties": {
            "medium": {
              "description": "Lead source medium (eg search, display).",
              "type": "string"
            },
            "source": {
              "description": "Lead source origin (eg google, yahoo).",
              "type": "string"
            },
            "campaign": {
              "description": "Lead source campaign (eg go-big-123).",
              "type": "string"
            },
            "term": {
              "description": "Lead source term (eg salt shakers).",
              "type": "string"
            },
            "content": {
              "description": "Lead source content (eg smiley faces).",
              "type": "string"
            },
            "affiliate": {
              "description": "Lead source affiliate (eg 123, Bob Smith).",
              "type": "string"
            },
            "subAffiliate": {
              "description": "Lead source sub-affiliate also called a sub-id or click id in some circles (eg 123456).",
              "type": "string"
            },
            "salesAgent": {
              "description": "Lead source sales agent (eg James Bond).",
              "type": "string"
            },
            "clickId": {
              "description": "Lead source click id (may come from an ad server).",
              "type": "string"
            },
            "path": {
              "description": "Lead source path url (eg www.example.com/some/landing/path).",
              "type": "string"
            },
            "referrer": {
              "description": "Lead source [`referer` url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) as determined (eg www.example.com/some/landing/path).",
              "type": "string"
            },
            "createdTime": {
              "description": "Lead source created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerLink"
                  }
                ]
              }
            }
          }
        },
        "OrganizationLink": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Link"
            }
          ],
          "properties": {
            "rel": {
              "description": "The link type.",
              "type": "string",
              "enum": [
                "organization"
              ]
            }
          },
          "required": [
            "rel"
          ]
        },
        "Website": {
          "type": "object",
          "required": [
            "organizationId",
            "name",
            "url",
            "servicePhone",
            "serviceEmail"
          ],
          "properties": {
            "id": {
              "description": "The website identifier string.",
              "readOnly": true,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "organizationId": {
              "description": "Organization ID.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourceId"
                }
              ]
            },
            "name": {
              "description": "The website name.",
              "type": "string"
            },
            "url": {
              "description": "The website domain address.",
              "type": "string"
            },
            "servicePhone": {
              "description": "The website customer service phone number.",
              "type": "string"
            },
            "serviceEmail": {
              "description": "The website customer service email address.",
              "type": "string",
              "format": "email"
            },
            "createdTime": {
              "description": "Website created time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "updatedTime": {
              "description": "Website updated time.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerTimestamp"
                }
              ]
            },
            "customFields": {
              "$ref": "#/components/schemas/ResourceCustomFields"
            },
            "_links": {
              "type": "array",
              "description": "The links related to resource.",
              "readOnly": true,
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SelfLink"
                  },
                  {
                    "$ref": "#/components/schemas/OrganizationLink"
                  }
                ]
              }
            }
          }
        }
      },
      "parameters": {
        "organizationId": {
          "name": "Organization-Id",
          "in": "header",
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used).",
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "required": false
        },
        "token": {
          "name": "token",
          "in": "path",
          "description": "The token string.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        "resourceId": {
          "name": "id",
          "in": "path",
          "description": "The resource identifier string.",
          "required": true,
          "schema": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[@~\\-\\.\\w]+$"
          }
        },
        "collectionLimit": {
          "name": "limit",
          "in": "query",
          "description": "The collection items limit.",
          "schema": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1000
          }
        },
        "collectionOffset": {
          "name": "offset",
          "in": "query",
          "description": "The collection items offset.",
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        "collectionFilter": {
          "name": "filter",
          "in": "query",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n",
          "schema": {
            "type": "string"
          }
        },
        "collectionQuery": {
          "name": "q",
          "in": "query",
          "description": "The partial search of the text fields.",
          "schema": {
            "type": "string"
          }
        },
        "collectionSort": {
          "name": "sort",
          "in": "query",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
          "style": "form",
          "explode": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "responses": {
        "Unauthorized": {
          "description": "Unauthorized access, invalid credentials was used.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "Forbidden": {
          "description": "Access forbidden.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "ValidationError": {
          "description": "Invalid data was sent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvalidError"
              }
            }
          }
        },
        "NotFound": {
          "description": "Resource was not found.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      },
      "requestBodies": {
        "PatchAccountPassword": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "Current password - used when requesting password change."
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "writeOnly": true,
                    "description": "New password - used when requesting password change."
                  }
                }
              }
            }
          }
        },
        "PostPayment": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "For transaction",
                    "required": [
                      "transactionId"
                    ],
                    "properties": {
                      "transactionId": {
                        "$ref": "#/components/schemas/ResourceId"
                      },
                      "riskMetadata": {
                        "$ref": "#/components/schemas/RiskMetadata"
                      }
                    },
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentInstructionsToken"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentInstructionsInstrument"
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "title": "For invoice",
                    "required": [
                      "invoiceId"
                    ],
                    "properties": {
                      "invoiceId": {
                        "$ref": "#/components/schemas/ResourceId"
                      },
                      "riskMetadata": {
                        "$ref": "#/components/schemas/RiskMetadata"
                      }
                    },
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentInstructionsToken"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentInstructionsInstrument"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "PostPaymentInstrument": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "description": "Payment instrument token ID.",
                    "type": "string"
                  },
                  "customFields": {
                    "$ref": "#/components/schemas/ResourceCustomFields"
                  }
                }
              }
            }
          },
          "description": "Payment instrument.",
          "required": true
        },
        "PatchPaymentInstrument": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "Payment instrument token ID.",
                    "type": "string"
                  },
                  "billingAddress": {
                    "description": "The billing address (if supplied – overrides billing address from token).",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ContactObject"
                      }
                    ]
                  },
                  "customFields": {
                    "$ref": "#/components/schemas/ResourceCustomFields"
                  }
                }
              }
            }
          },
          "description": "Payment instrument.",
          "required": true
        },
        "PostRegister": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "required": [
                      "username",
                      "password"
                    ],
                    "properties": {
                      "username": {
                        "type": "string",
                        "description": "Username."
                      },
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "Password."
                      },
                      "primaryAddress": {
                        "$ref": "#/components/schemas/ContactObject"
                      },
                      "paymentToken": {
                        "type": "string",
                        "description": "A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n"
                      },
                      "leadSource": {
                        "$ref": "#/components/schemas/LeadSourceData"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "headers": {
        "Pagination-Total": {
          "description": "Total items count.",
          "schema": {
            "type": "integer"
          }
        },
        "Pagination-Limit": {
          "description": "Items per page limit.",
          "schema": {
            "type": "integer"
          }
        },
        "Pagination-Offset": {
          "description": "Pagination offset.",
          "schema": {
            "type": "integer"
          }
        }
      }
    },
    "paths": {
      "/account": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve Account",
          "operationId": "StorefrontGetAccount",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve account.\n",
          "responses": {
            "200": {
              "description": "Account was retrieved successfuly.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        },
        "patch": {
          "tags": [
            "Account"
          ],
          "summary": "Update Account",
          "operationId": "StorefrontPatchAccount",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Register account.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Account"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Account updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/account/forgot-password": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Password reset"
          ],
          "summary": "Request password reset",
          "operationId": "StorefrontPostForgotPassword",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Sends an email with a link containing a token to reset user password.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username"
                  ],
                  "properties": {
                    "username": {
                      "description": "Username.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Email sent successfuly."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/account/password": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "patch": {
          "tags": [
            "Account"
          ],
          "summary": "Change Account password",
          "operationId": "StorefrontPatchAccountPassword",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Change account password.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PatchAccountPassword"
          },
          "responses": {
            "200": {
              "description": "Account password updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/account/resend-verification": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Email verification"
          ],
          "summary": "Resend email verification",
          "operationId": "StorefrontPostAccountResendVerification",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Resend email verification.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username"
                  ],
                  "properties": {
                    "username": {
                      "description": "Username.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Email sent successfuly."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/account/reset-password/{token}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/token"
          }
        ],
        "post": {
          "tags": [
            "Password reset"
          ],
          "summary": "Finish password reset",
          "operationId": "StorefrontPostResetPassword",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Reset account password.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "newPassword"
                  ],
                  "properties": {
                    "newPassword": {
                      "type": "string",
                      "example": "newP@$$w0rd",
                      "description": "New password."
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Password was reset successfuly.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/account/verification/{token}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/token"
          }
        ],
        "post": {
          "tags": [
            "Email verification"
          ],
          "summary": "Verify account email",
          "operationId": "StorefrontPostAccountVerification",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Verify account email.\n",
          "responses": {
            "204": {
              "description": "Account was verified."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/checkout-forms/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Checkout Forms"
          ],
          "summary": "Retrieve a checkout form",
          "operationId": "StorefrontGetCheckoutForm",
          "description": "Retrieve a checkout form with specified identifier string.\n",
          "responses": {
            "200": {
              "description": "Checkout form was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontCheckoutForm"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/invoices": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Invoice"
          ],
          "summary": "Retrieve a list of invoices",
          "operationId": "StorefrontGetInvoiceCollection",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a list of invoices.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "Invoices were retrieved successfuly.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StorefrontInvoice"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/invoices/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Invoice"
          ],
          "summary": "Retrieve a Invoice",
          "operationId": "StorefrontGetInvoice",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a invoice with specified ID.\n",
          "responses": {
            "200": {
              "description": "Invoice was retrieved successfuly.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontInvoice"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/kyc-documents": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "KYC Document"
          ],
          "summary": "Retrieve a list of KYC documents",
          "operationId": "StorefrontGetKycDocumentCollection",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a list of KYC documents.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of KYC documents was retrieved successfully.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StorefrontKycDocument"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        },
        "post": {
          "tags": [
            "KYC Document"
          ],
          "summary": "Create a KYC Document",
          "operationId": "StorefrontPostKycDocument",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Create a KYC document.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontKycDocument"
                }
              }
            },
            "description": "Kyc document resource.",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Kyc document was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontKycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/kyc-documents/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "KYC Document"
          ],
          "summary": "Retrieve a KYC Document",
          "operationId": "StorefrontGetKycDocument",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a KYC document with specified ID.\n",
          "responses": {
            "200": {
              "description": "KYC document was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontKycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        },
        "patch": {
          "tags": [
            "KYC Document"
          ],
          "summary": "Update a KYC document",
          "operationId": "StorefrontPatchKycDocument",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Update a KYC document with predefined ID.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontKycDocument"
                }
              }
            },
            "description": "KYC document resource.",
            "required": true
          },
          "responses": {
            "200": {
              "description": "KYC document was updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontKycDocument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/login": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Create a session with username and password",
          "operationId": "StorefrontPostLogin",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Create a session with username and password.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "username",
                    "password"
                  ],
                  "properties": {
                    "username": {
                      "description": "Username.",
                      "type": "string"
                    },
                    "password": {
                      "description": "Password.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Account logged in.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerJWT"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            }
          }
        }
      },
      "/logout": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Destroys the user's current session",
          "operationId": "StorefrontPostLogout",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Destroys the user's current session.\n",
          "responses": {
            "204": {
              "description": "Account logget out."
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            }
          }
        }
      },
      "/payment": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Purchase"
          ],
          "summary": "Perform a payment",
          "operationId": "StorefrontPostPayment",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Perform a payment for a transaction or an invoice.\n\nIf Customer JWT contains `transactionId` or `invoiceId` it will be used instead. `transactionId` has a higher\npriority than `invoiceId`.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PostPayment"
          },
          "responses": {
            "200": {
              "description": "Transaction was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontTransaction"
                  }
                }
              }
            },
            "201": {
              "description": "Transaction was updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontTransaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/payment-instruments": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Payment Instrument"
          ],
          "summary": "Retrieve a list of Payment Instruments",
          "operationId": "StorefrontGetPaymentInstrumentCollection",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a list of payment instruments.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of payment instrument was retrieved successfully.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StorefrontPaymentInstrument"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        },
        "post": {
          "tags": [
            "Payment Instrument"
          ],
          "summary": "Create a Payment Instrument",
          "operationId": "StorefrontPostPaymentInstrument",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Create a payment instrument.\n\nThe only way to create a payment instrument is using a payment instrument\ntoken pre-created via [FramePay](https://rebilly.github.io/framepay-docs/).\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PostPaymentInstrument"
          },
          "responses": {
            "201": {
              "description": "Payment instrument was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontPaymentInstrument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/payment-instruments/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Payment Instrument"
          ],
          "summary": "Retrieve a Payment Instrument",
          "operationId": "StorefrontGetPaymentInstrument",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a payment instrument by ID.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "Payment Instrument was retrieved successfully.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontPaymentInstrument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        },
        "patch": {
          "tags": [
            "Payment Instrument"
          ],
          "summary": "Update a Payment Instrument's values",
          "operationId": "StorefrontPatchPaymentInstrument",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Update any of the payment instrument's values.\n\nUse Framepay payment token to update desired values.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PatchPaymentInstrument"
          },
          "responses": {
            "200": {
              "description": "Payment instrument was updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontPaymentInstrument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/payment-instruments/{id}/deactivation": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "post": {
          "tags": [
            "Payment Instrument"
          ],
          "summary": "Deactivate a Payment Instrument",
          "operationId": "StorefrontPostPaymentInstrumentDeactivation",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Deactivate a payment instrument.\n",
          "responses": {
            "201": {
              "description": "Deactivation successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontPaymentInstrument"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          },
          "x-code-samples": [
            {
              "lang": "JavaScript",
              "source": "const paymentInstrument = await api.paymentInstruments.deactivate({id: 'id-to-deactivate'});\n\nconsole.log(paymentInstrument.fields.status);\n"
            }
          ]
        }
      },
      "/plans": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Plan"
          ],
          "summary": "Retrieve a list of plans",
          "operationId": "StorefrontGetPlanCollection",
          "description": "Retrieve a list of plans.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of plans was retrieved successfully.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StorefrontPlan"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/plans/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Plan"
          ],
          "summary": "Retrieve a plan",
          "operationId": "StorefrontGetPlan",
          "description": "Retrieve a plan with specified ID.\n",
          "responses": {
            "200": {
              "description": "Plan was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontPlan"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/products": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Product"
          ],
          "summary": "Retrieve a list of products",
          "operationId": "StorefrontGetProductCollection",
          "description": "Retrieve a list of products.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of products was retrieved successfully.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StorefrontProduct"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/products/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Product"
          ],
          "summary": "Retrieve a product",
          "operationId": "StorefrontGetProduct",
          "description": "Retrieve a product with specified ID.\n",
          "responses": {
            "200": {
              "description": "Product was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontProduct"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/purchase": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Purchase"
          ],
          "summary": "Make a purchase",
          "operationId": "StorefrontPostPurchase",
          "description": "Purchase can be accomplished both with and without Authentication.\nPurchase via pre-created Payment Instrument is only available with Authentication.\nUse purchase preview before making an actual purchase.\n",
          "security": [
            {
              "CustomerJWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Purchase"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Order was created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Purchase"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/preview-purchase": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Purchase"
          ],
          "summary": "Preview a purchase",
          "operationId": "StorefrontPostPreviewPurchase",
          "description": "Purchase can be accomplished both with and without Authentication.\nPurchase via pre-created Payment Instrument is only available with Authentication.\nUse purchase preview before making an actual purchase.\n",
          "security": [
            {
              "CustomerJWT": []
            },
            {
              "PublishableApiKey": []
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewPurchase"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Purchase preview was retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PreviewPurchase"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/ready-to-pay": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Purchase"
          ],
          "summary": "Ready to Pay",
          "operationId": "StorefrontPostReadyToPay",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Get available payment methods for a specific transaction or a purchase.\n\nThe payment methods order shown to a customer **SHOULD** be the same as the order in the response.\n\nThe list of available methods is generated from available [Gateway Accounts](https://user-api-docs.rebilly.com/tag/Gateway-Accounts)\nintersected with the last matched [Rules Engine](https://user-api-docs.rebilly.com/tag/Rules#operation/PutEventRule)\n`adjust-ready-to-pay` action on `ready-to-pay-requested` event.\n\nIf there were no actions matched for the specific request – all methods supported by the Gateway Accounts are sent.\n\nTo invert this behavior – place an all-matching rule at the very end of the `ready-to-pay-requested` event in\nRules Engine with an empty `paymentMethods` property of the `adjust-ready-to-pay` action.\n\nIf Ready to Pay is used with Transaction-scoped JWT all fields will be ignored except the `riskMetadata`.\n",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadyToPay"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment methods retrieved.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReadyToPayMethods"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/register": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Register Account",
          "operationId": "StorefrontPostRegister",
          "security": [
            {
              "PublishableApiKey": []
            }
          ],
          "description": "Register account.\n",
          "requestBody": {
            "$ref": "#/components/requestBodies/PostRegister"
          },
          "responses": {
            "201": {
              "description": "Account registered.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "422": {
              "$ref": "#/components/responses/ValidationError"
            }
          }
        }
      },
      "/transactions": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "get": {
          "tags": [
            "Transaction"
          ],
          "summary": "Retrieve a list of transactions",
          "operationId": "StorefrontGetTransactionCollection",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a list of transactions.\n",
          "parameters": [
            {
              "$ref": "#/components/parameters/collectionLimit"
            },
            {
              "$ref": "#/components/parameters/collectionOffset"
            },
            {
              "$ref": "#/components/parameters/collectionFilter"
            },
            {
              "$ref": "#/components/parameters/collectionQuery"
            },
            {
              "$ref": "#/components/parameters/collectionSort"
            }
          ],
          "responses": {
            "200": {
              "description": "Transactions were retrieved successfuly.",
              "headers": {
                "Pagination-Total": {
                  "$ref": "#/components/headers/Pagination-Total"
                },
                "Pagination-Limit": {
                  "$ref": "#/components/headers/Pagination-Limit"
                },
                "Pagination-Offset": {
                  "$ref": "#/components/headers/Pagination-Offset"
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/StorefrontTransaction"
                    }
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            }
          }
        }
      },
      "/transactions/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Transaction"
          ],
          "summary": "Retrieve a Transaction",
          "operationId": "StorefrontGetTransaction",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a transaction with specified ID.\n",
          "responses": {
            "200": {
              "description": "Transaction was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StorefrontTransaction"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      },
      "/websites/{id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          }
        ],
        "get": {
          "tags": [
            "Website"
          ],
          "summary": "Retrieve a website",
          "operationId": "StorefrontGetWebsite",
          "security": [
            {
              "CustomerJWT": []
            }
          ],
          "description": "Retrieve a website. Use it to find the website name, logo, or more.\n",
          "responses": {
            "200": {
              "description": "Website was retrieved successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Website"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/Unauthorized"
            },
            "403": {
              "$ref": "#/components/responses/Forbidden"
            },
            "404": {
              "$ref": "#/components/responses/NotFound"
            }
          }
        }
      }
    }
  }
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rebilly JS SDK Library The Rebilly JS SDK library allows you to consume the Rebilly API using either Node or the browser. PCI Compliance Note If you need to handle raw payment card data, you should use Rebilly FramePay to generate tokens for your server-side logic. Rebilly API Spec The library is a semantic representation of the Rebilly API spec . A secondary experimental API spec for reports is also available. Quick Start Install the latest version of the SDK with Yarn : yarn add rebilly-js-sdk Or using NPM: npm install rebilly-js-sdk --save Then import the library into your project: import RebillyAPI from rebilly-js-sdk ; Semver The JS SDK is released following Semver 2.0.0 guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.","title":"Introduction"},{"location":"#rebilly-js-sdk-library","text":"The Rebilly JS SDK library allows you to consume the Rebilly API using either Node or the browser.","title":"Rebilly JS SDK Library"},{"location":"#pci-compliance-note","text":"If you need to handle raw payment card data, you should use Rebilly FramePay to generate tokens for your server-side logic.","title":"PCI Compliance Note"},{"location":"#rebilly-api-spec","text":"The library is a semantic representation of the Rebilly API spec . A secondary experimental API spec for reports is also available.","title":"Rebilly API Spec"},{"location":"#quick-start","text":"Install the latest version of the SDK with Yarn : yarn add rebilly-js-sdk Or using NPM: npm install rebilly-js-sdk --save Then import the library into your project: import RebillyAPI from rebilly-js-sdk ;","title":"Quick Start"},{"location":"#semver","text":"The JS SDK is released following Semver 2.0.0 guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.","title":"Semver"},{"location":"getting-started/","text":"Getting Started The library runs in Node or browsers without any configuration requirements. Installation Using Yarn We recommend Yarn for package management. yarn add rebilly-js-sdk Using NPM npm install rebilly-js-sdk --save Usage Importing from the package Two different API clients are exposed within the library, the standard client ( RebillyAPI ), and the experimental client ( RebillyExperimentalAPI ). The default package export is RebillyAPI . ES6 or newer import RebillyAPI from rebilly-js-sdk ; ES5 The main API client is exposed as default in CommonJS. var RebillyAPI = require ( rebilly-js-sdk ). default ; Other Modules The library exposes two additional modules: the experimental API client and the error types returned by both clients. import { RebillyExperimentalAPI , RebillyErrors } from rebilly-js-sdk ; Module Description RebillyExperimentalAPI Secondary API client. Reserved for experimental endpoints like reports and statistics. This client can break backward-compatibility. Based on the Experimental Reports API spec. RebillyErrors Exposes the different errors returned by both API clients. Creating an instance The API clients need either a private API key for backend use, or to be provided with a JWT session token when used in a browser. Node Use a secret API key found in Rebilly under Developer API Keys . const api = RebillyAPI ({ apiKey : secret-api-key }); Node Environment Variables For added security your secret API key should be kept as a Node environment variable . Browsers You should never use a secret API key in the browser because it will be exposed by each API call in plain text. Instead a JWT session token can be provided to the API instance. const api = RebillyAPI (); //fetch a JWT session token via a user login using the API //then set it as the session token for the current instance api . setSessionToken ( token ); See api.setSessionToken Configuration All client API configuration parameters are optional. However a secret API key can only be provided at instantiation. API Environments By default an instance is always generated in the Live environment. The Sandbox mode is only recommended while developing your integration. Parameters const api = RebillyAPI ({ apiKey : secret-api-key , sandbox : true , timeout : 10000 }); Option Type Default Description apiKey string null Your secret API key. To be used only for Node integration. See Developer API Keys . sandbox boolean false Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account. timeout number 6000 Define the timeout in milliseconds for API requests. version string v2.1 Define the version of the API to use. Defaults to v2.1. This configuration option does not apply to RebillyExperimentalAPI. Full Example The following code will demonstrate how to retrieve the list of the newest customers in your account in Node. Promises Every resource method in both the standard and experimental API clients returns a Promise. Node ES7 The newest specification of ECMAScript allows us to drop callbacks for the Promises. import RebillyAPI from rebilly-js-sdk ; //using an environment variable to store the secret API key const api = RebillyAPI ({ apiKey : process . env . REBILLY_KEY }); try { //requesting the list of customers // with the default limit, offset and pagination const customers = await api . customers . getAll (); console . log ( `There are ${ customers . total } customers` ); } catch ( error ) { console . log ( error . message ); } Node ES5 In ES5 the try/catch structure is replaced by standard Promise then/catch chains. var RebillyAPI = require ( rebilly-js-sdk ). default ; //using an environment variable to store the secret API key var api = RebillyAPI ({ apiKey : process . env . REBILLY_KEY }); //requesting the list of customers // with the default limit, offset and pagination api . customers . getAll () . then ( function ( customers ) { console . log ( `There are ${ customers . total } customers` ); }) . catch ( function ( error ) { console . error ( err . message ); });","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"The library runs in Node or browsers without any configuration requirements.","title":"Getting Started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#using-yarn","text":"We recommend Yarn for package management. yarn add rebilly-js-sdk","title":"Using Yarn"},{"location":"getting-started/#using-npm","text":"npm install rebilly-js-sdk --save","title":"Using NPM"},{"location":"getting-started/#usage","text":"","title":"Usage"},{"location":"getting-started/#importing-from-the-package","text":"Two different API clients are exposed within the library, the standard client ( RebillyAPI ), and the experimental client ( RebillyExperimentalAPI ). The default package export is RebillyAPI . ES6 or newer import RebillyAPI from rebilly-js-sdk ; ES5 The main API client is exposed as default in CommonJS. var RebillyAPI = require ( rebilly-js-sdk ). default ;","title":"Importing from the package"},{"location":"getting-started/#other-modules","text":"The library exposes two additional modules: the experimental API client and the error types returned by both clients. import { RebillyExperimentalAPI , RebillyErrors } from rebilly-js-sdk ; Module Description RebillyExperimentalAPI Secondary API client. Reserved for experimental endpoints like reports and statistics. This client can break backward-compatibility. Based on the Experimental Reports API spec. RebillyErrors Exposes the different errors returned by both API clients.","title":"Other Modules"},{"location":"getting-started/#creating-an-instance","text":"The API clients need either a private API key for backend use, or to be provided with a JWT session token when used in a browser.","title":"Creating an instance"},{"location":"getting-started/#node","text":"Use a secret API key found in Rebilly under Developer API Keys . const api = RebillyAPI ({ apiKey : secret-api-key }); Node Environment Variables For added security your secret API key should be kept as a Node environment variable .","title":"Node"},{"location":"getting-started/#browsers","text":"You should never use a secret API key in the browser because it will be exposed by each API call in plain text. Instead a JWT session token can be provided to the API instance. const api = RebillyAPI (); //fetch a JWT session token via a user login using the API //then set it as the session token for the current instance api . setSessionToken ( token ); See api.setSessionToken","title":"Browsers"},{"location":"getting-started/#configuration","text":"All client API configuration parameters are optional. However a secret API key can only be provided at instantiation. API Environments By default an instance is always generated in the Live environment. The Sandbox mode is only recommended while developing your integration.","title":"Configuration"},{"location":"getting-started/#parameters","text":"const api = RebillyAPI ({ apiKey : secret-api-key , sandbox : true , timeout : 10000 }); Option Type Default Description apiKey string null Your secret API key. To be used only for Node integration. See Developer API Keys . sandbox boolean false Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account. timeout number 6000 Define the timeout in milliseconds for API requests. version string v2.1 Define the version of the API to use. Defaults to v2.1. This configuration option does not apply to RebillyExperimentalAPI.","title":"Parameters"},{"location":"getting-started/#full-example","text":"The following code will demonstrate how to retrieve the list of the newest customers in your account in Node. Promises Every resource method in both the standard and experimental API clients returns a Promise.","title":"Full Example"},{"location":"getting-started/#node-es7","text":"The newest specification of ECMAScript allows us to drop callbacks for the Promises. import RebillyAPI from rebilly-js-sdk ; //using an environment variable to store the secret API key const api = RebillyAPI ({ apiKey : process . env . REBILLY_KEY }); try { //requesting the list of customers // with the default limit, offset and pagination const customers = await api . customers . getAll (); console . log ( `There are ${ customers . total } customers` ); } catch ( error ) { console . log ( error . message ); }","title":"Node ES7"},{"location":"getting-started/#node-es5","text":"In ES5 the try/catch structure is replaced by standard Promise then/catch chains. var RebillyAPI = require ( rebilly-js-sdk ). default ; //using an environment variable to store the secret API key var api = RebillyAPI ({ apiKey : process . env . REBILLY_KEY }); //requesting the list of customers // with the default limit, offset and pagination api . customers . getAll () . then ( function ( customers ) { console . log ( `There are ${ customers . total } customers` ); }) . catch ( function ( error ) { console . error ( err . message ); });","title":"Node ES5"},{"location":"license/","text":"License MIT License Copyright (c) 2017, Rebilly, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright (c) 2017, Rebilly, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"guides/criteria/","text":"Criteria N/A","title":"Criteria"},{"location":"guides/criteria/#criteria","text":"N/A","title":"Criteria"},{"location":"guides/filters/","text":"Filters N/A","title":"Filters"},{"location":"guides/filters/#filters","text":"N/A","title":"Filters"},{"location":"reference/rebilly-api/","text":"RebillyAPI Standard Rebilly API client that will be backward-compatible within each major release of the library. API Spec See the Rebilly API spec for full details on the different API calls exposed within this client. Importing The RebillyAPI factory is the default export of the rebilly-js-sdk package. import RebillyAPI from rebilly-js-sdk ; Configuration All client API configuration parameters are optional. However a secret API key can only be provided at instantiation. API Environments By default an instance is always generated in the Live environment. The Sandbox mode is only recommended while developing your integration. Parameters const api = RebillyAPI ({ apiKey : secret-api-key , sandbox : true , timeout : 10000 }); Option Type Default Description apiKey string null Your secret API key. To be used only for Node integrations. See Developer API Keys . sandbox boolean false Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account. timeout number 6000 Define the timeout in milliseconds for API requests. version string v2.1 Define the version of the API to use. Defaults to v2.1. Public Methods The API client exposes different configuration and utility methods you can use to customize your instance. addRequestInterceptor addRequestInterceptor ({ thenDelegate , catchDelegate opt }) Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor. Example api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. thenDelegate ( config ) = { Object } Parameters Name Type Description config Object The request configuration. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the request is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught. removeRequestInterceptor removeRequestInterceptor ( interceptor ) Removes a specific request interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); // remove via reference api . removeRequestInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added request interceptor that should be removed from the current instance. addResponseInterceptor addResponseInterceptor ({ thenDelegate , catchDelegate opt }) Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor. Example api . addResponseInterceptor ({ thenDelegate : ( response ) = { // modify reponse data before having it processed by the API client response . data . shift (); //removed first element return response ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. thenDelegate ( response ) = { Object } Parameters Name Type Description response Object The API response. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the response is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught. removeResponseInterceptor removeResponseInterceptor ( interceptor ) Removes a specific response interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addResponseInterceptor ({ thenDelegate : ( response ) = { response . data . shift (); return config ; }}); // remove via reference api . removeResponseInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added response interceptor that should be removed from the current instance. setTimeout setTimeout ( timeout ) Define the default timeout delay in milliseconds for the current API instance. Example api . setTimeout ( 10000 ); Parameters Name Type Attribute Description timeout number - Timeout delay in milliseconds. setSessionToken setSessionToken ( token ) Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the private API key when the client is used in a browser. To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields. See api.account.signIn Example // instantiate an unauthorized API client const api = RebillyAPI (); // build the sign in payload const payload = { data : { email , password , expiredTime }}; // the signIn method does not require API authorization to complete const response = await api . account . signIn ( payload ); // set the session token for future API requests that require // an authorization using the response fields api . setSessionToken ( response . fields . token ); // this request will be authorized using the token const customers = await api . customers . getAll (); setEndpoints setEndpoints ({ live opt , sandbox opt }) Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API. Securing Communications When modifying the API endpoints always use HTTPS for a production environment. Example api . setEndpoints ({ live : https://api.rebilly.com/experimental/version/url }); Parameters Name Type Attribute Description live string optional URL for the live API mode. sandbox string optional URL for the sandbox API mode. setProxyAgent setProxyAgent ({ host , port , auth }) Define a proxy for the current API instance. Authorized using HTTP Basic credentials. Example const config = { host : 127.0.0.1 , port : 9000 , auth : { //HTTP Basic username : foobar , password : fuubar } }; //all subsequent API requests will pass through the proxy api . setProxyAgent ( config ); Parameters Name Type Attribute Description host string - Hostname of the proxy server. port number - Port of the proxy server. auth Object - Basic credentials to connect to the proxy server. Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication. Resources Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys. Promises All resource methods return chainable Promises. Example //get the latest 100 customers starting from the 100th one api . customers . getAll ({ offset : 100 }); Account api . account Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset. See the Account resource for detailed method information. API Keys api . apiKeys Allows you to manage your API keys. Create or modify existing ones with different datetime settings. API keys are private and should only be used for server-side operations. Note For client-side requests using the JS SDK, you must use the session token returned by api . account . signIn () . See the Accounts resource for more details. See the API Keys resource for detailed method information. Bank Accounts api . bankAccounts Used to create new bank accounts and attach them to an existing customer. Can also deactivate bank accounts. Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment. See Payment Instruments. See the Bank Accounts resource for detailed method information. Blacklists api . blacklists Manage blacklist items by creating new entries or deleting existing items. Blacklists are used to manage risk and fraud by aborting an operation. Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards. A greylist is just like a blacklist, but with an expiration date. See the Blacklists resource for detailed method information. Checkout Pages api . checkoutPages Create and manage checkout pages. Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. See the Checkout Pages resource for detailed method information. Contacts api . contacts Define contact information for your customers. Manage multiple addresses for the same customer. See the Contacts resource for detailed method information. Coupons api . coupons Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans. See the Coupons resource for detailed method information. Credential Hashes api . credentialHashes Generate credential hashes to authorize your webhooks or emails in various parts of Rebilly. See the Credential Hashes resource for detailed method information. Custom Events api . customEvents Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. For example, a custom event could be used to send you an email before a customer's subscription is about to expire. See Rules Engine. See the Custom Events resource for detailed method information. Custom Fields api . customFields Create and manage custom fields to be added to other Resources. A variety of fields are supported from datetime to booleans. See the Custom Fields resource for detailed method information. Customers api . customers Create and manage your customers and their lead sources. Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models. See the Customers resource for detailed method information. Customer Authentication api . customerAuthentication Create and manage login credentials for your customers. This feature can be used to integrate Rebilly directly into your own website and display your customers their subscription or product information. See the Customer Authentication resource for detailed method information. Disputes api . disputes Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly. See the Disputes resource for detailed method information. Events api . events Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed. The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation. See Rules Engine. See the Events resource for detailed method information. Files api . files Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business. See the Files resource for detailed method information. Gateway Accounts api . gatewayAccounts Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use. A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets. See Supported Gateway Accounts. See the Gateway Accounts resource for detailed method information. Invoices api . invoices An invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer. Payment terms are usually stated on the invoice. See also: Products Taxes Shipping Issuing an Invoice See the Invoices resource for detailed method information. Layouts api . layouts Create and manage your plan layouts. Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a pricing or plans page integrated into your website. See the Layouts resource for detailed method information. Lists (Rules Engine) api . lists Create and manage your lists. A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself. See the Lists resource for detailed method information. Notes api . notes Leave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service. See the Notes resource for detailed method information. Organizations api . organizations Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations. Shared Modes Organizations are shared between the Live and Sandbox modes. See the Organizations resource for detailed method information. Payment Cards api . paymentCards A form of payment instrument, payment cards enable customers to do transactions when buying your products. See Payment Instruments. See the Payment Cards resource for detailed method information. Payment Tokens api . paymentTokens Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours. Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens. See Rebilly.js library See the Payment Tokens resource for detailed method information. Paypal Accounts api . paypalAccounts A form of payment instrument, paypal accounts enable customers to do transactions when buying your products. See Payment Instruments. See the Paypal Accounts resource for detailed method information. Plans api . plans Create and manage plans. Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences. See the Plans resource for detailed method information. Previews api . previews Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine. See the Previews resource for detailed method information. Products api . products Create and manage products. You may attach them to plans. Products can have a tax category, accounting code and may require shipping. See the Products resource for detailed method information. Profile api . profile Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in. The profile includes information about the currently authenticated user like his name, email and preferences. See the Profile resource for detailed method information. Sessions api . sessions Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys. This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API. See the Sessions resource for detailed method information. Shipping Zones api . shippingZones Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates. See the Shipping Zones resource for detailed method information. Status (API) api . status Get the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not. Tip You can poll this endpoint on interval to check the status of the API. See the Status resource for detailed method information. Subscriptions api . subscriptions Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination. See the Subscriptions resource for detailed method information. Three D Secure (3DS) api . threeDSecure Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure. The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases. 3D Secure requires cardholder interaction to be completed. See the Three D Secure resource for detailed method information. Tracking api . tracking Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing. See the Tracking resource for detailed method information. Transactions api . transactions Create and manage transactions. A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future. See the Transactions resource for detailed method information. Users api . users Create and manage users. A user represents a person who can login to Rebilly, and take actions subject to their granted permissions. See the Users resource for detailed method information. Webhooks api . webhooks Create and manage webhooks. Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice. They allow you to collect information about those events. Rebilly can send this information to an URL of your choice. See the Webhooks resource for detailed method information. Websites api . websites Create and manage websites. The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business. See the Websites resource for detailed method information.","title":"RebillyAPI"},{"location":"reference/rebilly-api/#rebillyapi","text":"Standard Rebilly API client that will be backward-compatible within each major release of the library. API Spec See the Rebilly API spec for full details on the different API calls exposed within this client.","title":"RebillyAPI"},{"location":"reference/rebilly-api/#importing","text":"The RebillyAPI factory is the default export of the rebilly-js-sdk package. import RebillyAPI from rebilly-js-sdk ;","title":"Importing"},{"location":"reference/rebilly-api/#configuration","text":"All client API configuration parameters are optional. However a secret API key can only be provided at instantiation. API Environments By default an instance is always generated in the Live environment. The Sandbox mode is only recommended while developing your integration.","title":"Configuration"},{"location":"reference/rebilly-api/#parameters","text":"const api = RebillyAPI ({ apiKey : secret-api-key , sandbox : true , timeout : 10000 }); Option Type Default Description apiKey string null Your secret API key. To be used only for Node integrations. See Developer API Keys . sandbox boolean false Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account. timeout number 6000 Define the timeout in milliseconds for API requests. version string v2.1 Define the version of the API to use. Defaults to v2.1.","title":"Parameters"},{"location":"reference/rebilly-api/#public-methods","text":"The API client exposes different configuration and utility methods you can use to customize your instance.","title":"Public Methods"},{"location":"reference/rebilly-api/#addrequestinterceptor","text":"addRequestInterceptor ({ thenDelegate , catchDelegate opt }) Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor. Example api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. thenDelegate ( config ) = { Object } Parameters Name Type Description config Object The request configuration. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the request is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.","title":"addRequestInterceptor"},{"location":"reference/rebilly-api/#removerequestinterceptor","text":"removeRequestInterceptor ( interceptor ) Removes a specific request interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); // remove via reference api . removeRequestInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added request interceptor that should be removed from the current instance.","title":"removeRequestInterceptor"},{"location":"reference/rebilly-api/#addresponseinterceptor","text":"addResponseInterceptor ({ thenDelegate , catchDelegate opt }) Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor. Example api . addResponseInterceptor ({ thenDelegate : ( response ) = { // modify reponse data before having it processed by the API client response . data . shift (); //removed first element return response ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. thenDelegate ( response ) = { Object } Parameters Name Type Description response Object The API response. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the response is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.","title":"addResponseInterceptor"},{"location":"reference/rebilly-api/#removeresponseinterceptor","text":"removeResponseInterceptor ( interceptor ) Removes a specific response interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addResponseInterceptor ({ thenDelegate : ( response ) = { response . data . shift (); return config ; }}); // remove via reference api . removeResponseInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added response interceptor that should be removed from the current instance.","title":"removeResponseInterceptor"},{"location":"reference/rebilly-api/#settimeout","text":"setTimeout ( timeout ) Define the default timeout delay in milliseconds for the current API instance. Example api . setTimeout ( 10000 ); Parameters Name Type Attribute Description timeout number - Timeout delay in milliseconds.","title":"setTimeout"},{"location":"reference/rebilly-api/#setsessiontoken","text":"setSessionToken ( token ) Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the private API key when the client is used in a browser. To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields. See api.account.signIn Example // instantiate an unauthorized API client const api = RebillyAPI (); // build the sign in payload const payload = { data : { email , password , expiredTime }}; // the signIn method does not require API authorization to complete const response = await api . account . signIn ( payload ); // set the session token for future API requests that require // an authorization using the response fields api . setSessionToken ( response . fields . token ); // this request will be authorized using the token const customers = await api . customers . getAll ();","title":"setSessionToken"},{"location":"reference/rebilly-api/#setendpoints","text":"setEndpoints ({ live opt , sandbox opt }) Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API. Securing Communications When modifying the API endpoints always use HTTPS for a production environment. Example api . setEndpoints ({ live : https://api.rebilly.com/experimental/version/url }); Parameters Name Type Attribute Description live string optional URL for the live API mode. sandbox string optional URL for the sandbox API mode.","title":"setEndpoints"},{"location":"reference/rebilly-api/#setproxyagent","text":"setProxyAgent ({ host , port , auth }) Define a proxy for the current API instance. Authorized using HTTP Basic credentials. Example const config = { host : 127.0.0.1 , port : 9000 , auth : { //HTTP Basic username : foobar , password : fuubar } }; //all subsequent API requests will pass through the proxy api . setProxyAgent ( config ); Parameters Name Type Attribute Description host string - Hostname of the proxy server. port number - Port of the proxy server. auth Object - Basic credentials to connect to the proxy server. Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication.","title":"setProxyAgent"},{"location":"reference/rebilly-api/#resources","text":"Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys. Promises All resource methods return chainable Promises. Example //get the latest 100 customers starting from the 100th one api . customers . getAll ({ offset : 100 });","title":"Resources"},{"location":"reference/rebilly-api/#account","text":"api . account Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset. See the Account resource for detailed method information.","title":"Account"},{"location":"reference/rebilly-api/#api-keys","text":"api . apiKeys Allows you to manage your API keys. Create or modify existing ones with different datetime settings. API keys are private and should only be used for server-side operations. Note For client-side requests using the JS SDK, you must use the session token returned by api . account . signIn () . See the Accounts resource for more details. See the API Keys resource for detailed method information.","title":"API Keys"},{"location":"reference/rebilly-api/#bank-accounts","text":"api . bankAccounts Used to create new bank accounts and attach them to an existing customer. Can also deactivate bank accounts. Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment. See Payment Instruments. See the Bank Accounts resource for detailed method information.","title":"Bank Accounts"},{"location":"reference/rebilly-api/#blacklists","text":"api . blacklists Manage blacklist items by creating new entries or deleting existing items. Blacklists are used to manage risk and fraud by aborting an operation. Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards. A greylist is just like a blacklist, but with an expiration date. See the Blacklists resource for detailed method information.","title":"Blacklists"},{"location":"reference/rebilly-api/#checkout-pages","text":"api . checkoutPages Create and manage checkout pages. Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. See the Checkout Pages resource for detailed method information.","title":"Checkout Pages"},{"location":"reference/rebilly-api/#contacts","text":"api . contacts Define contact information for your customers. Manage multiple addresses for the same customer. See the Contacts resource for detailed method information.","title":"Contacts"},{"location":"reference/rebilly-api/#coupons","text":"api . coupons Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans. See the Coupons resource for detailed method information.","title":"Coupons"},{"location":"reference/rebilly-api/#credential-hashes","text":"api . credentialHashes Generate credential hashes to authorize your webhooks or emails in various parts of Rebilly. See the Credential Hashes resource for detailed method information.","title":"Credential Hashes"},{"location":"reference/rebilly-api/#custom-events","text":"api . customEvents Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. For example, a custom event could be used to send you an email before a customer's subscription is about to expire. See Rules Engine. See the Custom Events resource for detailed method information.","title":"Custom Events"},{"location":"reference/rebilly-api/#custom-fields","text":"api . customFields Create and manage custom fields to be added to other Resources. A variety of fields are supported from datetime to booleans. See the Custom Fields resource for detailed method information.","title":"Custom Fields"},{"location":"reference/rebilly-api/#customers","text":"api . customers Create and manage your customers and their lead sources. Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models. See the Customers resource for detailed method information.","title":"Customers"},{"location":"reference/rebilly-api/#customer-authentication","text":"api . customerAuthentication Create and manage login credentials for your customers. This feature can be used to integrate Rebilly directly into your own website and display your customers their subscription or product information. See the Customer Authentication resource for detailed method information.","title":"Customer Authentication"},{"location":"reference/rebilly-api/#disputes","text":"api . disputes Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly. See the Disputes resource for detailed method information.","title":"Disputes"},{"location":"reference/rebilly-api/#events","text":"api . events Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed. The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation. See Rules Engine. See the Events resource for detailed method information.","title":"Events"},{"location":"reference/rebilly-api/#files","text":"api . files Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business. See the Files resource for detailed method information.","title":"Files"},{"location":"reference/rebilly-api/#gateway-accounts","text":"api . gatewayAccounts Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use. A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets. See Supported Gateway Accounts. See the Gateway Accounts resource for detailed method information.","title":"Gateway Accounts"},{"location":"reference/rebilly-api/#invoices","text":"api . invoices An invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer. Payment terms are usually stated on the invoice. See also: Products Taxes Shipping Issuing an Invoice See the Invoices resource for detailed method information.","title":"Invoices"},{"location":"reference/rebilly-api/#layouts","text":"api . layouts Create and manage your plan layouts. Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a pricing or plans page integrated into your website. See the Layouts resource for detailed method information.","title":"Layouts"},{"location":"reference/rebilly-api/#lists-rules-engine","text":"api . lists Create and manage your lists. A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself. See the Lists resource for detailed method information.","title":"Lists (Rules Engine)"},{"location":"reference/rebilly-api/#notes","text":"api . notes Leave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service. See the Notes resource for detailed method information.","title":"Notes"},{"location":"reference/rebilly-api/#organizations","text":"api . organizations Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations. Shared Modes Organizations are shared between the Live and Sandbox modes. See the Organizations resource for detailed method information.","title":"Organizations"},{"location":"reference/rebilly-api/#payment-cards","text":"api . paymentCards A form of payment instrument, payment cards enable customers to do transactions when buying your products. See Payment Instruments. See the Payment Cards resource for detailed method information.","title":"Payment Cards"},{"location":"reference/rebilly-api/#payment-tokens","text":"api . paymentTokens Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours. Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens. See Rebilly.js library See the Payment Tokens resource for detailed method information.","title":"Payment Tokens"},{"location":"reference/rebilly-api/#paypal-accounts","text":"api . paypalAccounts A form of payment instrument, paypal accounts enable customers to do transactions when buying your products. See Payment Instruments. See the Paypal Accounts resource for detailed method information.","title":"Paypal Accounts"},{"location":"reference/rebilly-api/#plans","text":"api . plans Create and manage plans. Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences. See the Plans resource for detailed method information.","title":"Plans"},{"location":"reference/rebilly-api/#previews","text":"api . previews Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine. See the Previews resource for detailed method information.","title":"Previews"},{"location":"reference/rebilly-api/#products","text":"api . products Create and manage products. You may attach them to plans. Products can have a tax category, accounting code and may require shipping. See the Products resource for detailed method information.","title":"Products"},{"location":"reference/rebilly-api/#profile","text":"api . profile Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in. The profile includes information about the currently authenticated user like his name, email and preferences. See the Profile resource for detailed method information.","title":"Profile"},{"location":"reference/rebilly-api/#sessions","text":"api . sessions Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys. This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API. See the Sessions resource for detailed method information.","title":"Sessions"},{"location":"reference/rebilly-api/#shipping-zones","text":"api . shippingZones Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates. See the Shipping Zones resource for detailed method information.","title":"Shipping Zones"},{"location":"reference/rebilly-api/#status-api","text":"api . status Get the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not. Tip You can poll this endpoint on interval to check the status of the API. See the Status resource for detailed method information.","title":"Status (API)"},{"location":"reference/rebilly-api/#subscriptions","text":"api . subscriptions Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination. See the Subscriptions resource for detailed method information.","title":"Subscriptions"},{"location":"reference/rebilly-api/#three-d-secure-3ds","text":"api . threeDSecure Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure. The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases. 3D Secure requires cardholder interaction to be completed. See the Three D Secure resource for detailed method information.","title":"Three D Secure (3DS)"},{"location":"reference/rebilly-api/#tracking","text":"api . tracking Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing. See the Tracking resource for detailed method information.","title":"Tracking"},{"location":"reference/rebilly-api/#transactions","text":"api . transactions Create and manage transactions. A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future. See the Transactions resource for detailed method information.","title":"Transactions"},{"location":"reference/rebilly-api/#users","text":"api . users Create and manage users. A user represents a person who can login to Rebilly, and take actions subject to their granted permissions. See the Users resource for detailed method information.","title":"Users"},{"location":"reference/rebilly-api/#webhooks","text":"api . webhooks Create and manage webhooks. Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice. They allow you to collect information about those events. Rebilly can send this information to an URL of your choice. See the Webhooks resource for detailed method information.","title":"Webhooks"},{"location":"reference/rebilly-api/#websites","text":"api . websites Create and manage websites. The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business. See the Websites resource for detailed method information.","title":"Websites"},{"location":"reference/rebilly-errors/","text":"RebillyErrors The JS SDK returns custom error types based on the HTTP code when available or an internal condition like timeouts and manual cancellation. Importing You can import the error object into your project to access the different types of errors returned by the library.. import { RebillyErrors } from rebilly-js-sdk ; Types The RebillyErrors object exposes the following types: Name Status Code Description RebillyRequestError - Generic error when no response is available. RebillyTimeoutError - The request timed out. RebillyCanceledError - The request was manually canceled before being completed. See api.getCancellationToken RebillyForbiddenError 401 Indicates an invalid API key or expired session token. RebillyNotFoundError 404 Requested resource was not found. RebillyMethodNotAllowedError 405 Request method not allowed on this resource. RebillyConflictError 409 Requested operation triggered a conflict. RebillyValidationError 422 The request payload triggered a validation error (see error details ). Tip When catching an error from any of the Rebilly API clients, check the error.name to determine the type. Examples Throwing RebillyErrors Using the imported errors you can throw them on demand in your integration. import { RebillyErrors } from rebilly-js-sdk ; // you can throw the errors internally if ( response . fields . id === null ) { const error = { message : Missing ID }; throw new RebillyErrors . RebillyRequestError ({ error }); } Note You can pass an error instance directly to the constructor of any type within RebillyErrors . try { await api . customers . getAll (); } catch ( error ) { // using the error that was caught as the parameters throw new RebillyErrors . RebillyRequestError ({ error }); } Verifying the error type When catching library errors you can use the imported errors to compare their types and handle them differently. import RebillyAPI , { RebillyErrors } from rebilly-js-sdk ; const api = RebillyAPI ({ apiKey : private-key }); try { const customers = await api . customers . getAll (); } catch ( error ) { if ( error . name === RebillyErrors . RebillyRequestError . name ) { // handle a request error differently // from other error types } else { // handle any other error type } } Note Alternatively you can compare the error . name to the string representation of the error type. if ( error . name === RebillyRequestError ) { // handle error }","title":"RebillyErrors"},{"location":"reference/rebilly-errors/#rebillyerrors","text":"The JS SDK returns custom error types based on the HTTP code when available or an internal condition like timeouts and manual cancellation.","title":"RebillyErrors"},{"location":"reference/rebilly-errors/#importing","text":"You can import the error object into your project to access the different types of errors returned by the library.. import { RebillyErrors } from rebilly-js-sdk ;","title":"Importing"},{"location":"reference/rebilly-errors/#types","text":"The RebillyErrors object exposes the following types: Name Status Code Description RebillyRequestError - Generic error when no response is available. RebillyTimeoutError - The request timed out. RebillyCanceledError - The request was manually canceled before being completed. See api.getCancellationToken RebillyForbiddenError 401 Indicates an invalid API key or expired session token. RebillyNotFoundError 404 Requested resource was not found. RebillyMethodNotAllowedError 405 Request method not allowed on this resource. RebillyConflictError 409 Requested operation triggered a conflict. RebillyValidationError 422 The request payload triggered a validation error (see error details ). Tip When catching an error from any of the Rebilly API clients, check the error.name to determine the type.","title":"Types"},{"location":"reference/rebilly-errors/#examples","text":"","title":"Examples"},{"location":"reference/rebilly-errors/#throwing-rebillyerrors","text":"Using the imported errors you can throw them on demand in your integration. import { RebillyErrors } from rebilly-js-sdk ; // you can throw the errors internally if ( response . fields . id === null ) { const error = { message : Missing ID }; throw new RebillyErrors . RebillyRequestError ({ error }); } Note You can pass an error instance directly to the constructor of any type within RebillyErrors . try { await api . customers . getAll (); } catch ( error ) { // using the error that was caught as the parameters throw new RebillyErrors . RebillyRequestError ({ error }); }","title":"Throwing RebillyErrors"},{"location":"reference/rebilly-errors/#verifying-the-error-type","text":"When catching library errors you can use the imported errors to compare their types and handle them differently. import RebillyAPI , { RebillyErrors } from rebilly-js-sdk ; const api = RebillyAPI ({ apiKey : private-key }); try { const customers = await api . customers . getAll (); } catch ( error ) { if ( error . name === RebillyErrors . RebillyRequestError . name ) { // handle a request error differently // from other error types } else { // handle any other error type } } Note Alternatively you can compare the error . name to the string representation of the error type. if ( error . name === RebillyRequestError ) { // handle error }","title":"Verifying the error type"},{"location":"reference/rebilly-experimental-api/","text":"RebillyExperimentalAPI Experimental Rebilly API client that can break backward-compatibility. This client contains compute-heavy features like reports and statistics and is bound to change over time. API Spec See the Rebilly Reports API spec for full details on the different API calls exposed within this client. Importing The RebillyExperimentalAPI factory is part of the rebilly-js-sdk package as a non-default export. import { RebillyExperimentalAPI } from rebilly-js-sdk ; Configuration All client API configuration parameters are optional. However a secret API key can only be provided at instantiation. API Environments By default an instance is always generated in the Live environment. The Sandbox mode is only recommended while developing your integration. Parameters const api = RebillyExperimentalAPI ({ apiKey : secret-api-key , sandbox : true , timeout : 10000 }); Option Type Default Description apiKey string null Your secret API key. To be used only for Node integrations. See Developer API Keys . sandbox boolean false Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account. timeout number 6000 Define the timeout in milliseconds for API requests. Version Agnostic The Experimental API client is version-less and does not support it as part of its configuration hash. Public Methods The API client exposes different configuration and utility methods you can use to customize your instance. addRequestInterceptor addRequestInterceptor ({ thenDelegate , catchDelegate opt }) Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor. Example api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. thenDelegate ( config ) = { Object } Parameters Name Type Description config Object The request configuration. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the request is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught. removeRequestInterceptor removeRequestInterceptor ( interceptor ) Removes a specific request interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); // remove via reference api . removeRequestInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added request interceptor that should be removed from the current instance. addResponseInterceptor addResponseInterceptor ({ thenDelegate , catchDelegate opt }) Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor. Example api . addResponseInterceptor ({ thenDelegate : ( response ) = { // modify reponse data before having it processed by the API client response . data . shift (); //removed first element return response ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. thenDelegate ( response ) = { Object } Parameters Name Type Description response Object The API response. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the response is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught. removeResponseInterceptor removeResponseInterceptor ( interceptor ) Removes a specific response interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addResponseInterceptor ({ thenDelegate : ( response ) = { response . data . shift (); return config ; }}); // remove via reference api . removeResponseInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added response interceptor that should be removed from the current instance. setTimeout setTimeout ( timeout ) Define the default timeout delay in milliseconds for the current API instance. Example api . setTimeout ( 10000 ); Parameters Name Type Attribute Description timeout number - Timeout delay in milliseconds. setSessionToken setSessionToken ( token ) Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the private API key when the client is used in a browser. To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields. Example // instantiate an unauthorized API client const api = RebillyExperimentalAPI (); // build the sign in payload const payload = { data : { email , password , expiredTime }}; // the signIn method does not require API authorization to complete const response = await api . account . signIn ( payload ); // set the session token for future API requests that require // an authorization using the response fields api . setSessionToken ( response . fields . token ); // this request will be authorized using the token const customers = await api . customers . getAll (); setEndpoints setEndpoints ({ live opt , sandbox opt }) Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API. Securing Communications When modifying the API endpoints always use HTTPS for a production environment. Example api . setEndpoints ({ live : https://api.rebilly.com/experimental/version/url }); Parameters Name Type Attribute Description live string optional URL for the live API mode. sandbox string optional URL for the sandbox API mode. setProxyAgent setProxyAgent ({ host , port , auth }) Define a proxy for the current API instance. Authorized using HTTP Basic credentials. Example const config = { host : 127.0.0.1 , port : 9000 , auth : { //HTTP Basic username : foobar , password : fuubar } }; //all subsequent API requests will pass through the proxy api . setProxyAgent ( config ); Parameters Name Type Attribute Description host string - Hostname of the proxy server. port number - Port of the proxy server. auth Object - Basic credentials to connect to the proxy server. Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication. Resources Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys. Promises All resource methods return chainable Promises. Customers api . customers Access customer lifetime metrics. See the Customers resource for detailed method information. Exports api . exports Queue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported. See the Exports resource for detailed method information. Histograms api . histograms Histograms are for a particular kinds of reports with cohorts and periods. See the Histograms resource for detailed method information. Reports api . reports Retrieve summary information about your customers, subscriptions, transactions, and more. See the Reports resource for detailed method information.","title":"RebillyExperimentalAPI"},{"location":"reference/rebilly-experimental-api/#rebillyexperimentalapi","text":"Experimental Rebilly API client that can break backward-compatibility. This client contains compute-heavy features like reports and statistics and is bound to change over time. API Spec See the Rebilly Reports API spec for full details on the different API calls exposed within this client.","title":"RebillyExperimentalAPI"},{"location":"reference/rebilly-experimental-api/#importing","text":"The RebillyExperimentalAPI factory is part of the rebilly-js-sdk package as a non-default export. import { RebillyExperimentalAPI } from rebilly-js-sdk ;","title":"Importing"},{"location":"reference/rebilly-experimental-api/#configuration","text":"All client API configuration parameters are optional. However a secret API key can only be provided at instantiation. API Environments By default an instance is always generated in the Live environment. The Sandbox mode is only recommended while developing your integration.","title":"Configuration"},{"location":"reference/rebilly-experimental-api/#parameters","text":"const api = RebillyExperimentalAPI ({ apiKey : secret-api-key , sandbox : true , timeout : 10000 }); Option Type Default Description apiKey string null Your secret API key. To be used only for Node integrations. See Developer API Keys . sandbox boolean false Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account. timeout number 6000 Define the timeout in milliseconds for API requests. Version Agnostic The Experimental API client is version-less and does not support it as part of its configuration hash.","title":"Parameters"},{"location":"reference/rebilly-experimental-api/#public-methods","text":"The API client exposes different configuration and utility methods you can use to customize your instance.","title":"Public Methods"},{"location":"reference/rebilly-experimental-api/#addrequestinterceptor","text":"addRequestInterceptor ({ thenDelegate , catchDelegate opt }) Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor. Example api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. thenDelegate ( config ) = { Object } Parameters Name Type Description config Object The request configuration. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the request is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.","title":"addRequestInterceptor"},{"location":"reference/rebilly-experimental-api/#removerequestinterceptor","text":"removeRequestInterceptor ( interceptor ) Removes a specific request interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addRequestInterceptor ({ thenDelegate : ( config ) = { config . params [ extra-query-param ] = foobar ; return config ; }}); // remove via reference api . removeRequestInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added request interceptor that should be removed from the current instance.","title":"removeRequestInterceptor"},{"location":"reference/rebilly-experimental-api/#addresponseinterceptor","text":"addResponseInterceptor ({ thenDelegate , catchDelegate opt }) Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor. Example api . addResponseInterceptor ({ thenDelegate : ( response ) = { // modify reponse data before having it processed by the API client response . data . shift (); //removed first element return response ; }}); Parameters Name Type Attribute Description thenDelegate Function - Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. thenDelegate ( response ) = { Object } Parameters Name Type Description response Object The API response. Must be returned after being modified. catchDelegate Function Optional Defines a callback to run before the catch block of the response is executed for this interceptor. catchDelegate ( error ) = Promise Parameters Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.","title":"addResponseInterceptor"},{"location":"reference/rebilly-experimental-api/#removeresponseinterceptor","text":"removeResponseInterceptor ( interceptor ) Removes a specific response interceptor from the current API instance. Example // set reference to interceptor const interceptor = api . addResponseInterceptor ({ thenDelegate : ( response ) = { response . data . shift (); return config ; }}); // remove via reference api . removeResponseInterceptor ( interceptor ); Parameters Name Type Attribute Description interceptor Function - The reference to the previously added response interceptor that should be removed from the current instance.","title":"removeResponseInterceptor"},{"location":"reference/rebilly-experimental-api/#settimeout","text":"setTimeout ( timeout ) Define the default timeout delay in milliseconds for the current API instance. Example api . setTimeout ( 10000 ); Parameters Name Type Attribute Description timeout number - Timeout delay in milliseconds.","title":"setTimeout"},{"location":"reference/rebilly-experimental-api/#setsessiontoken","text":"setSessionToken ( token ) Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the private API key when the client is used in a browser. To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields. Example // instantiate an unauthorized API client const api = RebillyExperimentalAPI (); // build the sign in payload const payload = { data : { email , password , expiredTime }}; // the signIn method does not require API authorization to complete const response = await api . account . signIn ( payload ); // set the session token for future API requests that require // an authorization using the response fields api . setSessionToken ( response . fields . token ); // this request will be authorized using the token const customers = await api . customers . getAll ();","title":"setSessionToken"},{"location":"reference/rebilly-experimental-api/#setendpoints","text":"setEndpoints ({ live opt , sandbox opt }) Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API. Securing Communications When modifying the API endpoints always use HTTPS for a production environment. Example api . setEndpoints ({ live : https://api.rebilly.com/experimental/version/url }); Parameters Name Type Attribute Description live string optional URL for the live API mode. sandbox string optional URL for the sandbox API mode.","title":"setEndpoints"},{"location":"reference/rebilly-experimental-api/#setproxyagent","text":"setProxyAgent ({ host , port , auth }) Define a proxy for the current API instance. Authorized using HTTP Basic credentials. Example const config = { host : 127.0.0.1 , port : 9000 , auth : { //HTTP Basic username : foobar , password : fuubar } }; //all subsequent API requests will pass through the proxy api . setProxyAgent ( config ); Parameters Name Type Attribute Description host string - Hostname of the proxy server. port number - Port of the proxy server. auth Object - Basic credentials to connect to the proxy server. Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication.","title":"setProxyAgent"},{"location":"reference/rebilly-experimental-api/#resources","text":"Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys. Promises All resource methods return chainable Promises.","title":"Resources"},{"location":"reference/rebilly-experimental-api/#customers","text":"api . customers Access customer lifetime metrics. See the Customers resource for detailed method information.","title":"Customers"},{"location":"reference/rebilly-experimental-api/#exports","text":"api . exports Queue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported. See the Exports resource for detailed method information.","title":"Exports"},{"location":"reference/rebilly-experimental-api/#histograms","text":"api . histograms Histograms are for a particular kinds of reports with cohorts and periods. See the Histograms resource for detailed method information.","title":"Histograms"},{"location":"reference/rebilly-experimental-api/#reports","text":"api . reports Retrieve summary information about your customers, subscriptions, transactions, and more. See the Reports resource for detailed method information.","title":"Reports"},{"location":"reference/resources/account/","text":"Account api . account Member of RebillyAPI Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset. signUp signUp ({ data }) - {Member} Creates a new user in Rebilly and sends an email confirmation. The user will have to activate his account using the email confirmation that he receives. Important This request does not require API authentication and can be completed as a guest. Example const data = { email : acme+test@rebilly.com , company : Acme Imports , firstName : John , lastName : Doe , businessPhone : 14566789 , password : helloworld123 , website : http://acme-imports.com }; const user = await api . account . signUp ({ data }); console . log ( user . fields . id ); Returns A member exposing the newly created user information. Type Member API Spec See the detailed API spec for all payload fields and response data. signIn signIn ({ data }) - {Member} Sign in to a user account and return the session token (JWT). Optionally you can provide the expired time of the session using expiredTime as a datetime in the future. Important This request does not require API authentication and can be completed as a guest. See api.setSessionToken Example const data = { email : acme+test@rebilly.com , password : helloworld123 // optionally you can define an `expiredTime` to // limit the duration of the session token //expiredTime: 2017-09-18T19:17:39Z }; const session = await api . account . signIn ({ data }); // the session token (JWT) can be used in // conjunction with api.setSessionToken to authorize API // requests in the browser console . log ( session . fields . token ); Returns A member exposing the session information. Type Member API Spec See the detailed API spec for all payload fields and response data. logout logout () - {Member} Logs out the current authenticated user and destroys his active session. This will invalidate the session token. Session Expiry A session will expire automatically if you do not logout the user. However we recommend you logout the user programmatically whenever his session should expire. Example const logout = await api . account . logout (); // the request does not return any fields but // you can confirm the success using the status code console . log ( logout . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. activate activate ({ token }) - {Member} Activate a user account with the token he received by email when the user signed up to Rebilly. Important This request does not require API authentication and can be completed as a guest. Example const token = 1234567890abcdefghijklmnop ; const activation = await api . account . activate ({ token }); // the request does not return any fields but // you can confirm the success using the status code console . log ( activation . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. forgotPassword forgotPassword ({ data }) - {Member} Sends an email with a link containing a token to reset user password. Important This request does not require API authentication and can be completed as a guest. Example const data = { email : acme+test@rebilly.com }; const request = await api . account . forgotPassword ({ data }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. resetSandbox resetSandbox () - {Member} Reset the contents of the sandbox mode. This is useful for testing and developing your integration with Rebilly. Example const request = await api . account . resetSandbox (); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member","title":"Accounts"},{"location":"reference/resources/account/#account-apiaccount","text":"Member of RebillyAPI Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.","title":"Account api.account"},{"location":"reference/resources/account/#signup","text":"signUp ({ data }) - {Member} Creates a new user in Rebilly and sends an email confirmation. The user will have to activate his account using the email confirmation that he receives. Important This request does not require API authentication and can be completed as a guest. Example const data = { email : acme+test@rebilly.com , company : Acme Imports , firstName : John , lastName : Doe , businessPhone : 14566789 , password : helloworld123 , website : http://acme-imports.com }; const user = await api . account . signUp ({ data }); console . log ( user . fields . id ); Returns A member exposing the newly created user information. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"signUp"},{"location":"reference/resources/account/#signin","text":"signIn ({ data }) - {Member} Sign in to a user account and return the session token (JWT). Optionally you can provide the expired time of the session using expiredTime as a datetime in the future. Important This request does not require API authentication and can be completed as a guest. See api.setSessionToken Example const data = { email : acme+test@rebilly.com , password : helloworld123 // optionally you can define an `expiredTime` to // limit the duration of the session token //expiredTime: 2017-09-18T19:17:39Z }; const session = await api . account . signIn ({ data }); // the session token (JWT) can be used in // conjunction with api.setSessionToken to authorize API // requests in the browser console . log ( session . fields . token ); Returns A member exposing the session information. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"signIn"},{"location":"reference/resources/account/#logout","text":"logout () - {Member} Logs out the current authenticated user and destroys his active session. This will invalidate the session token. Session Expiry A session will expire automatically if you do not logout the user. However we recommend you logout the user programmatically whenever his session should expire. Example const logout = await api . account . logout (); // the request does not return any fields but // you can confirm the success using the status code console . log ( logout . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"logout"},{"location":"reference/resources/account/#activate","text":"activate ({ token }) - {Member} Activate a user account with the token he received by email when the user signed up to Rebilly. Important This request does not require API authentication and can be completed as a guest. Example const token = 1234567890abcdefghijklmnop ; const activation = await api . account . activate ({ token }); // the request does not return any fields but // you can confirm the success using the status code console . log ( activation . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"activate"},{"location":"reference/resources/account/#forgotpassword","text":"forgotPassword ({ data }) - {Member} Sends an email with a link containing a token to reset user password. Important This request does not require API authentication and can be completed as a guest. Example const data = { email : acme+test@rebilly.com }; const request = await api . account . forgotPassword ({ data }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"forgotPassword"},{"location":"reference/resources/account/#resetsandbox","text":"resetSandbox () - {Member} Reset the contents of the sandbox mode. This is useful for testing and developing your integration with Rebilly. Example const request = await api . account . resetSandbox (); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member","title":"resetSandbox"},{"location":"reference/resources/api-keys/","text":"API Keys api . apiKeys Member of RebillyAPI Allows you to manage your API keys. Create or modify existing ones with different datetime settings. API keys are private and should only be used for server-side operations. getAll getAll ({ limit opt , offset opt , sort opt }) -> {Collection} Get a collection of API keys. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . apiKeys . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . apiKeys . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( apiKey = console . log ( apiKey . fields . description )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . Returns A collection of API keys. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get an API key by its id . Example const apiKey = await api . apiKeys . get ({ id : foobar-001 }); console . log ( apiKey . fields . description ); Returns A member exposing the API key fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create an API key. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new API key const data = { description : My new API key , // the `datetimeFormat` defines how dates will be saved // and handled by Rebilly for this API key // can be either `iso8601` (default) or `mysql` datetimeFormat : iso8601 }; // the ID is optional const firstKey = await api . apiKeys . create ({ data }); // or you can provide one const secondKey = await api . apiKeys . create ({ id : my-second-key , data }); Returns A member exposing the created API key fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update an API key by using its id . Example // define values to update const data = { description : A better description }; const apiKey = await api . apiKeys . update ({ id : my-second-key , data }); Returns A member exposing the updated API key fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete an API key by using its id . Example const request = await api . apiKeys . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"API Keys"},{"location":"reference/resources/api-keys/#api-keys-apiapikeys","text":"Member of RebillyAPI Allows you to manage your API keys. Create or modify existing ones with different datetime settings. API keys are private and should only be used for server-side operations.","title":"API Keys api.apiKeys"},{"location":"reference/resources/api-keys/#getall","text":"getAll ({ limit opt , offset opt , sort opt }) -> {Collection} Get a collection of API keys. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . apiKeys . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . apiKeys . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( apiKey = console . log ( apiKey . fields . description )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . Returns A collection of API keys. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/api-keys/#get","text":"get ({ id }) - {Member} Get an API key by its id . Example const apiKey = await api . apiKeys . get ({ id : foobar-001 }); console . log ( apiKey . fields . description ); Returns A member exposing the API key fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/api-keys/#create","text":"create ({ id opt , data }) - {Member} Create an API key. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new API key const data = { description : My new API key , // the `datetimeFormat` defines how dates will be saved // and handled by Rebilly for this API key // can be either `iso8601` (default) or `mysql` datetimeFormat : iso8601 }; // the ID is optional const firstKey = await api . apiKeys . create ({ data }); // or you can provide one const secondKey = await api . apiKeys . create ({ id : my-second-key , data }); Returns A member exposing the created API key fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/api-keys/#update","text":"update ({ id , data }) - {Member} Update an API key by using its id . Example // define values to update const data = { description : A better description }; const apiKey = await api . apiKeys . update ({ id : my-second-key , data }); Returns A member exposing the updated API key fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/api-keys/#delete","text":"delete ({ id }) - {Member} Delete an API key by using its id . Example const request = await api . apiKeys . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/bank-accounts/","text":"Bank Accounts api . bankAccounts Member of RebillyAPI Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of bank accounts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . bankAccounts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . bankAccounts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( bankAccount = console . log ( bankAccount . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of bank accounts. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a bank account by its id . Example const bankAccount = await api . bankAccounts . get ({ id : foobar-001 }); console . log ( bankAccount . fields . status ); Returns A member exposing the bank account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a bank account. Optionally provide a specific id to use, or let Rebilly generate one. You can either provide detailed bank account fields or replace them with the token (payment token) field. Example // first set the required properties for the new bank account const data = { bankName : My Fake Financial , routingNumber : 12345678 , accountNumber : 12345678 , accountType : checking , customerId : acme-001 }; // the ID is optional const firstKey = await api . bankAccounts . create ({ data }); // or you can provide one const secondKey = await api . bankAccounts . create ({ id : my-second-id , data }); Returns A member exposing the created bank account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deactivate deactivate ({ id }) - {Member} Deactivate a bank account by using its id . This will prevent it from being used by the customer. Example const bankAccount = await api . bankAccounts . deactivate ({ id : my-second-key }); // the bank account status will be updated to reflect the modification console . log ( bankAccount . fields . status ); Returns A member exposing the deactivated bank account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Bank Accounts"},{"location":"reference/resources/bank-accounts/#bank-accounts-apibankaccounts","text":"Member of RebillyAPI Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.","title":"Bank Accounts api.bankAccounts"},{"location":"reference/resources/bank-accounts/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of bank accounts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . bankAccounts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . bankAccounts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( bankAccount = console . log ( bankAccount . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of bank accounts. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/bank-accounts/#get","text":"get ({ id }) - {Member} Get a bank account by its id . Example const bankAccount = await api . bankAccounts . get ({ id : foobar-001 }); console . log ( bankAccount . fields . status ); Returns A member exposing the bank account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/bank-accounts/#create","text":"create ({ id opt , data }) - {Member} Create a bank account. Optionally provide a specific id to use, or let Rebilly generate one. You can either provide detailed bank account fields or replace them with the token (payment token) field. Example // first set the required properties for the new bank account const data = { bankName : My Fake Financial , routingNumber : 12345678 , accountNumber : 12345678 , accountType : checking , customerId : acme-001 }; // the ID is optional const firstKey = await api . bankAccounts . create ({ data }); // or you can provide one const secondKey = await api . bankAccounts . create ({ id : my-second-id , data }); Returns A member exposing the created bank account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/bank-accounts/#deactivate","text":"deactivate ({ id }) - {Member} Deactivate a bank account by using its id . This will prevent it from being used by the customer. Example const bankAccount = await api . bankAccounts . deactivate ({ id : my-second-key }); // the bank account status will be updated to reflect the modification console . log ( bankAccount . fields . status ); Returns A member exposing the deactivated bank account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deactivate"},{"location":"reference/resources/blacklists/","text":"Blacklists api . blacklists Member of RebillyAPI Blacklists are used to manage risk and fraud by aborting an operation if the blacklisted value matches a field related to a customer. Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards. A greylist is just like a blacklist, but with an expiration date. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of blacklist items. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . blacklists . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . blacklists . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( blacklistItem = console . log ( blacklistItem . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of blacklist items. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a blacklist item by its id . Example const blacklistItem = await api . blacklists . get ({ id : foobar-001 }); console . log ( blacklistItem . fields . status ); Returns A member exposing the blacklist item fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a blacklist item entry. Optionally provide a specific id to use, or let Rebilly generate one. If you do not provide an expiry time the item will be permanent. The supported blacklist item types are: payment-card customer-id email ip-address country fingerprint bin email-domain bank-account address Example // first set the required properties for the new blacklist item const data = { type : ip-address , value : 63.118.98.100 // optionally provide an `expiredTime` to make // the item expire and function like a `greylist` // expiredTime: 2017-09-18T21:50:44Z }; // the ID is optional const firstKey = await api . blacklists . create ({ data }); // or you can provide one const secondKey = await api . blacklists . create ({ id : my-second-id , data }); Returns A member exposing the created blacklist item fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a blacklist item by using its id . This will remove any restrictions on the value of the blacklist item. Example const request = await api . blacklists . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Blacklists"},{"location":"reference/resources/blacklists/#blacklists-apiblacklists","text":"Member of RebillyAPI Blacklists are used to manage risk and fraud by aborting an operation if the blacklisted value matches a field related to a customer. Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards. A greylist is just like a blacklist, but with an expiration date.","title":"Blacklists api.blacklists"},{"location":"reference/resources/blacklists/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of blacklist items. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . blacklists . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . blacklists . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( blacklistItem = console . log ( blacklistItem . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of blacklist items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/blacklists/#get","text":"get ({ id }) - {Member} Get a blacklist item by its id . Example const blacklistItem = await api . blacklists . get ({ id : foobar-001 }); console . log ( blacklistItem . fields . status ); Returns A member exposing the blacklist item fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/blacklists/#create","text":"create ({ id opt , data }) - {Member} Create a blacklist item entry. Optionally provide a specific id to use, or let Rebilly generate one. If you do not provide an expiry time the item will be permanent. The supported blacklist item types are: payment-card customer-id email ip-address country fingerprint bin email-domain bank-account address Example // first set the required properties for the new blacklist item const data = { type : ip-address , value : 63.118.98.100 // optionally provide an `expiredTime` to make // the item expire and function like a `greylist` // expiredTime: 2017-09-18T21:50:44Z }; // the ID is optional const firstKey = await api . blacklists . create ({ data }); // or you can provide one const secondKey = await api . blacklists . create ({ id : my-second-id , data }); Returns A member exposing the created blacklist item fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/blacklists/#delete","text":"delete ({ id }) - {Member} Delete a blacklist item by using its id . This will remove any restrictions on the value of the blacklist item. Example const request = await api . blacklists . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/checkout-pages/","text":"Checkout Pages api . checkoutPages Member of RebillyAPI Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. Each page is attached to a plan and website. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of checkout pages. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . checkoutPages . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . checkoutPages . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( checkoutPage = console . log ( checkoutPage . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of checkout pages. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a checkout page by its id . Example const checkoutPage = await api . checkoutPages . get ({ id : foobar-001 }); console . log ( checkoutPage . fields . status ); Returns A member exposing the checkout page fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a checkout page for a specific plan and website. Optionally provide a specific id to use, or let Rebilly generate one. The final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's checkoutPageUri and your checkout page's uriPath . Example: https://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path Warning You must have at least one plan and one website (with a checkoutPageUri defined) before being able to create checkout pages. Example // first set the required properties for the new checkout page const data = { uriPath : my-first-checkout , name : Main checkout page , planId : my-plan-id , websiteId : my-website-id }; // the ID is optional const firstKey = await api . checkoutPages . create ({ data }); // or you can provide one const secondKey = await api . checkoutPages . create ({ id : my-second-id , data }); Returns A member exposing the created checkout page fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a checkout page using its id . Example // define the values to update const data = { name : Best checkout page }; const checkoutPage = await api . checkoutPages . update ({ id : my-second-id , data }); Returns A member exposing the updated checkout page fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a checkout page by using its id . Example const request = await api . checkoutPages . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Checkout Pages"},{"location":"reference/resources/checkout-pages/#checkout-pages-apicheckoutpages","text":"Member of RebillyAPI Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. Each page is attached to a plan and website.","title":"Checkout Pages api.checkoutPages"},{"location":"reference/resources/checkout-pages/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of checkout pages. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . checkoutPages . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . checkoutPages . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( checkoutPage = console . log ( checkoutPage . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of checkout pages. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/checkout-pages/#get","text":"get ({ id }) - {Member} Get a checkout page by its id . Example const checkoutPage = await api . checkoutPages . get ({ id : foobar-001 }); console . log ( checkoutPage . fields . status ); Returns A member exposing the checkout page fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/checkout-pages/#create","text":"create ({ id opt , data }) - {Member} Create a checkout page for a specific plan and website. Optionally provide a specific id to use, or let Rebilly generate one. The final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's checkoutPageUri and your checkout page's uriPath . Example: https://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path Warning You must have at least one plan and one website (with a checkoutPageUri defined) before being able to create checkout pages. Example // first set the required properties for the new checkout page const data = { uriPath : my-first-checkout , name : Main checkout page , planId : my-plan-id , websiteId : my-website-id }; // the ID is optional const firstKey = await api . checkoutPages . create ({ data }); // or you can provide one const secondKey = await api . checkoutPages . create ({ id : my-second-id , data }); Returns A member exposing the created checkout page fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/checkout-pages/#update","text":"update ({ id , data }) - {Member} Update a checkout page using its id . Example // define the values to update const data = { name : Best checkout page }; const checkoutPage = await api . checkoutPages . update ({ id : my-second-id , data }); Returns A member exposing the updated checkout page fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/checkout-pages/#delete","text":"delete ({ id }) - {Member} Delete a checkout page by using its id . Example const request = await api . checkoutPages . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/contacts/","text":"Contacts api . contacts Member of RebillyAPI Define contact information for your customers. Manage multiple addresses for the same customer. getAll getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of contacts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . contacts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . contacts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( contact = console . log ( contact . fields . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of contacts. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a contact by its id . Example const contact = await api . contacts . get ({ id : foobar-001 }); console . log ( contact . fields . firstName ); Returns A member exposing the contact fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of contacts in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . contacts . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . contacts . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a contact for a specific customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new contact const data = { firstName : John , lastName : Doe , emails : [{ label : main , value : john.doe+test@grr.la , primary : true }], customerId : foobar-0001 }; // the ID is optional const firstContact = await api . contacts . create ({ data }); // or you can provide one const secondContact = await api . contacts . create ({ id : my-second-id , data }); Returns A member exposing the created contact fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a contact using its id for a specific customer. Example // define the values to update const data = { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : false }], customerId : foobar-0001 }; const contact = await api . contacts . update ({ id : my-second-id , data }); Returns A member exposing the updated contact fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a contact by using its id . Example const request = await api . contacts . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Contacts"},{"location":"reference/resources/contacts/#contacts-apicontacts","text":"Member of RebillyAPI Define contact information for your customers. Manage multiple addresses for the same customer.","title":"Contacts api.contacts"},{"location":"reference/resources/contacts/#getall","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of contacts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . contacts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . contacts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( contact = console . log ( contact . fields . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of contacts. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/contacts/#get","text":"get ({ id }) - {Member} Get a contact by its id . Example const contact = await api . contacts . get ({ id : foobar-001 }); console . log ( contact . fields . firstName ); Returns A member exposing the contact fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/contacts/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of contacts in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . contacts . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . contacts . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/contacts/#create","text":"create ({ id opt , data }) - {Member} Create a contact for a specific customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new contact const data = { firstName : John , lastName : Doe , emails : [{ label : main , value : john.doe+test@grr.la , primary : true }], customerId : foobar-0001 }; // the ID is optional const firstContact = await api . contacts . create ({ data }); // or you can provide one const secondContact = await api . contacts . create ({ id : my-second-id , data }); Returns A member exposing the created contact fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/contacts/#update","text":"update ({ id , data }) - {Member} Update a contact using its id for a specific customer. Example // define the values to update const data = { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : false }], customerId : foobar-0001 }; const contact = await api . contacts . update ({ id : my-second-id , data }); Returns A member exposing the updated contact fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/contacts/#delete","text":"delete ({ id }) - {Member} Delete a contact by using its id . Example const request = await api . contacts . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/coupons/","text":"Coupons api . coupons Member of RebillyAPI Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of coupons. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . coupons . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . coupons . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( coupon = console . log ( coupon . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of coupons. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ redemptionCode }) - {Member} Get a coupon by its redemptionCode . Example const coupon = await api . coupons . get ({ redemptionCode : foobar-001 }); console . log ( coupon . fields . status ); Returns A member exposing the coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ redemptionCode opt , data }) - {Member} Create a coupon for a specific plan and website. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the required properties for the new coupon const data = { description : a new coupon , issuedTime : 2017-09-19T20:46:44Z , discount : { type : percent , value : 12 }, restrictions : [{ type : discounts-per-redemption , quantity : 12 }] }; // the ID is optional const firstKey = await api . coupons . create ({ data }); // or you can provide one const secondKey = await api . coupons . create ({ redemptionCode : my-second-id , data }); Returns A member exposing the created coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ redemptionCode , data }) - {Member} Update a coupon using its redemptionCode . Example // define the values to update const data = { description : a small update }; const coupon = await api . coupons . update ({ redemptionCode : my-second-id , data }); Returns A member exposing the updated coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllRedemptions getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of coupon redemptions. Each entry will be a member. A coupon redemption represents an instance where a coupon was activated for a customer. Example // all parameters are optional const firstCollection = await api . coupons . getAllRedemptions (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . coupons . getAllRedemptions ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( coupon = console . log ( coupon . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of coupon redemptions. Type Collection API Spec See the detailed API spec for all payload fields and response data. getRedemption getRedemption ({ id }) - {Member} Get a coupon redemption by its id . A coupon redemption represents an instance where a coupon was activated for a customer. Example const redemption = await api . coupons . getRedemption ({ id : foobar-001 }); console . log ( redemption . fields . id ); Returns A member exposing the coupon redemption fields. Type Member API Spec See the detailed API spec for all payload fields and response data. cancelRedemption cancelRedemption ({ id }) - {Member} Cancel a coupon redemption by its id . Example const cancellation = await api . coupons . cancelRedemption ({ id : foobar-001 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( cancellation . response . status ); // 201 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. redeem redeem ({ data }) - {Member} Redeem a coupon using its redemptionCode for a specific customer. Example // build the redemption data const data = { redemptionCode : my-best-coupon , customerId : foobar-001 }; const redemption = await api . coupons . redeem ({ data }); console . log ( redemption . fields . id ); Returns A member exposing the coupon redemption fields. Type Member API Spec See the detailed API spec for all payload fields and response data. setExpiry setExpiry ({ redemptionCode , data }) - {Member} Set the exiry time of a coupon using its redemptionCode . Pass null as the expiredTime to instantly expire the coupon. Once expired the status of the coupon will change to expired . Example // build the expiry data const data = { expiredTime : 2017-09-19T20:46:44Z }; const coupon = await api . coupons . setExpiry ({ redemptionCode : my-best-coupon , data }); console . log ( redemption . coupon . status ); Returns A member exposing the coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Coupons"},{"location":"reference/resources/coupons/#coupons-apicoupons","text":"Member of RebillyAPI Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.","title":"Coupons api.coupons"},{"location":"reference/resources/coupons/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of coupons. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . coupons . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . coupons . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( coupon = console . log ( coupon . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of coupons. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/coupons/#get","text":"get ({ redemptionCode }) - {Member} Get a coupon by its redemptionCode . Example const coupon = await api . coupons . get ({ redemptionCode : foobar-001 }); console . log ( coupon . fields . status ); Returns A member exposing the coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/coupons/#create","text":"create ({ redemptionCode opt , data }) - {Member} Create a coupon for a specific plan and website. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the required properties for the new coupon const data = { description : a new coupon , issuedTime : 2017-09-19T20:46:44Z , discount : { type : percent , value : 12 }, restrictions : [{ type : discounts-per-redemption , quantity : 12 }] }; // the ID is optional const firstKey = await api . coupons . create ({ data }); // or you can provide one const secondKey = await api . coupons . create ({ redemptionCode : my-second-id , data }); Returns A member exposing the created coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/coupons/#update","text":"update ({ redemptionCode , data }) - {Member} Update a coupon using its redemptionCode . Example // define the values to update const data = { description : a small update }; const coupon = await api . coupons . update ({ redemptionCode : my-second-id , data }); Returns A member exposing the updated coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/coupons/#getallredemptions","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of coupon redemptions. Each entry will be a member. A coupon redemption represents an instance where a coupon was activated for a customer. Example // all parameters are optional const firstCollection = await api . coupons . getAllRedemptions (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . coupons . getAllRedemptions ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( coupon = console . log ( coupon . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of coupon redemptions. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllRedemptions"},{"location":"reference/resources/coupons/#getredemption","text":"getRedemption ({ id }) - {Member} Get a coupon redemption by its id . A coupon redemption represents an instance where a coupon was activated for a customer. Example const redemption = await api . coupons . getRedemption ({ id : foobar-001 }); console . log ( redemption . fields . id ); Returns A member exposing the coupon redemption fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRedemption"},{"location":"reference/resources/coupons/#cancelredemption","text":"cancelRedemption ({ id }) - {Member} Cancel a coupon redemption by its id . Example const cancellation = await api . coupons . cancelRedemption ({ id : foobar-001 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( cancellation . response . status ); // 201 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"cancelRedemption"},{"location":"reference/resources/coupons/#redeem","text":"redeem ({ data }) - {Member} Redeem a coupon using its redemptionCode for a specific customer. Example // build the redemption data const data = { redemptionCode : my-best-coupon , customerId : foobar-001 }; const redemption = await api . coupons . redeem ({ data }); console . log ( redemption . fields . id ); Returns A member exposing the coupon redemption fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"redeem"},{"location":"reference/resources/coupons/#setexpiry","text":"setExpiry ({ redemptionCode , data }) - {Member} Set the exiry time of a coupon using its redemptionCode . Pass null as the expiredTime to instantly expire the coupon. Once expired the status of the coupon will change to expired . Example // build the expiry data const data = { expiredTime : 2017-09-19T20:46:44Z }; const coupon = await api . coupons . setExpiry ({ redemptionCode : my-best-coupon , data }); console . log ( redemption . coupon . status ); Returns A member exposing the coupon fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"setExpiry"},{"location":"reference/resources/credential-hashes/","text":"Credential Hashes api . credentialHashes Member of RebillyAPI Credential hashes are used to authorize your webhooks or emails in various parts of Rebilly. getEmailCredential getEmailCredential ({ hash }) - {Member} Get the details of an email credential using the hash . Example const details = await api . credentialHashes . getEmailCredential ({ hash : foobar-001 }); console . log ( details . fields . host ); Returns A member exposing the email credential details. Type Member API Spec See the detailed API spec for all payload fields and response data. getWebhookCredential getWebhookCredential ({ hash }) - {Member} Get the details of a webhook credential using the hash . Example const details = await api . credentialHashes . getWebhookCredential ({ hash : foobar-001 }); console . log ( details . fields . host ); Returns A member exposing the webhook credential details. Type Member API Spec See the detailed API spec for all payload fields and response data. getMailgunCredential getMailgunCredential ({ hash }) - {Member} Get the details of a Mailgun credential using the hash . Example const details = await api . credentialHashes . getMailgunCredential ({ hash : foobar-001 }); console . log ( details . fields . domain ); Returns A member exposing the Mailgun credential details. Type Member API Spec See the detailed API spec for all payload fields and response data. getAWSSESCredential getAWSSESCredential ({ hash }) - {Member} Get the details of an AWS SES credential using the hash . Example const details = await api . credentialHashes . getAWSSESCredential ({ hash : foobar-001 }); console . log ( details . fields . configurationSetName ); Returns A member exposing the AWS SES credential details. Type Member API Spec See the detailed API spec for all payload fields and response data. getSendGridCredential getSendGridCredential ({ hash }) - {Member} Get the details of an SendGrid credential using the hash . Example const details = await api . credentialHashes . getSendGridCredential ({ hash : foobar-001 }); console . log ( details . fields . apiKey ); Returns A member exposing the SendGrid credential details. Type Member API Spec See the detailed API spec for all payload fields and response data. createEmailCredential createEmailCredential ({ data }) - {Member} Create new email credentials to use in the events (Rules Engine). Supported encryption values: none (default) tls ssl Authorization Schemes The auth object structure is needed to define the authorization credentials for the remote email account. Type Fields none - plain username , password login cram-md5 Immutable Credentials The authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change. Example // first set the required properties for the new credential hash const data = { host : foobar.test.com , port : 465 , encryption : ssl , auth : { type : login , username : foobar , password : fuubar } }; const credential = await api . credentialHashes . createEmailCredential ({ data }); // use the hash to authenticate your email action in the system events console . log ( credential . fields . hash ); Returns A member exposing the created email credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createWebhookCredential createWebhookCredential ({ data }) - {Member} Create new webhook credentials to use in the events (Rules Engine) or for global webhooks. Authorization Schemes The auth object structure is needed to define the authorization credentials for the remote webhook host. Type Fields none - basic username , password digest oauth1 consumerKey , consumerSecret , token , tokenSecret Immutable Credentials The authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change. Example // first set the required properties for the new credential hash const data = { host : foobar.test.com , auth : { type : none } }; const credential = await api . credentialHashes . createWebhookCredential ({ data }); // use the hash to authenticate your webhook in Rebilly console . log ( credential . fields . hash ); Returns A member exposing the created webhook credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createMailgunCredential createMailgunCredential ({ data }) - {Member} Create new Mailgun credentials to use in the events (Rules Engine). Immutable Credentials The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change. Example // first set the required properties for the new credential hash const data = { emailFrom : me@mydomain.com , // sender email apiKey : key-1234567890 , // use your Mailgun API key domain : mail.mydomain.com // Mailgun domain }; const credential = await api . credentialHashes . createMailgunCredential ({ data }); // use the hash to authenticate your email action in the rules engine console . log ( credential . fields . hash ); Returns A member exposing the created Mailgun credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createAWSSESCredential createAWSSESCredential ({ data }) - {Member} Create new AWS SES credentials to use in the events (Rules Engine). Immutable Credentials The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change. Example // first set the required properties for the new credential hash const data = { key : BWITYO4UARGDLMFY6UDP , secret : 8D34yYHOK9+yM7pDnNUO3UTO/5b8Wy/PGNyzTRmG , region : us-west-2 , configurationSetName : SpecialConfigurationSet , }; const credential = await api . credentialHashes . createAWSSESCredential ({ data }); // use the hash to authenticate your email action in the rules engine console . log ( credential . fields . hash ); Returns A member exposing the created AWS SES credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createSendGridCredential createSendGridCredential ({ data }) - {Member} Create new SendGrid credentials to use in the events (Rules Engine). Immutable Credentials The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change. Example // first set the required properties for the new credential hash const data = { apiKey : SO.WFbRlSWUQJSb40eny4RuZQ.7liHLZ4l1jaPCgbu02b-aGH-bo4RB8z9fK3aUd1heeL , }; const credential = await api . credentialHashes . createSendGridCredential ({ data }); // use the hash to authenticate your email action in the rules engine console . log ( credential . fields . hash ); Returns A member exposing the created SendGrid credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Credential Hashes"},{"location":"reference/resources/credential-hashes/#credential-hashes-apicredentialhashes","text":"Member of RebillyAPI Credential hashes are used to authorize your webhooks or emails in various parts of Rebilly.","title":"Credential Hashes api.credentialHashes"},{"location":"reference/resources/credential-hashes/#getemailcredential","text":"getEmailCredential ({ hash }) - {Member} Get the details of an email credential using the hash . Example const details = await api . credentialHashes . getEmailCredential ({ hash : foobar-001 }); console . log ( details . fields . host ); Returns A member exposing the email credential details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getEmailCredential"},{"location":"reference/resources/credential-hashes/#getwebhookcredential","text":"getWebhookCredential ({ hash }) - {Member} Get the details of a webhook credential using the hash . Example const details = await api . credentialHashes . getWebhookCredential ({ hash : foobar-001 }); console . log ( details . fields . host ); Returns A member exposing the webhook credential details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getWebhookCredential"},{"location":"reference/resources/credential-hashes/#getmailguncredential","text":"getMailgunCredential ({ hash }) - {Member} Get the details of a Mailgun credential using the hash . Example const details = await api . credentialHashes . getMailgunCredential ({ hash : foobar-001 }); console . log ( details . fields . domain ); Returns A member exposing the Mailgun credential details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getMailgunCredential"},{"location":"reference/resources/credential-hashes/#getawssescredential","text":"getAWSSESCredential ({ hash }) - {Member} Get the details of an AWS SES credential using the hash . Example const details = await api . credentialHashes . getAWSSESCredential ({ hash : foobar-001 }); console . log ( details . fields . configurationSetName ); Returns A member exposing the AWS SES credential details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getAWSSESCredential"},{"location":"reference/resources/credential-hashes/#getsendgridcredential","text":"getSendGridCredential ({ hash }) - {Member} Get the details of an SendGrid credential using the hash . Example const details = await api . credentialHashes . getSendGridCredential ({ hash : foobar-001 }); console . log ( details . fields . apiKey ); Returns A member exposing the SendGrid credential details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getSendGridCredential"},{"location":"reference/resources/credential-hashes/#createemailcredential","text":"createEmailCredential ({ data }) - {Member} Create new email credentials to use in the events (Rules Engine). Supported encryption values: none (default) tls ssl Authorization Schemes The auth object structure is needed to define the authorization credentials for the remote email account. Type Fields none - plain username , password login cram-md5 Immutable Credentials The authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change. Example // first set the required properties for the new credential hash const data = { host : foobar.test.com , port : 465 , encryption : ssl , auth : { type : login , username : foobar , password : fuubar } }; const credential = await api . credentialHashes . createEmailCredential ({ data }); // use the hash to authenticate your email action in the system events console . log ( credential . fields . hash ); Returns A member exposing the created email credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createEmailCredential"},{"location":"reference/resources/credential-hashes/#createwebhookcredential","text":"createWebhookCredential ({ data }) - {Member} Create new webhook credentials to use in the events (Rules Engine) or for global webhooks. Authorization Schemes The auth object structure is needed to define the authorization credentials for the remote webhook host. Type Fields none - basic username , password digest oauth1 consumerKey , consumerSecret , token , tokenSecret Immutable Credentials The authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change. Example // first set the required properties for the new credential hash const data = { host : foobar.test.com , auth : { type : none } }; const credential = await api . credentialHashes . createWebhookCredential ({ data }); // use the hash to authenticate your webhook in Rebilly console . log ( credential . fields . hash ); Returns A member exposing the created webhook credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createWebhookCredential"},{"location":"reference/resources/credential-hashes/#createmailguncredential","text":"createMailgunCredential ({ data }) - {Member} Create new Mailgun credentials to use in the events (Rules Engine). Immutable Credentials The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change. Example // first set the required properties for the new credential hash const data = { emailFrom : me@mydomain.com , // sender email apiKey : key-1234567890 , // use your Mailgun API key domain : mail.mydomain.com // Mailgun domain }; const credential = await api . credentialHashes . createMailgunCredential ({ data }); // use the hash to authenticate your email action in the rules engine console . log ( credential . fields . hash ); Returns A member exposing the created Mailgun credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createMailgunCredential"},{"location":"reference/resources/credential-hashes/#createawssescredential","text":"createAWSSESCredential ({ data }) - {Member} Create new AWS SES credentials to use in the events (Rules Engine). Immutable Credentials The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change. Example // first set the required properties for the new credential hash const data = { key : BWITYO4UARGDLMFY6UDP , secret : 8D34yYHOK9+yM7pDnNUO3UTO/5b8Wy/PGNyzTRmG , region : us-west-2 , configurationSetName : SpecialConfigurationSet , }; const credential = await api . credentialHashes . createAWSSESCredential ({ data }); // use the hash to authenticate your email action in the rules engine console . log ( credential . fields . hash ); Returns A member exposing the created AWS SES credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createAWSSESCredential"},{"location":"reference/resources/credential-hashes/#createsendgridcredential","text":"createSendGridCredential ({ data }) - {Member} Create new SendGrid credentials to use in the events (Rules Engine). Immutable Credentials The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change. Example // first set the required properties for the new credential hash const data = { apiKey : SO.WFbRlSWUQJSb40eny4RuZQ.7liHLZ4l1jaPCgbu02b-aGH-bo4RB8z9fK3aUd1heeL , }; const credential = await api . credentialHashes . createSendGridCredential ({ data }); // use the hash to authenticate your email action in the rules engine console . log ( credential . fields . hash ); Returns A member exposing the created SendGrid credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createSendGridCredential"},{"location":"reference/resources/custom-events/","text":"Custom Events api . customEvents Member of RebillyAPI Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. For example, a custom event could be used to send you an email before a customer's subscription is about to expire. getAll getAll ({ limit opt , offset opt , sort opt }) -> {Collection} Get a collection of custom events. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . customEvents . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . customEvents . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customEvent = console . log ( customEvent . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . Returns A collection of custom events. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a custom event by its id . Example const customEvent = await api . customEvents . get ({ id : foobar-001 }); console . log ( customEvent . fields . title ); Returns A member exposing the custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a custom event derived from a system event with a specific schedule and chronology. The custom event will be queued for integration. Optionally provide a specific id to use, or let Rebilly generate one. Custom Event Queue When created, a new custom event will be queued for integration. This is a temporary state while Rebilly processes events. Until the queue is cleared the custom event will not be available for get or getAll requests. Use customEvents.getScheduled to view the details of an event still in the queue. Supported eventType values: subscription-ended subscription-trial-ended subscription-renewed payment-card-expired invoice-past-due invoice-issued invoice-voided invoice-paid invoice-abandoned API Spec See the API spec for detailed information on the values and structure of the properties chronology and scheduleInstruction . Example // first set the required properties for the new custom event const data = { eventType : subscription-ended , title : My first custom event , description : More information , chronology : before , scheduleInstruction : { method : date-interval , duration : 1 , unit : day } }; // the ID is optional const firstKey = await api . customEvents . create ({ data }); // or you can provide one const secondKey = await api . customEvents . create ({ id : my-second-id , data }); Returns A member exposing the created custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a custom event using its id . Example const request = await api . customEvents . delete ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getRules getRules ({ id }) - {Member} Get a custom event's rule set by its id . Example const ruleset = await api . customEvents . getRules ({ id : foobar-001 }); //the rules are contained within the ruleset console . log ( ruleset . fields . rules ); Returns A member exposing the custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createRules createRules ({ id , data }) - {Member} Create a set of rules for a custom event identified by its id . Rules Engine The rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define at least one rule const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . customEvents . createRules ({ data }); console . log ( ruleset . fields . version ); Returns A member exposing the custom event's newly created ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data. updateRules updateRules ({ id , data }) - {Member} Update the ruleset for a custom event identified by its id . A custom event can only have one ruleset, but the rules within can be modified or deleted. Rules Engine The rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define the ruleset to override the current values within // the custom event const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . customEvents . updateRules ({ data }); // each time the event s ruleset is modified // the version number is incremented console . log ( ruleset . fields . version ); Returns A member exposing the custom event's updated ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data. getRulesHistory getRulesHistory ({ id , limit opt , offset opt }) - {Collection} Retrieve the change history of the set of rules for the selected custom event using its id . The history is updated each time you change the rules. Version History This method does not return the rulesets for each version. It will only provide you with the time each version was created at. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Example // get the latest 20 versions for this event ID const history = await api . customEvents . getRulesVersionNumber ({ id : foobar-001 , limit : 20 }); // each item exposes the version and `createdTime` history . items . forEach ( edit = console . log ( edit . fields . version )) Returns A collection exposing the custom event history. Type Collection API Spec See the detailed API spec for all payload fields and response data. getRulesVersionNumber getRulesVersionNumber ({ id , version }) - {Member} Retrieve the version details of the rules for the selected custom event using its id . Version History This method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use customEvents.getRulesVersionDetail . Example // get version #2 details for this event ID const history = await api . customEvents . getRulesVersionNumber ({ id : foobar-001 , version : 2 }); // the history exposes the version number and its `createdTime` console . log ( history . fields . createdTime ); Returns A member exposing the version details. Type Member API Spec See the detailed API spec for all payload fields and response data. getRulesVersionDetail getRulesVersionDetail ({ id , version }) - {Member} Retrieve the ruleset of a specific version of the rules for the selected custom event using its id . Ruleset Version Use this method to retrieve the ruleset of an event at a specific version number. Example // get version #2 for this event ID const version = await api . customEvents . getRulesVersionDetail ({ id : foobar-001 , version : 2 }); // the version exposes the ruleset console . log ( version . fields . rules ); Returns A member exposing the version fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllScheduled getAllScheduled ({ limit opt , offset opt }) -> {Collection} Get a collection of scheduled custom events. Each entry will be a member. Temporary State Each time a custom event is created it is inserted in an integration queue. It will temporarily remain in the queue until it is processed by Rebilly, at which point it will no longer be visible as a scheduled event. Example // all parameters are optional const firstCollection = await api . customEvents . getAllScheduled (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customEvents . getAllScheduled ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customEvent = console . log ( customEvent . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of scheduled custom events. Type Collection API Spec See the detailed API spec for all payload fields and response data. getScheduled getScheduled ({ id }) - {Member} Get a scheduled custom event by its id . Temporary State Scheduled custom events are temporarily in the integration queue until Rebilly processes them. Example const scheduledEvent = await api . customEvents . getScheduled ({ id : foobar-002 }); console . log ( scheduledEvent . fields . title ); Returns A member exposing the scheduled custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteScheduled deleteScheduled ({ id }) - {Member} Delete a scheduled custom event by using its id . Example const request = await api . customEvents . deleteScheduled ({ id : foobar-002 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Custom Events"},{"location":"reference/resources/custom-events/#custom-events-apicustomevents","text":"Member of RebillyAPI Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. For example, a custom event could be used to send you an email before a customer's subscription is about to expire.","title":"Custom Events api.customEvents"},{"location":"reference/resources/custom-events/#getall","text":"getAll ({ limit opt , offset opt , sort opt }) -> {Collection} Get a collection of custom events. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . customEvents . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . customEvents . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customEvent = console . log ( customEvent . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . Returns A collection of custom events. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/custom-events/#get","text":"get ({ id }) - {Member} Get a custom event by its id . Example const customEvent = await api . customEvents . get ({ id : foobar-001 }); console . log ( customEvent . fields . title ); Returns A member exposing the custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/custom-events/#create","text":"create ({ id opt , data }) - {Member} Create a custom event derived from a system event with a specific schedule and chronology. The custom event will be queued for integration. Optionally provide a specific id to use, or let Rebilly generate one. Custom Event Queue When created, a new custom event will be queued for integration. This is a temporary state while Rebilly processes events. Until the queue is cleared the custom event will not be available for get or getAll requests. Use customEvents.getScheduled to view the details of an event still in the queue. Supported eventType values: subscription-ended subscription-trial-ended subscription-renewed payment-card-expired invoice-past-due invoice-issued invoice-voided invoice-paid invoice-abandoned API Spec See the API spec for detailed information on the values and structure of the properties chronology and scheduleInstruction . Example // first set the required properties for the new custom event const data = { eventType : subscription-ended , title : My first custom event , description : More information , chronology : before , scheduleInstruction : { method : date-interval , duration : 1 , unit : day } }; // the ID is optional const firstKey = await api . customEvents . create ({ data }); // or you can provide one const secondKey = await api . customEvents . create ({ id : my-second-id , data }); Returns A member exposing the created custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/custom-events/#delete","text":"delete ({ id }) - {Member} Delete a custom event using its id . Example const request = await api . customEvents . delete ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/custom-events/#getrules","text":"getRules ({ id }) - {Member} Get a custom event's rule set by its id . Example const ruleset = await api . customEvents . getRules ({ id : foobar-001 }); //the rules are contained within the ruleset console . log ( ruleset . fields . rules ); Returns A member exposing the custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRules"},{"location":"reference/resources/custom-events/#createrules","text":"createRules ({ id , data }) - {Member} Create a set of rules for a custom event identified by its id . Rules Engine The rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define at least one rule const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . customEvents . createRules ({ data }); console . log ( ruleset . fields . version ); Returns A member exposing the custom event's newly created ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createRules"},{"location":"reference/resources/custom-events/#updaterules","text":"updateRules ({ id , data }) - {Member} Update the ruleset for a custom event identified by its id . A custom event can only have one ruleset, but the rules within can be modified or deleted. Rules Engine The rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define the ruleset to override the current values within // the custom event const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . customEvents . updateRules ({ data }); // each time the event s ruleset is modified // the version number is incremented console . log ( ruleset . fields . version ); Returns A member exposing the custom event's updated ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateRules"},{"location":"reference/resources/custom-events/#getruleshistory","text":"getRulesHistory ({ id , limit opt , offset opt }) - {Collection} Retrieve the change history of the set of rules for the selected custom event using its id . The history is updated each time you change the rules. Version History This method does not return the rulesets for each version. It will only provide you with the time each version was created at. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Example // get the latest 20 versions for this event ID const history = await api . customEvents . getRulesVersionNumber ({ id : foobar-001 , limit : 20 }); // each item exposes the version and `createdTime` history . items . forEach ( edit = console . log ( edit . fields . version )) Returns A collection exposing the custom event history. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesHistory"},{"location":"reference/resources/custom-events/#getrulesversionnumber","text":"getRulesVersionNumber ({ id , version }) - {Member} Retrieve the version details of the rules for the selected custom event using its id . Version History This method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use customEvents.getRulesVersionDetail . Example // get version #2 details for this event ID const history = await api . customEvents . getRulesVersionNumber ({ id : foobar-001 , version : 2 }); // the history exposes the version number and its `createdTime` console . log ( history . fields . createdTime ); Returns A member exposing the version details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesVersionNumber"},{"location":"reference/resources/custom-events/#getrulesversiondetail","text":"getRulesVersionDetail ({ id , version }) - {Member} Retrieve the ruleset of a specific version of the rules for the selected custom event using its id . Ruleset Version Use this method to retrieve the ruleset of an event at a specific version number. Example // get version #2 for this event ID const version = await api . customEvents . getRulesVersionDetail ({ id : foobar-001 , version : 2 }); // the version exposes the ruleset console . log ( version . fields . rules ); Returns A member exposing the version fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesVersionDetail"},{"location":"reference/resources/custom-events/#getallscheduled","text":"getAllScheduled ({ limit opt , offset opt }) -> {Collection} Get a collection of scheduled custom events. Each entry will be a member. Temporary State Each time a custom event is created it is inserted in an integration queue. It will temporarily remain in the queue until it is processed by Rebilly, at which point it will no longer be visible as a scheduled event. Example // all parameters are optional const firstCollection = await api . customEvents . getAllScheduled (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customEvents . getAllScheduled ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customEvent = console . log ( customEvent . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of scheduled custom events. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllScheduled"},{"location":"reference/resources/custom-events/#getscheduled","text":"getScheduled ({ id }) - {Member} Get a scheduled custom event by its id . Temporary State Scheduled custom events are temporarily in the integration queue until Rebilly processes them. Example const scheduledEvent = await api . customEvents . getScheduled ({ id : foobar-002 }); console . log ( scheduledEvent . fields . title ); Returns A member exposing the scheduled custom event fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getScheduled"},{"location":"reference/resources/custom-events/#deletescheduled","text":"deleteScheduled ({ id }) - {Member} Delete a scheduled custom event by using its id . Example const request = await api . customEvents . deleteScheduled ({ id : foobar-002 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteScheduled"},{"location":"reference/resources/custom-fields/","text":"Custom Fields api . customFields Member of RebillyAPI Custom fields can be added to various entities to allow you to store additional data on your customers. getAll getAll ({ resource , limit opt , offset opt }) -> {Collection} Get a collection of custom fields for a specific resource . Each entry will be a member. Example // all parameters except `resource` are optional const firstCollection = await api . customFields . getAll ({ resource : customers }); // alternatively you can specify one or more of them const params = { resource : customers , limit : 20 , offset : 100 }; const secondCollection = await api . customFields . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customField = console . log ( customField . fields . description )); Parameters Name Type Attribute Description resource string - The resource under which the custom fields were created. Allowed values: customers , payment-cards , subscriptions , transactions , websites , contacts , products . limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of custom fields. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ resource , name }) - {Member} Get a custom field by its name for a specific resource . Allowed resource values: customers payment-cards subscriptions transactions websites contacts products Example const customField = await api . customFields . get ({ resource : customers , name : dob }); console . log ( customField . fields . description ); Returns A member exposing the custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ resource , name , data }) - {Member} Create a custom field for a specific resource . API Spec See the API spec for details on how to build the data payload for each custom field type. Example // first set the properties for the new custom field const data = { name : Date of Birth , type : date , description : `The customer s date of birth` }; // define the entire payload const params = { resource : customers , name : dob , data }; const customField = await api . customFields . create ( params ); // you can verify if the custom field is used console . log ( customField . fields . isUsed ); Returns A member exposing the created custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ resource , name , data }) - {Member} Update a custom field for a specific resource using its name . API Spec See the API spec for details on how to build the data payload for each custom field type. Example // first set the properties for the custom field const data = { description : `The customer s DOB` }; // define the entire payload const params = { resource : customers , name : dob , data }; const customField = await api . customFields . update ( params ); // you can verify if the custom field is used console . log ( customField . fields . isUsed ); Returns A member exposing the updated custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ resource , name }) - {Member} Delete a custom field for a resource using its name . Example const request = await api . customFields . delete ({ resource : customers , name : `dob` }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Custom Fields"},{"location":"reference/resources/custom-fields/#custom-fields-apicustomfields","text":"Member of RebillyAPI Custom fields can be added to various entities to allow you to store additional data on your customers.","title":"Custom Fields api.customFields"},{"location":"reference/resources/custom-fields/#getall","text":"getAll ({ resource , limit opt , offset opt }) -> {Collection} Get a collection of custom fields for a specific resource . Each entry will be a member. Example // all parameters except `resource` are optional const firstCollection = await api . customFields . getAll ({ resource : customers }); // alternatively you can specify one or more of them const params = { resource : customers , limit : 20 , offset : 100 }; const secondCollection = await api . customFields . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customField = console . log ( customField . fields . description )); Parameters Name Type Attribute Description resource string - The resource under which the custom fields were created. Allowed values: customers , payment-cards , subscriptions , transactions , websites , contacts , products . limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of custom fields. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/custom-fields/#get","text":"get ({ resource , name }) - {Member} Get a custom field by its name for a specific resource . Allowed resource values: customers payment-cards subscriptions transactions websites contacts products Example const customField = await api . customFields . get ({ resource : customers , name : dob }); console . log ( customField . fields . description ); Returns A member exposing the custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/custom-fields/#create","text":"create ({ resource , name , data }) - {Member} Create a custom field for a specific resource . API Spec See the API spec for details on how to build the data payload for each custom field type. Example // first set the properties for the new custom field const data = { name : Date of Birth , type : date , description : `The customer s date of birth` }; // define the entire payload const params = { resource : customers , name : dob , data }; const customField = await api . customFields . create ( params ); // you can verify if the custom field is used console . log ( customField . fields . isUsed ); Returns A member exposing the created custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/custom-fields/#update","text":"update ({ resource , name , data }) - {Member} Update a custom field for a specific resource using its name . API Spec See the API spec for details on how to build the data payload for each custom field type. Example // first set the properties for the custom field const data = { description : `The customer s DOB` }; // define the entire payload const params = { resource : customers , name : dob , data }; const customField = await api . customFields . update ( params ); // you can verify if the custom field is used console . log ( customField . fields . isUsed ); Returns A member exposing the updated custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/custom-fields/#delete","text":"delete ({ resource , name }) - {Member} Delete a custom field for a resource using its name . Example const request = await api . customFields . delete ({ resource : customers , name : `dob` }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/customer-authentication/","text":"Customer Authentication api . customerAuthentication Member of RebillyAPI Authenticate your customers within your Rebilly integration. This feature is useful for creating self-service portals for your customers. getAuthOptions getAuthOptions () - {Member} Get global customer authentication options. Example const options = await api . customerAuthentication . getAuthOptions (); console . log ( options . fields . credentialTtl ); Returns A member exposing the authentication options fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateAuthOptions updateAuthOptions ({ data }) - {Member} Update the global customer authentication options. You can modify the TTL (in seconds) for the credentials, authorization tokens and reset password tokens, or the password regular expression pattern use for validation. Example // first set the properties for the authentication options const data = { passwordPattern : null , credentialTtl : 10 , authTokenTtl : 20 , resetTokenTtl : 30 }; const options = await api . customerAuthentication . updateAuthOptions ({ data }); console . log ( options . fields . credentialTtl ); Returns A member exposing the updated custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllAuthTokens getAllAuthTokens ({ limit opt , offset opt }) -> {Collection} Get a collection of authentication tokens created for your customers. Each entry will be a member. Token Generation Tokens are generated by the customerAuthentication.login method. Example // all parameters are optional const firstCollection = await api . customerAuthentication . getAllAuthTokens (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customerAuthentication . getAllAuthTokens ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( token = console . log ( token . fields . username )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of authentication tokens. Type Collection API Spec See the detailed API spec for all payload fields and response data. verify verify ({ token }) - {Member} Verify the validity of an authentication token. If valid the response will contain all the token fields. Example const token = dcf6e32f2daee457a1db8ce5fdfbe200 ; const verification = await api . customerAuthentication . verify ({ token }); // if the the token is valid then no error will be thrown console . log ( verification . reponse . status ) // 200 Returns A member exposing the token fields. Type Member API Spec See the detailed API spec for all payload fields and response data. login login ({ data }) - {Member} Login a customer into Rebilly and retrieve the authentication token being generated. You must first create a credential for a customer. Optionally you can provide the expired time of the session using expiredTime as a datetime in the future. Similar Account Method This method is similar to account.signIn but unlike it, it requires to be authorized in the API and will not return a JWT session token. See customerAuthentication.createCredential See customerAuthentication.logout Example const data = { username : foobar , password : fuubar // optionally you can define an `expiredTime` to // limit the duration of the session token //expiredTime: 2017-09-18T19:17:39Z }; const session = await api . customerAuthentication . login ({ data }); console . log ( session . fields . token ); Returns A member exposing the token fields. Type Member API Spec See the detailed API spec for all payload fields and response data. logout logout ({ token }) - {Member} Logout the customer and invalidate his session token. Example const token = dcf6e32f2daee457a1db8ce5fdfbe200 ; const request = await api . customerAuthentication . logout ({ token }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllCredentials getAllCredentials ({ limit opt , offset opt }) -> {Collection} Get a collection of customer credentials. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . customerAuthentication . getAllCredentials (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customerAuthentication . getAllCredentials ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( credential = console . log ( credential . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of customer credentials. Type Collection API Spec See the detailed API spec for all payload fields and response data. getCredential getCredential ({ id }) - {Member} Get a customer credential by its id . Example const credential = await api . customerAuthentication . getCredential ({ id : my-first-id }); console . log ( credential . fields . customerId ); Returns A member exposing the customer credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createCredential createCredential ({ id opt , data }) - {Member} Create a credential for a customer. Optionally provide a specific id to use, or let Rebilly generate one. Customer Login Use credentials to allow your customers to login to Rebilly directly through your website and self-serve. Example // first set the required properties for the new credential const data = { username : foobar , password : fuubar , customerId : foobar-0001 // optionally you can define an `expiredTime` to // limit the duration of the credential //expiredTime: 2017-09-18T19:17:39Z }; // the ID is optional const firstCredential = await api . customerAuthentication . createCredential ({ data }); // or you can provide one const secondCredential = await api . customerAuthentication . createCredential ({ id : my-second-id , data }); Returns A member exposing the created customer credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateCredential updateCredential ({ id , data }) - {Member} Update a credential for a customer using its id . Example // define the values to update const data = { username : foobar , password : hell0 }; const secondCredential = await api . customerAuthentication . updateCredential ({ id : my-second-id , data }); Returns A member exposing the update customer credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteCredential deleteCredential ({ id }) - {Member} Delete a customer credential by using its id . Example const request = await api . customerAuthentication . deleteCredential ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllResetPasswordTokens getAllResetPasswordTokens ({ limit opt , offset opt }) -> {Collection} Get a collection of password reset tokens. Each entry will be a member. Token ID The token field of each member is used as the id for this entity. Example // all parameters are optional const firstCollection = await api . customerAuthentication . getAllResetPasswordTokens (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customerAuthentication . getAllResetPasswordTokens ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( token = console . log ( token . fields . token )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of password reset tokens. Type Collection API Spec See the detailed API spec for all payload fields and response data. getResetPasswordToken getResetPasswordToken ({ id }) - {Member} Get a password reset token by its id . Example const token = await api . customerAuthentication . getResetPasswordToken ({ id : my-first-id }); console . log ( token . fields . credential ); Returns A member exposing the password reset token fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createResetPasswordToken createResetPasswordToken ({ data }) - {Member} Create a password reset token for a specific credential . Reset tokens are not created for a customer but for a credential attached to it. Token ID The token field is used as the id for this entity. See customerAuthentication.createCredential Example // first set the required properties for the new credential const data = { username : foobar , password : fuubar , // the `credential` expects // the customer credential s ID credential : foobar-0001 // optionally you can define an `expiredTime` to // limit the duration of the reset token //expiredTime: 2017-09-18T19:17:39Z }; const resetToken = await api . customerAuthentication . createResetPasswordToken ({ data }); Returns A member exposing the created password reset token fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteResetPasswordToken deleteResetPasswordToken ({ id }) - {Member} Delete a password reset token by using its id . Token ID The token field is used as the id for this entity. Example const request = await api . customerAuthentication . deleteResetPasswordToken ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Customer Authentication"},{"location":"reference/resources/customer-authentication/#customer-authentication-apicustomerauthentication","text":"Member of RebillyAPI Authenticate your customers within your Rebilly integration. This feature is useful for creating self-service portals for your customers.","title":"Customer Authentication api.customerAuthentication"},{"location":"reference/resources/customer-authentication/#getauthoptions","text":"getAuthOptions () - {Member} Get global customer authentication options. Example const options = await api . customerAuthentication . getAuthOptions (); console . log ( options . fields . credentialTtl ); Returns A member exposing the authentication options fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getAuthOptions"},{"location":"reference/resources/customer-authentication/#updateauthoptions","text":"updateAuthOptions ({ data }) - {Member} Update the global customer authentication options. You can modify the TTL (in seconds) for the credentials, authorization tokens and reset password tokens, or the password regular expression pattern use for validation. Example // first set the properties for the authentication options const data = { passwordPattern : null , credentialTtl : 10 , authTokenTtl : 20 , resetTokenTtl : 30 }; const options = await api . customerAuthentication . updateAuthOptions ({ data }); console . log ( options . fields . credentialTtl ); Returns A member exposing the updated custom field fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateAuthOptions"},{"location":"reference/resources/customer-authentication/#getallauthtokens","text":"getAllAuthTokens ({ limit opt , offset opt }) -> {Collection} Get a collection of authentication tokens created for your customers. Each entry will be a member. Token Generation Tokens are generated by the customerAuthentication.login method. Example // all parameters are optional const firstCollection = await api . customerAuthentication . getAllAuthTokens (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customerAuthentication . getAllAuthTokens ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( token = console . log ( token . fields . username )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of authentication tokens. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllAuthTokens"},{"location":"reference/resources/customer-authentication/#verify","text":"verify ({ token }) - {Member} Verify the validity of an authentication token. If valid the response will contain all the token fields. Example const token = dcf6e32f2daee457a1db8ce5fdfbe200 ; const verification = await api . customerAuthentication . verify ({ token }); // if the the token is valid then no error will be thrown console . log ( verification . reponse . status ) // 200 Returns A member exposing the token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"verify"},{"location":"reference/resources/customer-authentication/#login","text":"login ({ data }) - {Member} Login a customer into Rebilly and retrieve the authentication token being generated. You must first create a credential for a customer. Optionally you can provide the expired time of the session using expiredTime as a datetime in the future. Similar Account Method This method is similar to account.signIn but unlike it, it requires to be authorized in the API and will not return a JWT session token. See customerAuthentication.createCredential See customerAuthentication.logout Example const data = { username : foobar , password : fuubar // optionally you can define an `expiredTime` to // limit the duration of the session token //expiredTime: 2017-09-18T19:17:39Z }; const session = await api . customerAuthentication . login ({ data }); console . log ( session . fields . token ); Returns A member exposing the token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"login"},{"location":"reference/resources/customer-authentication/#logout","text":"logout ({ token }) - {Member} Logout the customer and invalidate his session token. Example const token = dcf6e32f2daee457a1db8ce5fdfbe200 ; const request = await api . customerAuthentication . logout ({ token }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"logout"},{"location":"reference/resources/customer-authentication/#getallcredentials","text":"getAllCredentials ({ limit opt , offset opt }) -> {Collection} Get a collection of customer credentials. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . customerAuthentication . getAllCredentials (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customerAuthentication . getAllCredentials ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( credential = console . log ( credential . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of customer credentials. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllCredentials"},{"location":"reference/resources/customer-authentication/#getcredential","text":"getCredential ({ id }) - {Member} Get a customer credential by its id . Example const credential = await api . customerAuthentication . getCredential ({ id : my-first-id }); console . log ( credential . fields . customerId ); Returns A member exposing the customer credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getCredential"},{"location":"reference/resources/customer-authentication/#createcredential","text":"createCredential ({ id opt , data }) - {Member} Create a credential for a customer. Optionally provide a specific id to use, or let Rebilly generate one. Customer Login Use credentials to allow your customers to login to Rebilly directly through your website and self-serve. Example // first set the required properties for the new credential const data = { username : foobar , password : fuubar , customerId : foobar-0001 // optionally you can define an `expiredTime` to // limit the duration of the credential //expiredTime: 2017-09-18T19:17:39Z }; // the ID is optional const firstCredential = await api . customerAuthentication . createCredential ({ data }); // or you can provide one const secondCredential = await api . customerAuthentication . createCredential ({ id : my-second-id , data }); Returns A member exposing the created customer credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createCredential"},{"location":"reference/resources/customer-authentication/#updatecredential","text":"updateCredential ({ id , data }) - {Member} Update a credential for a customer using its id . Example // define the values to update const data = { username : foobar , password : hell0 }; const secondCredential = await api . customerAuthentication . updateCredential ({ id : my-second-id , data }); Returns A member exposing the update customer credential fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateCredential"},{"location":"reference/resources/customer-authentication/#deletecredential","text":"deleteCredential ({ id }) - {Member} Delete a customer credential by using its id . Example const request = await api . customerAuthentication . deleteCredential ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteCredential"},{"location":"reference/resources/customer-authentication/#getallresetpasswordtokens","text":"getAllResetPasswordTokens ({ limit opt , offset opt }) -> {Collection} Get a collection of password reset tokens. Each entry will be a member. Token ID The token field of each member is used as the id for this entity. Example // all parameters are optional const firstCollection = await api . customerAuthentication . getAllResetPasswordTokens (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . customerAuthentication . getAllResetPasswordTokens ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( token = console . log ( token . fields . token )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of password reset tokens. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllResetPasswordTokens"},{"location":"reference/resources/customer-authentication/#getresetpasswordtoken","text":"getResetPasswordToken ({ id }) - {Member} Get a password reset token by its id . Example const token = await api . customerAuthentication . getResetPasswordToken ({ id : my-first-id }); console . log ( token . fields . credential ); Returns A member exposing the password reset token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getResetPasswordToken"},{"location":"reference/resources/customer-authentication/#createresetpasswordtoken","text":"createResetPasswordToken ({ data }) - {Member} Create a password reset token for a specific credential . Reset tokens are not created for a customer but for a credential attached to it. Token ID The token field is used as the id for this entity. See customerAuthentication.createCredential Example // first set the required properties for the new credential const data = { username : foobar , password : fuubar , // the `credential` expects // the customer credential s ID credential : foobar-0001 // optionally you can define an `expiredTime` to // limit the duration of the reset token //expiredTime: 2017-09-18T19:17:39Z }; const resetToken = await api . customerAuthentication . createResetPasswordToken ({ data }); Returns A member exposing the created password reset token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createResetPasswordToken"},{"location":"reference/resources/customer-authentication/#deleteresetpasswordtoken","text":"deleteResetPasswordToken ({ id }) - {Member} Delete a password reset token by using its id . Token ID The token field is used as the id for this entity. Example const request = await api . customerAuthentication . deleteResetPasswordToken ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteResetPasswordToken"},{"location":"reference/resources/customers/","text":"Customers api . customers Member of RebillyAPI Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models. getAll getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of customers. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . customers . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . customers . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customer = console . log ( customer . fields . primaryAddress . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of customers. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a customer by its id . Contact Object Customers have contact objects attached to them ( primaryAddress ). The contact information contains the customer's name and address. Example const customer = await api . customers . get ({ id : foobar-001 }); console . log ( customer . fields . primaryAddress . firstName ); Returns A member exposing the customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of customers in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . customers . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . customers . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new customer const data = { primaryAddress : { firstName : John , lastName : Doe , emails : [{ label : main , value : john.doe+test@grr.la , primary : true }], } }; // the ID is optional const firstCustomer = await api . customers . create ({ data }); // or you can provide one const secondCustomer = await api . customers . create ({ id : my-second-id , data }); Returns A member exposing the created customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a customer using its id . Example // define the values to update const data = { primaryAddress : { firstName : Johnny , lastName : Doe , emails : [{ label : main , value : johnny.doe+test@grr.la , primary : true }], } }; const customer = await api . customers . update ({ id : my-second-id , data }); Returns A member exposing the updated customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getLeadSource getLeadSource ({ id }) - {Member} Get a lead source by using the customer id . Example const lead = await api . customers . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createLeadSource createLeadSource ({ id , data }) - {Member} Create a lead source for a customer id . A customer can only have one lead source present at a time. Customer Tracking The lead source entity lets you track your customers throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . customers . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created customer lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateLeadSource updateLeadSource ({ id , data }) - {Member} Update the lead source for a customer id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . customers . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update customer lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteLeadSource deleteLeadSource ({ id }) - {Member} Delete a lead source using the customer id . Example const request = await api . customers . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllTimelineMessages getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of customer timeline messages for a customer id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . customers . getAllTimelineMessages ({ id : my-customer ); // alternatively you can specify one or more of them const params = { id : my-customer , limit : 20 , offset : 100 }; const secondCollection = await api . customers . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of customer timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data. getTimelineMessage getTimelineMessage ({ id , messageId }) - {Member} Get a customer timeline message by its id and messageId combination. Example const message = await api . customers . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the customer timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createTimelineComment createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a customer account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the [detailed API spec][15]{: target=\"_blank\"} for details. Example // Create a comment const firstComment = await api . customers . createTimelineComment ({ id : my-customer-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #customers-customer-id` ; const params = { id : my-customer-id data : { message , }, }; const secondComment = await api . customers . createTimelineComment ( params ); Returns A member exposing the created customer timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteTimelineMessage deleteTimelineMessage ({ id , messageId }) - {Member} Delete a customer timeline message by using its id and messageId combination. Example const request = await api . customers . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Customers"},{"location":"reference/resources/customers/#customers-apicustomers","text":"Member of RebillyAPI Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.","title":"Customers api.customers"},{"location":"reference/resources/customers/#getall","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of customers. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . customers . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . customers . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( customer = console . log ( customer . fields . primaryAddress . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of customers. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/customers/#get","text":"get ({ id }) - {Member} Get a customer by its id . Contact Object Customers have contact objects attached to them ( primaryAddress ). The contact information contains the customer's name and address. Example const customer = await api . customers . get ({ id : foobar-001 }); console . log ( customer . fields . primaryAddress . firstName ); Returns A member exposing the customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/customers/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of customers in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . customers . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . customers . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/customers/#create","text":"create ({ id opt , data }) - {Member} Create a customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new customer const data = { primaryAddress : { firstName : John , lastName : Doe , emails : [{ label : main , value : john.doe+test@grr.la , primary : true }], } }; // the ID is optional const firstCustomer = await api . customers . create ({ data }); // or you can provide one const secondCustomer = await api . customers . create ({ id : my-second-id , data }); Returns A member exposing the created customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/customers/#update","text":"update ({ id , data }) - {Member} Update a customer using its id . Example // define the values to update const data = { primaryAddress : { firstName : Johnny , lastName : Doe , emails : [{ label : main , value : johnny.doe+test@grr.la , primary : true }], } }; const customer = await api . customers . update ({ id : my-second-id , data }); Returns A member exposing the updated customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/customers/#getleadsource","text":"getLeadSource ({ id }) - {Member} Get a lead source by using the customer id . Example const lead = await api . customers . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getLeadSource"},{"location":"reference/resources/customers/#createleadsource","text":"createLeadSource ({ id , data }) - {Member} Create a lead source for a customer id . A customer can only have one lead source present at a time. Customer Tracking The lead source entity lets you track your customers throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . customers . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created customer lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createLeadSource"},{"location":"reference/resources/customers/#updateleadsource","text":"updateLeadSource ({ id , data }) - {Member} Update the lead source for a customer id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . customers . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update customer lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateLeadSource"},{"location":"reference/resources/customers/#deleteleadsource","text":"deleteLeadSource ({ id }) - {Member} Delete a lead source using the customer id . Example const request = await api . customers . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteLeadSource"},{"location":"reference/resources/customers/#getalltimelinemessages","text":"getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of customer timeline messages for a customer id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . customers . getAllTimelineMessages ({ id : my-customer ); // alternatively you can specify one or more of them const params = { id : my-customer , limit : 20 , offset : 100 }; const secondCollection = await api . customers . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of customer timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllTimelineMessages"},{"location":"reference/resources/customers/#gettimelinemessage","text":"getTimelineMessage ({ id , messageId }) - {Member} Get a customer timeline message by its id and messageId combination. Example const message = await api . customers . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the customer timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTimelineMessage"},{"location":"reference/resources/customers/#createtimelinecomment","text":"createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a customer account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the [detailed API spec][15]{: target=\"_blank\"} for details. Example // Create a comment const firstComment = await api . customers . createTimelineComment ({ id : my-customer-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #customers-customer-id` ; const params = { id : my-customer-id data : { message , }, }; const secondComment = await api . customers . createTimelineComment ( params ); Returns A member exposing the created customer timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createTimelineComment"},{"location":"reference/resources/customers/#deletetimelinemessage","text":"deleteTimelineMessage ({ id , messageId }) - {Member} Delete a customer timeline message by using its id and messageId combination. Example const request = await api . customers . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteTimelineMessage"},{"location":"reference/resources/disputes/","text":"Disputes api . disputes Member of RebillyAPI Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly. getAll getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of disputes. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . disputes . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . disputes . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( dispute = console . log ( dispute . fields . transactionId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of disputes. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a dispute by its id . Example const dispute = await api . disputes . get ({ id : foobar-001 }); console . log ( dispute . fields . firstName ); Returns A member exposing the dispute fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of disputes in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . disputes . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . disputes . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a dispute for a specific transaction. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new dispute const data = { transactionId : my-transaction-id , currency : USD , amount : 5 , reasonCode : 1000 , type : first-chargeback , status : response-needed , acquirerReferenceNumber : 143543 , postedTime : 2017-09-19T20:46:48Z , deadlineTime : 2017-09-19T20:46:48Z }; // the ID is optional const firstdispute = await api . disputes . create ({ data }); // or you can provide one const secondDispute = await api . disputes . create ({ id : my-second-id , data }); Returns A member exposing the created dispute fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a dispute using its id for a specific transaction. Example // define the values to update const data = { transactionId : my-other-transaction-id , currency : USD , amount : 5 , reasonCode : 1000 , type : first-chargeback , status : response-needed , acquirerReferenceNumber : 143543 , postedTime : 2017-09-19T20:46:48Z , deadlineTime : 2017-09-19T20:46:48Z }; const dispute = await api . disputes . update ({ id : my-second-id , data }); Returns A member exposing the updated dispute fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllMatchedRules getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a dispute id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . disputes . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"Disputes"},{"location":"reference/resources/disputes/#disputes-apidisputes","text":"Member of RebillyAPI Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.","title":"Disputes api.disputes"},{"location":"reference/resources/disputes/#getall","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of disputes. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . disputes . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . disputes . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( dispute = console . log ( dispute . fields . transactionId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of disputes. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/disputes/#get","text":"get ({ id }) - {Member} Get a dispute by its id . Example const dispute = await api . disputes . get ({ id : foobar-001 }); console . log ( dispute . fields . firstName ); Returns A member exposing the dispute fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/disputes/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of disputes in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . disputes . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . disputes . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/disputes/#create","text":"create ({ id opt , data }) - {Member} Create a dispute for a specific transaction. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new dispute const data = { transactionId : my-transaction-id , currency : USD , amount : 5 , reasonCode : 1000 , type : first-chargeback , status : response-needed , acquirerReferenceNumber : 143543 , postedTime : 2017-09-19T20:46:48Z , deadlineTime : 2017-09-19T20:46:48Z }; // the ID is optional const firstdispute = await api . disputes . create ({ data }); // or you can provide one const secondDispute = await api . disputes . create ({ id : my-second-id , data }); Returns A member exposing the created dispute fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/disputes/#update","text":"update ({ id , data }) - {Member} Update a dispute using its id for a specific transaction. Example // define the values to update const data = { transactionId : my-other-transaction-id , currency : USD , amount : 5 , reasonCode : 1000 , type : first-chargeback , status : response-needed , acquirerReferenceNumber : 143543 , postedTime : 2017-09-19T20:46:48Z , deadlineTime : 2017-09-19T20:46:48Z }; const dispute = await api . disputes . update ({ id : my-second-id , data }); Returns A member exposing the updated dispute fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/disputes/#getallmatchedrules","text":"getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a dispute id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . disputes . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"getAllMatchedRules"},{"location":"reference/resources/events/","text":"Events api . events Member of RebillyAPI Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed. The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation. See Rules Engine. getAll getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of events. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . events . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . events . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( event = console . log ( event . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of events. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ eventType }) - {Member} Get an event's details by its eventType . This will not return the rules but will include the rule count. Allowed eventType values: dispute-created gateway-account-request transaction-processed subscription-canceled subscription-created subscription-renewed payment-card-expired payment-declined transaction-process-requested risk-score-changed Example const eventDetails = await api . events . get ({ eventType : gateway-account-created }); console . log ( eventDetails . fields . rulesCount ); Returns A member exposing the event fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getRules getRules ({ eventType }) - {Member} Get the ruleset for a specific eventType . Allowed eventType values: dispute-created gateway-account-request transaction-processed subscription-canceled subscription-created subscription-renewed payment-card-expired payment-declined transaction-process-requested risk-score-changed Example const event = await api . events . getRules ({ eventType : transaction-processed }); console . log ( event . fields . rules ); Returns A member exposing the event fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createRules createRules ({ eventType , data }) - {Member} Create a set of rules for an event identified by its eventType . Rules Engine The rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define at least one rule const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . events . createRules ({ eventType : risk-score-changed , data }); console . log ( ruleset . fields . version ); Returns A member exposing the event's newly created ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data. updateRules updateRules ({ eventType , data }) - {Member} Update the ruleset for an event identified by its eventType . An event can only have one ruleset, but the rules within can be modified or deleted. Rules Engine The rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define the ruleset to override the current values within // the event const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . events . updateRules ({ eventType : risk-score-changed , data }); // each time the event s ruleset is modified // the version number is incremented console . log ( ruleset . fields . version ); Returns A member exposing the event's updated ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data. getRulesHistory getRulesHistory ({ eventType , limit opt , offset opt }) - {Collection} Retrieve the change history of the set of rules for the selected event using its eventType . The history is updated each time you change the rules. Version History This method does not return the rulesets for each version. It will only provide you with the time each version was created at. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Example // get the latest 20 versions for this event ID const history = await api . events . getRulesVersionNumber ({ eventType : risk-score-changed , limit : 20 }); // each item exposes the version and `createdTime` history . items . forEach ( edit = console . log ( edit . fields . version )); Returns A collection exposing the event history. Type Collection API Spec See the detailed API spec for all payload fields and response data. getRulesVersionNumber getRulesVersionNumber ({ eventType , version }) - {Member} Retrieve the version details of the rules for the selected event using its eventType . Version History This method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use customEvents.getRulesVersionDetail . Example // get version #2 details for this event ID const history = await api . events . getRulesVersionNumber ({ eventType : risk-score-changed , version : 2 }); // the history exposes the version number and its `createdTime` console . log ( history . fields . createdTime ); Returns A member exposing the version details. Type Member API Spec See the detailed API spec for all payload fields and response data. getRulesVersionDetail getRulesVersionDetail ({ eventType , version }) - {Member} Retrieve the ruleset of a specific version of the rules for the selected event using its eventType . Ruleset Version Use this method to retrieve the ruleset of an event at a specific version number. Example // get version #2 for this event ID const version = await api . events . getRulesVersionDetail ({ eventType : risk-score-changed , version : 2 }); // the version exposes the ruleset console . log ( version . fields . rules ); Returns A member exposing the version fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Events"},{"location":"reference/resources/events/#events-apievents","text":"Member of RebillyAPI Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed. The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation. See Rules Engine.","title":"Events api.events"},{"location":"reference/resources/events/#getall","text":"getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of events. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . events . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . events . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( event = console . log ( event . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of events. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/events/#get","text":"get ({ eventType }) - {Member} Get an event's details by its eventType . This will not return the rules but will include the rule count. Allowed eventType values: dispute-created gateway-account-request transaction-processed subscription-canceled subscription-created subscription-renewed payment-card-expired payment-declined transaction-process-requested risk-score-changed Example const eventDetails = await api . events . get ({ eventType : gateway-account-created }); console . log ( eventDetails . fields . rulesCount ); Returns A member exposing the event fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/events/#getrules","text":"getRules ({ eventType }) - {Member} Get the ruleset for a specific eventType . Allowed eventType values: dispute-created gateway-account-request transaction-processed subscription-canceled subscription-created subscription-renewed payment-card-expired payment-declined transaction-process-requested risk-score-changed Example const event = await api . events . getRules ({ eventType : transaction-processed }); console . log ( event . fields . rules ); Returns A member exposing the event fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRules"},{"location":"reference/resources/events/#createrules","text":"createRules ({ eventType , data }) - {Member} Create a set of rules for an event identified by its eventType . Rules Engine The rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define at least one rule const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . events . createRules ({ eventType : risk-score-changed , data }); console . log ( ruleset . fields . version ); Returns A member exposing the event's newly created ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createRules"},{"location":"reference/resources/events/#updaterules","text":"updateRules ({ eventType , data }) - {Member} Update the ruleset for an event identified by its eventType . An event can only have one ruleset, but the rules within can be modified or deleted. Rules Engine The rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information. Example // define the ruleset to override the current values within // the event const data = { rules : [ { name : The One Rule , status : active , final : true , criteria : {}, actions : [ { name : blacklist , status : active , type : email , ttl : 789 }, { name : stop-subscriptions , status : active } ] } ] }; const ruleset = await api . events . updateRules ({ eventType : risk-score-changed , data }); // each time the event s ruleset is modified // the version number is incremented console . log ( ruleset . fields . version ); Returns A member exposing the event's updated ruleset. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateRules"},{"location":"reference/resources/events/#getruleshistory","text":"getRulesHistory ({ eventType , limit opt , offset opt }) - {Collection} Retrieve the change history of the set of rules for the selected event using its eventType . The history is updated each time you change the rules. Version History This method does not return the rulesets for each version. It will only provide you with the time each version was created at. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Example // get the latest 20 versions for this event ID const history = await api . events . getRulesVersionNumber ({ eventType : risk-score-changed , limit : 20 }); // each item exposes the version and `createdTime` history . items . forEach ( edit = console . log ( edit . fields . version )); Returns A collection exposing the event history. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesHistory"},{"location":"reference/resources/events/#getrulesversionnumber","text":"getRulesVersionNumber ({ eventType , version }) - {Member} Retrieve the version details of the rules for the selected event using its eventType . Version History This method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use customEvents.getRulesVersionDetail . Example // get version #2 details for this event ID const history = await api . events . getRulesVersionNumber ({ eventType : risk-score-changed , version : 2 }); // the history exposes the version number and its `createdTime` console . log ( history . fields . createdTime ); Returns A member exposing the version details. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesVersionNumber"},{"location":"reference/resources/events/#getrulesversiondetail","text":"getRulesVersionDetail ({ eventType , version }) - {Member} Retrieve the ruleset of a specific version of the rules for the selected event using its eventType . Ruleset Version Use this method to retrieve the ruleset of an event at a specific version number. Example // get version #2 for this event ID const version = await api . events . getRulesVersionDetail ({ eventType : risk-score-changed , version : 2 }); // the version exposes the ruleset console . log ( version . fields . rules ); Returns A member exposing the version fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesVersionDetail"},{"location":"reference/resources/files/","text":"Files api . files Member of RebillyAPI Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of files. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . files . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . files . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( file = console . log ( file . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of files. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a file by its id . This does not return the file content, only the details. See files.download Example const file = await api . files . get ({ id : foobar-001 }); console . log ( file . fields . name ); Returns A member exposing the file fields. Type Member API Spec See the detailed API spec for all payload fields and response data. upload upload ({ fileObject }) - {Member} Upload a file for later use. Provide a native File object as the payload. Attachment A new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource. Example // using a FileList to fetch a file const fileObject = fileList [ 0 ]; const addedFile = await api . files . upload ({ fileObject }); Returns A member exposing the created file fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a file using its id . This method cannot be used to overwrite the file data, only its details. Example // define the values to update const data = { name : new file name , description : a fitting description , tags : [ original ] }; const file = await api . files . update ({ id : my-file-id , data }); Returns A member exposing the updated file fields. Type Member API Spec See the detailed API spec for all payload fields and response data. uploadAndUpdate uploadAndUpdate ({ fileObject , data opt }) - {Member} Upload a file for later use and include its description and tags. Provide a native File object as the payload. Unlike files.upload , this method allows you to define the description or tags at the same time. Attachment A new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource. Example // using a FileList to fetch a file const fileObject = fileList [ 0 ]; // define file data const data = { description : my new file , tags : [ original ] }; const addedFile = await api . files . uploadAndUpdate ({ fileObject , data }); Parameters Name Type Attribute Description data.description string Optional The file's description. data.tags number Optional An array of tags (strings) used to categorize the file. Returns A member exposing the created file fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a file without attachments by using its id . Attachments You cannot delete a file that still has active attachments to resources within Rebilly. Use files.detachAndDelete instead for that use-case. Example const request = await api . files . delete ({ id : my-file-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. detachAndDelete detachAndDelete ({ id }) - {Member} Delete a file and its related resource attachments by using its id . Use this method to remove the file completely from all resources at once. Example const request = await api . files . detachAndDelete ({ id : my-file-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. download download ({ id }) - {File} Download the content of a file as an ArrayBuffer . Example const file = await api . files . download ({ id : my-file-id }); // access the file ArrayBuffer to view the content console . log ( file . data ); Tip You can generate a binary file to download from the data content directly in the browser, or save it locally via the file system in Node. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. getAllAttachments getAllAttachments ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of attachments. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . files . getAllAttachments (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . files . getAllAttachments ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( attachment = console . log ( attachment . fields . relatedType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of files. Type Collection API Spec See the detailed API spec for all payload fields and response data. getAttachment getAttachment ({ id }) - {Member} Get the details of an attachment by its id . Attachments and Files A file can be attached to a resource. This allows you to logically link files and entities within Rebilly as needed. For example you can upload external invoices and attach them to a customer. See files.attach Example const attachment = await api . files . getAttachment ({ id : foobar-001 }); console . log ( attachment . fields . relatedType ); Returns A member exposing the file fields. Type Member API Spec See the detailed API spec for all payload fields and response data. attach attach ({ data }) - {Member} Attach a file to a resource. To create an attachment you must provide the resource relatedType (e.g. customers), the relatedId of an instance of that type (e.g. a customer's id), and finally the fileId of the file previously uploaded. Allowed relatedType values: customer dispute invoice note payment plan product subscription transaction Shared File A file can be attached to more than one resource at a time. Example // define the attachment const data = { // previously uploaded file ID fileId : my-file-id , relatedType : customer , relatedId : my-customer-id , name : an attachment , description : `the customer s file` }; const attachment = await api . files . attach ({ data }); console . log ( attachment . fields . id ); Returns A member exposing the attachment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateAttachment updateAttachment ({ id , data }) - {Member} Update an attachment by its id . See files.attach Example // define the values to update const data = { relatedType : customer , relatedId : my-customer-id , name : an attachment , description : `the customer s file` }; const attachment = await api . files . updateAttachment ({ id : foobar-001 , data }); Returns A member exposing the attachment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. detach detach ({ id }) - {Member} Detach a file from a resource using the attachment's id . Detaching versus deleting Detaching a file does not delete it even if the file has no other attachments within Rebilly. Use files.delete or files.detachAndDelete for those use-cases. See files.attach Example const request = await api . files . detach ({ id : my-attachment-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns A member exposing the attachment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Files"},{"location":"reference/resources/files/#files-apifiles","text":"Member of RebillyAPI Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.","title":"Files api.files"},{"location":"reference/resources/files/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of files. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . files . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . files . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( file = console . log ( file . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of files. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/files/#get","text":"get ({ id }) - {Member} Get a file by its id . This does not return the file content, only the details. See files.download Example const file = await api . files . get ({ id : foobar-001 }); console . log ( file . fields . name ); Returns A member exposing the file fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/files/#upload","text":"upload ({ fileObject }) - {Member} Upload a file for later use. Provide a native File object as the payload. Attachment A new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource. Example // using a FileList to fetch a file const fileObject = fileList [ 0 ]; const addedFile = await api . files . upload ({ fileObject }); Returns A member exposing the created file fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"upload"},{"location":"reference/resources/files/#update","text":"update ({ id , data }) - {Member} Update a file using its id . This method cannot be used to overwrite the file data, only its details. Example // define the values to update const data = { name : new file name , description : a fitting description , tags : [ original ] }; const file = await api . files . update ({ id : my-file-id , data }); Returns A member exposing the updated file fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/files/#uploadandupdate","text":"uploadAndUpdate ({ fileObject , data opt }) - {Member} Upload a file for later use and include its description and tags. Provide a native File object as the payload. Unlike files.upload , this method allows you to define the description or tags at the same time. Attachment A new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource. Example // using a FileList to fetch a file const fileObject = fileList [ 0 ]; // define file data const data = { description : my new file , tags : [ original ] }; const addedFile = await api . files . uploadAndUpdate ({ fileObject , data }); Parameters Name Type Attribute Description data.description string Optional The file's description. data.tags number Optional An array of tags (strings) used to categorize the file. Returns A member exposing the created file fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"uploadAndUpdate"},{"location":"reference/resources/files/#delete","text":"delete ({ id }) - {Member} Delete a file without attachments by using its id . Attachments You cannot delete a file that still has active attachments to resources within Rebilly. Use files.detachAndDelete instead for that use-case. Example const request = await api . files . delete ({ id : my-file-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/files/#detachanddelete","text":"detachAndDelete ({ id }) - {Member} Delete a file and its related resource attachments by using its id . Use this method to remove the file completely from all resources at once. Example const request = await api . files . detachAndDelete ({ id : my-file-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"detachAndDelete"},{"location":"reference/resources/files/#download","text":"download ({ id }) - {File} Download the content of a file as an ArrayBuffer . Example const file = await api . files . download ({ id : my-file-id }); // access the file ArrayBuffer to view the content console . log ( file . data ); Tip You can generate a binary file to download from the data content directly in the browser, or save it locally via the file system in Node. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"download"},{"location":"reference/resources/files/#getallattachments","text":"getAllAttachments ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of attachments. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . files . getAllAttachments (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . files . getAllAttachments ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( attachment = console . log ( attachment . fields . relatedType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of files. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllAttachments"},{"location":"reference/resources/files/#getattachment","text":"getAttachment ({ id }) - {Member} Get the details of an attachment by its id . Attachments and Files A file can be attached to a resource. This allows you to logically link files and entities within Rebilly as needed. For example you can upload external invoices and attach them to a customer. See files.attach Example const attachment = await api . files . getAttachment ({ id : foobar-001 }); console . log ( attachment . fields . relatedType ); Returns A member exposing the file fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getAttachment"},{"location":"reference/resources/files/#attach","text":"attach ({ data }) - {Member} Attach a file to a resource. To create an attachment you must provide the resource relatedType (e.g. customers), the relatedId of an instance of that type (e.g. a customer's id), and finally the fileId of the file previously uploaded. Allowed relatedType values: customer dispute invoice note payment plan product subscription transaction Shared File A file can be attached to more than one resource at a time. Example // define the attachment const data = { // previously uploaded file ID fileId : my-file-id , relatedType : customer , relatedId : my-customer-id , name : an attachment , description : `the customer s file` }; const attachment = await api . files . attach ({ data }); console . log ( attachment . fields . id ); Returns A member exposing the attachment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"attach"},{"location":"reference/resources/files/#updateattachment","text":"updateAttachment ({ id , data }) - {Member} Update an attachment by its id . See files.attach Example // define the values to update const data = { relatedType : customer , relatedId : my-customer-id , name : an attachment , description : `the customer s file` }; const attachment = await api . files . updateAttachment ({ id : foobar-001 , data }); Returns A member exposing the attachment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateAttachment"},{"location":"reference/resources/files/#detach","text":"detach ({ id }) - {Member} Detach a file from a resource using the attachment's id . Detaching versus deleting Detaching a file does not delete it even if the file has no other attachments within Rebilly. Use files.delete or files.detachAndDelete for those use-cases. See files.attach Example const request = await api . files . detach ({ id : my-attachment-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns A member exposing the attachment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"detach"},{"location":"reference/resources/gateway-accounts/","text":"Gateway Accounts api . gatewayAccounts Member of RebillyAPI Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use. A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of gateway accounts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . gatewayAccounts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . gatewayAccounts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( gatewayAccount = console . log ( gatewayAccount . fields . gatewayName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of gateway accounts. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a gateway account by its id . Example const gatewayAccount = await api . gatewayAccounts . get ({ id : foobar-001 }); console . log ( gatewayAccount . fields . gatewayName ); Returns A member exposing the gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a gateway account. Optionally provide a specific id to use, or let Rebilly generate one. Each gateway has custom configuration options that are provided using the gatewayConfig property. See the API spec for more details. An additional gateway named RebillyProcessor is available in the sandbox mode and will allow you to test particular scenarios with set credit card numbers. See the Sandbox vs Live Mode help article for details. Example // first set the required properties for the new gateway account const data = { gatewayName : RebillyProcessor , acquirerName : RebillyProcessor , merchantCategoryCode : 0 , acceptedCurrencies : [ USD ], method : payment-card , paymentCardSchemes : [ Visa , MasterCard , American Express , Discover , Diners Club , JCB ], // the gatewayConfig varies for each gateway name, // see the API spec for details gatewayConfig : {}, }; // the ID is optional const firstKey = await api . gatewayAccounts . create ({ data }); // or you can provide one const secondKey = await api . gatewayAccounts . create ({ id : my-second-id , data }); Returns A member exposing the created gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a gateway account using its id . This method will patch the existing values, allowing you to skip gateway credentials. Example // build data with only the fields you wish to update const data = { paymentCardSchemes : [ Visa , MasterCard , American Express ] }; const secondKey = await api . gatewayAccounts . update ({ id : my-second-id , data }); Returns A member exposing the updated gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a gateway account by using its id . You cannot delete a gateway account that has been used previously. Example const request = await api . gatewayAccounts . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. enable enable ({ id }) - {Member} Enable an inactive gateway account by using its id . Example const gatewayAccount = await api . gatewayAccounts . enable ({ id : foobar-001 }); console . log ( gatewayAccount . fields . status ); Returns A member exposing the gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. disable disable ({ id }) - {Member} Disable an active gateway account by using its id . Example const gatewayAccount = await api . gatewayAccounts . disable ({ id : foobar-001 }); console . log ( gatewayAccount . fields . status ); Returns A member exposing the gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllDowntimeSchedules getAllDowntimeSchedules ({ id , limit opt , offset opt , filter opt }) -> {Collection} Get a collection of gateway account downtime schedules for a gateway id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . gatewayAccounts . getAllDowntimeSchedules ({ id : my-gateway ); // alternatively you can specify one or more of them const params = { id : my-gateway , limit : 20 , offset : 100 }; const secondCollection = await api . gatewayAccounts . getAllDowntimeSchedules ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( gatewayAccount = console . log ( gatewayAccount . fields . reason )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of gateway account downtime schedules. Type Collection API Spec See the detailed API spec for all payload fields and response data. getDowntimeSchedule getDowntimeSchedule ({ id , downtimeScheduleId }) - {Member} Get a gateway account downtime schedule by its id and downtimeScheduleId combination. Example const downtimeSchedule = await api . gatewayAccounts . getDowntimeSchedule ({ id : foobar-001 , downtimeScheduleId : foobar-202 }); console . log ( downtimeSchedule . fields . reason ); Returns A member exposing the gateway account downtime schedule fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createDowntimeSchedule createDowntimeSchedule ({ id , data }) - {Member} Create a gateway account downtime schedule using the gateway's id . Example // first set the required properties for // the new gateway account downtime schedule const data = { startTime : 2018-08-02T15:13:23Z , endTime : 2018-08-02T15:13:23Z }; // the gateway ID is required const secondKey = await api . gatewayAccounts . createDowntimeSchedule ({ id : my-second-id , data }); Returns A member exposing the created gateway account downtime schedule fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateDowntimeSchedule updateDowntimeSchedule ({ id , downtimeScheduleId , data }) - {Member} Update a gateway account downtime schedule using a combination of the gateway's id and the schedule's downtimeScheduleId . Example // first set the required properties for // the update gateway account downtime schedule const data = { startTime : 2018-08-02T15:13:23Z , endTime : 2018-08-02T15:13:23Z }; // the gateway ID is required const secondKey = await api . gatewayAccounts . updateDowntimeSchedule ({ id : my-second-id , downtimeScheduleId : schedule-id , data }); Returns A member exposing the created gateway account downtime schedule fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteDowntimeSchedule deleteDowntimeSchedule ({ id , downtimeScheduleId }) - {Member} Delete a gateway account downtime schedule by using a combination of the gateway's id and the schedule's downtimeScheduleId . Example const request = await api . gatewayAccounts . deleteDowntimeSchedule ({ id : my-second-key , downtimeScheduleId : schedule-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllTimelineMessages getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of gateway account timeline messages for a gateway id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . gatewayAccounts . getAllTimelineMessages ({ id : my-gateway ); // alternatively you can specify one or more of them const params = { id : my-gateway , limit : 20 , offset : 100 }; const secondCollection = await api . gatewayAccounts . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of gateway account timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data. getTimelineMessage getTimelineMessage ({ id , messageId }) - {Member} Get a gateway account timeline message by its id and messageId combination. Example const message = await api . gatewayAccounts . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the gateway account timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createTimelineComment createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a gateway account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . gatewayAccounts . createTimelineComment ({ id : my-gateway-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #customers-customer-id` ; const params = { id : my-gateway-id data : { message , }, }; const secondComment = await api . gatewayAccounts . createTimelineComment ( params ); Returns A member exposing the created gateway timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteTimelineMessage deleteTimelineMessage ({ id , messageId }) - {Member} Delete a gateway timeline message by using its id and messageId combination. Example const request = await api . gatewayAccounts . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Gateway Accounts"},{"location":"reference/resources/gateway-accounts/#gateway-accounts-apigatewayaccounts","text":"Member of RebillyAPI Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use. A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.","title":"Gateway Accounts api.gatewayAccounts"},{"location":"reference/resources/gateway-accounts/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of gateway accounts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . gatewayAccounts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . gatewayAccounts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( gatewayAccount = console . log ( gatewayAccount . fields . gatewayName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of gateway accounts. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/gateway-accounts/#get","text":"get ({ id }) - {Member} Get a gateway account by its id . Example const gatewayAccount = await api . gatewayAccounts . get ({ id : foobar-001 }); console . log ( gatewayAccount . fields . gatewayName ); Returns A member exposing the gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/gateway-accounts/#create","text":"create ({ id opt , data }) - {Member} Create a gateway account. Optionally provide a specific id to use, or let Rebilly generate one. Each gateway has custom configuration options that are provided using the gatewayConfig property. See the API spec for more details. An additional gateway named RebillyProcessor is available in the sandbox mode and will allow you to test particular scenarios with set credit card numbers. See the Sandbox vs Live Mode help article for details. Example // first set the required properties for the new gateway account const data = { gatewayName : RebillyProcessor , acquirerName : RebillyProcessor , merchantCategoryCode : 0 , acceptedCurrencies : [ USD ], method : payment-card , paymentCardSchemes : [ Visa , MasterCard , American Express , Discover , Diners Club , JCB ], // the gatewayConfig varies for each gateway name, // see the API spec for details gatewayConfig : {}, }; // the ID is optional const firstKey = await api . gatewayAccounts . create ({ data }); // or you can provide one const secondKey = await api . gatewayAccounts . create ({ id : my-second-id , data }); Returns A member exposing the created gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/gateway-accounts/#update","text":"update ({ id , data }) - {Member} Update a gateway account using its id . This method will patch the existing values, allowing you to skip gateway credentials. Example // build data with only the fields you wish to update const data = { paymentCardSchemes : [ Visa , MasterCard , American Express ] }; const secondKey = await api . gatewayAccounts . update ({ id : my-second-id , data }); Returns A member exposing the updated gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/gateway-accounts/#delete","text":"delete ({ id }) - {Member} Delete a gateway account by using its id . You cannot delete a gateway account that has been used previously. Example const request = await api . gatewayAccounts . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/gateway-accounts/#enable","text":"enable ({ id }) - {Member} Enable an inactive gateway account by using its id . Example const gatewayAccount = await api . gatewayAccounts . enable ({ id : foobar-001 }); console . log ( gatewayAccount . fields . status ); Returns A member exposing the gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"enable"},{"location":"reference/resources/gateway-accounts/#disable","text":"disable ({ id }) - {Member} Disable an active gateway account by using its id . Example const gatewayAccount = await api . gatewayAccounts . disable ({ id : foobar-001 }); console . log ( gatewayAccount . fields . status ); Returns A member exposing the gateway account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"disable"},{"location":"reference/resources/gateway-accounts/#getalldowntimeschedules","text":"getAllDowntimeSchedules ({ id , limit opt , offset opt , filter opt }) -> {Collection} Get a collection of gateway account downtime schedules for a gateway id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . gatewayAccounts . getAllDowntimeSchedules ({ id : my-gateway ); // alternatively you can specify one or more of them const params = { id : my-gateway , limit : 20 , offset : 100 }; const secondCollection = await api . gatewayAccounts . getAllDowntimeSchedules ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( gatewayAccount = console . log ( gatewayAccount . fields . reason )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of gateway account downtime schedules. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllDowntimeSchedules"},{"location":"reference/resources/gateway-accounts/#getdowntimeschedule","text":"getDowntimeSchedule ({ id , downtimeScheduleId }) - {Member} Get a gateway account downtime schedule by its id and downtimeScheduleId combination. Example const downtimeSchedule = await api . gatewayAccounts . getDowntimeSchedule ({ id : foobar-001 , downtimeScheduleId : foobar-202 }); console . log ( downtimeSchedule . fields . reason ); Returns A member exposing the gateway account downtime schedule fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getDowntimeSchedule"},{"location":"reference/resources/gateway-accounts/#createdowntimeschedule","text":"createDowntimeSchedule ({ id , data }) - {Member} Create a gateway account downtime schedule using the gateway's id . Example // first set the required properties for // the new gateway account downtime schedule const data = { startTime : 2018-08-02T15:13:23Z , endTime : 2018-08-02T15:13:23Z }; // the gateway ID is required const secondKey = await api . gatewayAccounts . createDowntimeSchedule ({ id : my-second-id , data }); Returns A member exposing the created gateway account downtime schedule fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createDowntimeSchedule"},{"location":"reference/resources/gateway-accounts/#updatedowntimeschedule","text":"updateDowntimeSchedule ({ id , downtimeScheduleId , data }) - {Member} Update a gateway account downtime schedule using a combination of the gateway's id and the schedule's downtimeScheduleId . Example // first set the required properties for // the update gateway account downtime schedule const data = { startTime : 2018-08-02T15:13:23Z , endTime : 2018-08-02T15:13:23Z }; // the gateway ID is required const secondKey = await api . gatewayAccounts . updateDowntimeSchedule ({ id : my-second-id , downtimeScheduleId : schedule-id , data }); Returns A member exposing the created gateway account downtime schedule fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateDowntimeSchedule"},{"location":"reference/resources/gateway-accounts/#deletedowntimeschedule","text":"deleteDowntimeSchedule ({ id , downtimeScheduleId }) - {Member} Delete a gateway account downtime schedule by using a combination of the gateway's id and the schedule's downtimeScheduleId . Example const request = await api . gatewayAccounts . deleteDowntimeSchedule ({ id : my-second-key , downtimeScheduleId : schedule-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteDowntimeSchedule"},{"location":"reference/resources/gateway-accounts/#getalltimelinemessages","text":"getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of gateway account timeline messages for a gateway id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . gatewayAccounts . getAllTimelineMessages ({ id : my-gateway ); // alternatively you can specify one or more of them const params = { id : my-gateway , limit : 20 , offset : 100 }; const secondCollection = await api . gatewayAccounts . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of gateway account timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllTimelineMessages"},{"location":"reference/resources/gateway-accounts/#gettimelinemessage","text":"getTimelineMessage ({ id , messageId }) - {Member} Get a gateway account timeline message by its id and messageId combination. Example const message = await api . gatewayAccounts . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the gateway account timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTimelineMessage"},{"location":"reference/resources/gateway-accounts/#createtimelinecomment","text":"createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a gateway account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . gatewayAccounts . createTimelineComment ({ id : my-gateway-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #customers-customer-id` ; const params = { id : my-gateway-id data : { message , }, }; const secondComment = await api . gatewayAccounts . createTimelineComment ( params ); Returns A member exposing the created gateway timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createTimelineComment"},{"location":"reference/resources/gateway-accounts/#deletetimelinemessage","text":"deleteTimelineMessage ({ id , messageId }) - {Member} Delete a gateway timeline message by using its id and messageId combination. Example const request = await api . gatewayAccounts . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteTimelineMessage"},{"location":"reference/resources/invoices/","text":"Invoices api . invoices Member of RebillyAPI An invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer. Payment terms are usually stated on the invoice. getAll getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of invoices. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . invoices . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . invoices . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( invoice = console . log ( invoice . fields . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of invoices. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id , expand opt }) - {Member} Get a invoice by its id . Define expand to include additional data. Allowed expand values: website customer organization invoice Object invoices have invoice objects attached to them ( primaryAddress ). The invoice information contains the invoice's name and address. Example const invoice = await api . invoices . get ({ id : foobar-001 }); console . log ( invoice . fields . primaryAddress . firstName ); Returns A member exposing the invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of invoices in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . invoices . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . invoices . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. downloadPDF downloadPDF ({ id }) - {File} Get an invoice PDF by the invoice's id . Returns an ArrayBuffer . invoice Object invoices have invoice objects attached to them ( primaryAddress ). The invoice information contains the invoice's name and address. Example const pdf = await api . invoices . downloadPDF ({ id : foobar-001 }); // the invoice s data in arraybuffer format console . log ( pdf . data ); Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a invoice for a specific customer and website. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new invoice const data = { customerId : foobar-0001 , websiteId : my-main-website , currency : USD , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, deliveryAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, notes : `customer s first invoice` , }; // the ID is optional const firstInvoice = await api . invoices . create ({ data }); // or you can provide one const secondInvoice = await api . invoices . create ({ id : my-second-id , data }); Returns A member exposing the created invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a invoice using its id . Example // define the values to update const data = { customerId : foobar-0001 , websiteId : my-main-website , currency : USD , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, deliveryAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, notes : `customer s first invoice` , }; const invoice = await api . invoices . update ({ id : my-second-id , data }); Returns A member exposing the updated invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. issue issue ({ id , data opt }) - {Member} Issue an invoice using its id . This will calculate the shipping, taxes, and customer's applicable redeemed coupons, and apply them to the invoice. Optionally provide an issuedTime in the future to schedule the invoice otherwise it will be generated immediately. Example // define the issued time const data = { issuedTime : 2017-09-19T20:46:51Z }; // issue the invoice without an issued time const firstInvoice = await api . invoices . issue ({ id : my-first-id }); // or include it const secondInvoice = await api . invoices . issue ({ id : my-second-id , data }); Returns A member exposing the issued invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. abandon abandon ({ id }) - {Member} Abandon an invoice using its id . An invoice has to be issued before being abandoned. Once abandoned the invoice can no longer be settled. Example const abandonedInvoice = await api . invoices . abandon ({ id : my-invoice-id }); console . log ( abandonedInvoice . fields . status ); Returns A member exposing the abandoned invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. void void ({ id }) - {Member} Void an invoice using its id . A void can only occur before settlement, otherwise a refund must be used. Example const abandonedInvoice = await api . invoices . abandon ({ id : my-invoice-id }); console . log ( abandonedInvoice . fields . status ); Returns A member exposing the voided invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllInvoiceItems getAllInvoiceItems ({ id , limit opt , offset opt }) - {Collection} Get a list of invoice items for a specific invoice using its id . Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Example // get the top 20 invoice items for this ID const invoiceItems = await api . invoices . getAllInvoiceItems ({ id : my-invoice-id , limit : 20 }); invoiceItems . items . forEach ( item = console . log ( item . fields . description )); Returns A collection exposing the invoice items. Type Collection API Spec See the detailed API spec for all payload fields and response data. createInvoiceItem createInvoiceItem ({ id , data }) - {Member} Create an invoice item within an existing invoice, by using its id . Example // first set the properties for the new invoice item const data = { type : debit , unitPrice : 5 }; const invoiceItem = await api . invoices . createInvoiceItem ({ id : my-second-id , data }); Returns A member exposing the created invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getLeadSource getLeadSource ({ id }) - {Member} Get a lead source by using the invoice id . Example const lead = await api . invoices . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createLeadSource createLeadSource ({ id , data }) - {Member} Create a lead source for a invoice id . A invoice can only have one lead source present at a time. invoice Tracking The lead source entity lets you track your invoices throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . invoices . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created invoice lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateLeadSource updateLeadSource ({ id , data }) - {Member} Update the lead source for a invoice id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . invoices . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update invoice lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteLeadSource deleteLeadSource ({ id }) - {Member} Delete a lead source using the invoice id . Example const request = await api . invoices . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllMatchedRules getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for an invoice id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . invoices . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection getAllTimelineMessages getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of invoice timeline messages for a invoice id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . invoices . getAllTimelineMessages ({ id : my-invoice ); // alternatively you can specify one or more of them const params = { id : my-invoice , limit : 20 , offset : 100 }; const secondCollection = await api . invoices . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of invoice timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data. getTimelineMessage getTimelineMessage ({ id , messageId }) - {Member} Get a invoice timeline message by its id and messageId combination. Example const message = await api . invoices . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the subscription timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createTimelineComment createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a invoice account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . invoices . createTimelineComment ({ id : my-invoice-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #invoice-subscription-id` ; const params = { id : my-invoice-id data : { message , }, }; const secondComment = await api . invoices . createTimelineComment ( params ); Returns A member exposing the created invoice timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteTimelineMessage deleteTimelineMessage ({ id , messageId }) - {Member} Delete a invoice timeline message by using its id and messageId combination. Example const request = await api . invoices . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member","title":"Invoices"},{"location":"reference/resources/invoices/#invoices-apiinvoices","text":"Member of RebillyAPI An invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer. Payment terms are usually stated on the invoice.","title":"Invoices api.invoices"},{"location":"reference/resources/invoices/#getall","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of invoices. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . invoices . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . invoices . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( invoice = console . log ( invoice . fields . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of invoices. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/invoices/#get","text":"get ({ id , expand opt }) - {Member} Get a invoice by its id . Define expand to include additional data. Allowed expand values: website customer organization invoice Object invoices have invoice objects attached to them ( primaryAddress ). The invoice information contains the invoice's name and address. Example const invoice = await api . invoices . get ({ id : foobar-001 }); console . log ( invoice . fields . primaryAddress . firstName ); Returns A member exposing the invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/invoices/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of invoices in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . invoices . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . invoices . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/invoices/#downloadpdf","text":"downloadPDF ({ id }) - {File} Get an invoice PDF by the invoice's id . Returns an ArrayBuffer . invoice Object invoices have invoice objects attached to them ( primaryAddress ). The invoice information contains the invoice's name and address. Example const pdf = await api . invoices . downloadPDF ({ id : foobar-001 }); // the invoice s data in arraybuffer format console . log ( pdf . data ); Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadPDF"},{"location":"reference/resources/invoices/#create","text":"create ({ id opt , data }) - {Member} Create a invoice for a specific customer and website. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new invoice const data = { customerId : foobar-0001 , websiteId : my-main-website , currency : USD , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, deliveryAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, notes : `customer s first invoice` , }; // the ID is optional const firstInvoice = await api . invoices . create ({ data }); // or you can provide one const secondInvoice = await api . invoices . create ({ id : my-second-id , data }); Returns A member exposing the created invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/invoices/#update","text":"update ({ id , data }) - {Member} Update a invoice using its id . Example // define the values to update const data = { customerId : foobar-0001 , websiteId : my-main-website , currency : USD , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, deliveryAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, notes : `customer s first invoice` , }; const invoice = await api . invoices . update ({ id : my-second-id , data }); Returns A member exposing the updated invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/invoices/#issue","text":"issue ({ id , data opt }) - {Member} Issue an invoice using its id . This will calculate the shipping, taxes, and customer's applicable redeemed coupons, and apply them to the invoice. Optionally provide an issuedTime in the future to schedule the invoice otherwise it will be generated immediately. Example // define the issued time const data = { issuedTime : 2017-09-19T20:46:51Z }; // issue the invoice without an issued time const firstInvoice = await api . invoices . issue ({ id : my-first-id }); // or include it const secondInvoice = await api . invoices . issue ({ id : my-second-id , data }); Returns A member exposing the issued invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"issue"},{"location":"reference/resources/invoices/#abandon","text":"abandon ({ id }) - {Member} Abandon an invoice using its id . An invoice has to be issued before being abandoned. Once abandoned the invoice can no longer be settled. Example const abandonedInvoice = await api . invoices . abandon ({ id : my-invoice-id }); console . log ( abandonedInvoice . fields . status ); Returns A member exposing the abandoned invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"abandon"},{"location":"reference/resources/invoices/#void","text":"void ({ id }) - {Member} Void an invoice using its id . A void can only occur before settlement, otherwise a refund must be used. Example const abandonedInvoice = await api . invoices . abandon ({ id : my-invoice-id }); console . log ( abandonedInvoice . fields . status ); Returns A member exposing the voided invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"void"},{"location":"reference/resources/invoices/#getallinvoiceitems","text":"getAllInvoiceItems ({ id , limit opt , offset opt }) - {Collection} Get a list of invoice items for a specific invoice using its id . Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Example // get the top 20 invoice items for this ID const invoiceItems = await api . invoices . getAllInvoiceItems ({ id : my-invoice-id , limit : 20 }); invoiceItems . items . forEach ( item = console . log ( item . fields . description )); Returns A collection exposing the invoice items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllInvoiceItems"},{"location":"reference/resources/invoices/#createinvoiceitem","text":"createInvoiceItem ({ id , data }) - {Member} Create an invoice item within an existing invoice, by using its id . Example // first set the properties for the new invoice item const data = { type : debit , unitPrice : 5 }; const invoiceItem = await api . invoices . createInvoiceItem ({ id : my-second-id , data }); Returns A member exposing the created invoice fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createInvoiceItem"},{"location":"reference/resources/invoices/#getleadsource","text":"getLeadSource ({ id }) - {Member} Get a lead source by using the invoice id . Example const lead = await api . invoices . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getLeadSource"},{"location":"reference/resources/invoices/#createleadsource","text":"createLeadSource ({ id , data }) - {Member} Create a lead source for a invoice id . A invoice can only have one lead source present at a time. invoice Tracking The lead source entity lets you track your invoices throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . invoices . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created invoice lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createLeadSource"},{"location":"reference/resources/invoices/#updateleadsource","text":"updateLeadSource ({ id , data }) - {Member} Update the lead source for a invoice id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . invoices . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update invoice lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateLeadSource"},{"location":"reference/resources/invoices/#deleteleadsource","text":"deleteLeadSource ({ id }) - {Member} Delete a lead source using the invoice id . Example const request = await api . invoices . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteLeadSource"},{"location":"reference/resources/invoices/#getallmatchedrules","text":"getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for an invoice id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . invoices . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"getAllMatchedRules"},{"location":"reference/resources/invoices/#getalltimelinemessages","text":"getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of invoice timeline messages for a invoice id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . invoices . getAllTimelineMessages ({ id : my-invoice ); // alternatively you can specify one or more of them const params = { id : my-invoice , limit : 20 , offset : 100 }; const secondCollection = await api . invoices . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of invoice timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllTimelineMessages"},{"location":"reference/resources/invoices/#gettimelinemessage","text":"getTimelineMessage ({ id , messageId }) - {Member} Get a invoice timeline message by its id and messageId combination. Example const message = await api . invoices . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the subscription timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTimelineMessage"},{"location":"reference/resources/invoices/#createtimelinecomment","text":"createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a invoice account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . invoices . createTimelineComment ({ id : my-invoice-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #invoice-subscription-id` ; const params = { id : my-invoice-id data : { message , }, }; const secondComment = await api . invoices . createTimelineComment ( params ); Returns A member exposing the created invoice timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createTimelineComment"},{"location":"reference/resources/invoices/#deletetimelinemessage","text":"deleteTimelineMessage ({ id , messageId }) - {Member} Delete a invoice timeline message by using its id and messageId combination. Example const request = await api . invoices . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member","title":"deleteTimelineMessage"},{"location":"reference/resources/kyc-documents/","text":"KYC Douments api . kycDocuments Member of RebillyAPI Know your customer (alternatively know your client or 'KYC') is the process of a business identifying and verifying the identity of its clients. The term is also used to refer to the bank and anti-money laundering regulations which governs these activities. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , expand opt , q opt }) -> {Collection} Get a collection of KYC documents of all customers. Example // all parameters are optional const firstCollection = await api . kycDocuments . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . kycDocuments . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( document = console . log ( document . fields . documentType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the [filters guide][guide-filters] for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of all customers KYC documents. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a KYC document by its id . Example const document = await api . kycDocuments . get ({ id : foobar-001 }); console . log ( document . fields . documentType ); Returns A member exposing the document fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ data }) - {Member} Create a KYC document. Example // All fields are required const data = { fieldId : 4f6cf35x-2c4y-483z-a0a9-158621f77a21 , customerId : 4f6cf35x-2c4y-483z-a0a9-158621f77a21 , documentType : identity-proof }; const firstKycDocument = await api . kycDocuments . create ({ data }); Note KYC documents requires a file id. Use the file resource to generate one from the uploaded document Returns A member exposing the created document. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a KYC document by using its id . Example // define the values to update const data = { status : accepted }; const document = await api . kycDocuments . update ({ id : my-second-id , data }); Returns A member exposing the updated customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data. accept accept ({ id }) - {Member} Accept a KYC document by its id . Example const acceptedDocument = await api . kycDocuments . accept ({ id : my-second-id }); console . log ( acceptedDocument . fields . status ); Returns A member exposing the accepted document. Type Member API Spec See the detailed API spec for all payload fields and response data. reject reject ({ id , data }) - {Member} Rejects a document for a customer by its id . Example const data = { type : document-expired , message : Document is expired } const rejectedDocument = await api . kycDocuments . reject ({ id : my-second-id , data }); console . log ( rejectedDocument . fields . rejectionReason . type ); Returns A member exposing the rejected document. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"KYC Documents"},{"location":"reference/resources/kyc-documents/#kyc-douments-apikycdocuments","text":"Member of RebillyAPI Know your customer (alternatively know your client or 'KYC') is the process of a business identifying and verifying the identity of its clients. The term is also used to refer to the bank and anti-money laundering regulations which governs these activities.","title":"KYC Douments api.kycDocuments"},{"location":"reference/resources/kyc-documents/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , expand opt , q opt }) -> {Collection} Get a collection of KYC documents of all customers. Example // all parameters are optional const firstCollection = await api . kycDocuments . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . kycDocuments . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( document = console . log ( document . fields . documentType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the [filters guide][guide-filters] for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of all customers KYC documents. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/kyc-documents/#get","text":"get ({ id }) - {Member} Get a KYC document by its id . Example const document = await api . kycDocuments . get ({ id : foobar-001 }); console . log ( document . fields . documentType ); Returns A member exposing the document fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/kyc-documents/#create","text":"create ({ data }) - {Member} Create a KYC document. Example // All fields are required const data = { fieldId : 4f6cf35x-2c4y-483z-a0a9-158621f77a21 , customerId : 4f6cf35x-2c4y-483z-a0a9-158621f77a21 , documentType : identity-proof }; const firstKycDocument = await api . kycDocuments . create ({ data }); Note KYC documents requires a file id. Use the file resource to generate one from the uploaded document Returns A member exposing the created document. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/kyc-documents/#update","text":"update ({ id , data }) - {Member} Update a KYC document by using its id . Example // define the values to update const data = { status : accepted }; const document = await api . kycDocuments . update ({ id : my-second-id , data }); Returns A member exposing the updated customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/kyc-documents/#accept","text":"accept ({ id }) - {Member} Accept a KYC document by its id . Example const acceptedDocument = await api . kycDocuments . accept ({ id : my-second-id }); console . log ( acceptedDocument . fields . status ); Returns A member exposing the accepted document. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"accept"},{"location":"reference/resources/kyc-documents/#reject","text":"reject ({ id , data }) - {Member} Rejects a document for a customer by its id . Example const data = { type : document-expired , message : Document is expired } const rejectedDocument = await api . kycDocuments . reject ({ id : my-second-id , data }); console . log ( rejectedDocument . fields . rejectionReason . type ); Returns A member exposing the rejected document. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"reject"},{"location":"reference/resources/layouts/","text":"Layouts api . layouts Member of RebillyAPI Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a pricing or plans page integrated into your website. getAll getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of layouts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . layouts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . layouts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( layout = console . log ( layout . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of layouts. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a layout by its id . Example const layout = await api . layouts . get ({ id : foobar-001 }); console . log ( layout . fields . description ); Returns A member exposing the layout fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a layout of plans. Optionally provide a specific id to use, or let Rebilly generate one. Plans You must have existing plans before you can create a layout. Example // first set the properties for the new layout const data = { name : My plans layout , items : [ { planId : foobar-0001 , starred : false }, { planId : foobar-0002 , // use the `starred` option to // mark a plan as being special, // i.e. `our best plan`, or `most popular` // then use this feature in your integration // to distinguish between `items` starred : true }, { planId : foobar-0003 , starred : false } ] }; // the ID is optional const firstLayout = await api . layouts . create ({ data }); // or you can provide one const secondLayout = await api . layouts . create ({ id : my-second-key , data }); Returns A member exposing the created layout fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a layout by using its id . Example // define values to update const data = { name : My better layout , items : [ { planId : foobar-0002 , starred : true }, { planId : foobar-0001 , starred : false }, { planId : foobar-0003 , starred : false } ] }; const layout = await api . layouts . update ({ id : my-second-key , data }); Returns A member exposing the updated layout fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a layout by using its id . Example const request = await api . layouts . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Layouts"},{"location":"reference/resources/layouts/#layouts-apilayouts","text":"Member of RebillyAPI Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a pricing or plans page integrated into your website.","title":"Layouts api.layouts"},{"location":"reference/resources/layouts/#getall","text":"getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of layouts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . layouts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . layouts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( layout = console . log ( layout . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of layouts. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/layouts/#get","text":"get ({ id }) - {Member} Get a layout by its id . Example const layout = await api . layouts . get ({ id : foobar-001 }); console . log ( layout . fields . description ); Returns A member exposing the layout fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/layouts/#create","text":"create ({ id opt , data }) - {Member} Create a layout of plans. Optionally provide a specific id to use, or let Rebilly generate one. Plans You must have existing plans before you can create a layout. Example // first set the properties for the new layout const data = { name : My plans layout , items : [ { planId : foobar-0001 , starred : false }, { planId : foobar-0002 , // use the `starred` option to // mark a plan as being special, // i.e. `our best plan`, or `most popular` // then use this feature in your integration // to distinguish between `items` starred : true }, { planId : foobar-0003 , starred : false } ] }; // the ID is optional const firstLayout = await api . layouts . create ({ data }); // or you can provide one const secondLayout = await api . layouts . create ({ id : my-second-key , data }); Returns A member exposing the created layout fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/layouts/#update","text":"update ({ id , data }) - {Member} Update a layout by using its id . Example // define values to update const data = { name : My better layout , items : [ { planId : foobar-0002 , starred : true }, { planId : foobar-0001 , starred : false }, { planId : foobar-0003 , starred : false } ] }; const layout = await api . layouts . update ({ id : my-second-key , data }); Returns A member exposing the updated layout fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/layouts/#delete","text":"delete ({ id }) - {Member} Delete a layout by using its id . Example const request = await api . layouts . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/lists/","text":"Lists api . lists Member of RebillyAPI A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself. Rules Engine Lists are related to Rules Engine and are only available within the system events . getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of lists. Each entry will be a member. Only the newest version of each list will be returned. Example // all parameters are optional const firstCollection = await api . lists . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . lists . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( list = console . log ( list . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of Lists. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id , version opt }) - {Member} Get the latest version of a list by its id . Optionally specific a specific version number to retrieve. Example // get the latest version const lastest = await api . lists . get ({ id : foobar-001 }); // get an older version const older = await api . lists . get ({ id : foobar-001 , version : 12 }); Returns A member exposing the list fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a list of values to uses in system events' criteria. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new list const data = { name : My value list , values : [ foobar-0001 , foobar-0002 , foobar-0003 , foobar-0004 , foobar-0005 , foobar-0006 ] }; // the ID is optional const firstList = await api . lists . create ({ data }); // or you can provide one const secondList = await api . lists . create ({ id : my-second-key , data }); Returns A member exposing the created list fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a list of values by using its id . Example // define values to update const data = { name : My better list , values : [ foobar-0004 , foobar-0005 , foobar-0006 ] }; const list = await api . lists . update ({ id : my-second-key , data }); Returns A member exposing the updated list fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a list by using its id . Example const request = await api . lists . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Lists"},{"location":"reference/resources/lists/#lists-apilists","text":"Member of RebillyAPI A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself. Rules Engine Lists are related to Rules Engine and are only available within the system events .","title":"Lists api.lists"},{"location":"reference/resources/lists/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of lists. Each entry will be a member. Only the newest version of each list will be returned. Example // all parameters are optional const firstCollection = await api . lists . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . lists . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( list = console . log ( list . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of Lists. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/lists/#get","text":"get ({ id , version opt }) - {Member} Get the latest version of a list by its id . Optionally specific a specific version number to retrieve. Example // get the latest version const lastest = await api . lists . get ({ id : foobar-001 }); // get an older version const older = await api . lists . get ({ id : foobar-001 , version : 12 }); Returns A member exposing the list fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/lists/#create","text":"create ({ id opt , data }) - {Member} Create a list of values to uses in system events' criteria. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new list const data = { name : My value list , values : [ foobar-0001 , foobar-0002 , foobar-0003 , foobar-0004 , foobar-0005 , foobar-0006 ] }; // the ID is optional const firstList = await api . lists . create ({ data }); // or you can provide one const secondList = await api . lists . create ({ id : my-second-key , data }); Returns A member exposing the created list fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/lists/#update","text":"update ({ id , data }) - {Member} Update a list of values by using its id . Example // define values to update const data = { name : My better list , values : [ foobar-0004 , foobar-0005 , foobar-0006 ] }; const list = await api . lists . update ({ id : my-second-key , data }); Returns A member exposing the updated list fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/lists/#delete","text":"delete ({ id }) - {Member} Delete a list by using its id . Example const request = await api . lists . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/notes/","text":"Notes api . notes Member of RebillyAPI Leave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service. getAll getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of notes. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . notes . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . notes . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( note = console . log ( note . fields . createdBy )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of notes. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a note by its id . Example const note = await api . notes . get ({ id : foobar-001 }); console . log ( note . fields . description ); Returns A member exposing the note fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a note for a specific resource ( relatedType ) and entity ID ( relatedId ). Optionally provide a specific id to use, or let Rebilly generate one. Allowed relatedType values: customer paayment-card payment-gateway subscriptions transaction Example // first set the properties for the new note const data = { content : This is our best customer , archived : false , // define the resource the note is attached to relatedType : customer , // and the ID of the member of that resource relatedId : my-customer-id }; // the ID is optional const firstNote = await api . notes . create ({ data }); // or you can provide one const secondNote = await api . notes . create ({ id : my-second-key , data }); Returns A member exposing the created note fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a note by using its id for a specific resource ( relatedType ) and entity ID ( relatedId ). Example // define values to update const data = { content : This was our best customer , archived : false , // define the resource the note is attached to relatedType : customer , // and the ID of the member of that resource relatedId : my-customer-id }; const note = await api . notes . update ({ id : my-second-key , data }); Returns A member exposing the updated note fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Notes"},{"location":"reference/resources/notes/#notes-apinotes","text":"Member of RebillyAPI Leave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service.","title":"Notes api.notes"},{"location":"reference/resources/notes/#getall","text":"getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of notes. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . notes . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . notes . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( note = console . log ( note . fields . createdBy )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of notes. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/notes/#get","text":"get ({ id }) - {Member} Get a note by its id . Example const note = await api . notes . get ({ id : foobar-001 }); console . log ( note . fields . description ); Returns A member exposing the note fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/notes/#create","text":"create ({ id opt , data }) - {Member} Create a note for a specific resource ( relatedType ) and entity ID ( relatedId ). Optionally provide a specific id to use, or let Rebilly generate one. Allowed relatedType values: customer paayment-card payment-gateway subscriptions transaction Example // first set the properties for the new note const data = { content : This is our best customer , archived : false , // define the resource the note is attached to relatedType : customer , // and the ID of the member of that resource relatedId : my-customer-id }; // the ID is optional const firstNote = await api . notes . create ({ data }); // or you can provide one const secondNote = await api . notes . create ({ id : my-second-key , data }); Returns A member exposing the created note fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/notes/#update","text":"update ({ id , data }) - {Member} Update a note by using its id for a specific resource ( relatedType ) and entity ID ( relatedId ). Example // define values to update const data = { content : This was our best customer , archived : false , // define the resource the note is attached to relatedType : customer , // and the ID of the member of that resource relatedId : my-customer-id }; const note = await api . notes . update ({ id : my-second-key , data }); Returns A member exposing the updated note fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/organizations/","text":"Organizations api . organizations Member of RebillyAPI Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations. Note Organizations are shared between the Live and Sandbox modes. getAll getAll ({ limit opt , offset opt , sort opt , q opt }) -> {Collection} Get a collection of organizations. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . organizations . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . organizations . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( organization = console . log ( organization . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of organizations. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get an organization by its id . Example const organization = await api . organizations . get ({ id : foobar-001 }); console . log ( organization . fields . name ); Returns A member exposing the organization fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create an organization. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new organization const data = { name : Acme Import Inc. , address : 1234 Roger Street , address2 : Suite 456 , city : Acmeville , region : null , country : Canada , postalCode : H1N0K1 }; // the ID is optional const firstOrganization = await api . organizations . create ({ data }); // or you can provide one const secondOrganization = await api . organizations . create ({ id : my-second-key , data }); Returns A member exposing the created organization fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update an organization by using its id . Example // define values to update const data = { name : Acme Export Inc. , address : 1234 Moore Street , address2 : Suite 757 , city : Acmeville , region : null , country : Canada , postalCode : H1N0K1 }; const organization = await api . organizations . update ({ id : my-second-key , data }); Returns A member exposing the updated organization fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete an organization by using its id . Example const request = await api . organizations . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Organizations"},{"location":"reference/resources/organizations/#organizations-apiorganizations","text":"Member of RebillyAPI Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations. Note Organizations are shared between the Live and Sandbox modes.","title":"Organizations api.organizations"},{"location":"reference/resources/organizations/#getall","text":"getAll ({ limit opt , offset opt , sort opt , q opt }) -> {Collection} Get a collection of organizations. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . organizations . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . organizations . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( organization = console . log ( organization . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of organizations. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/organizations/#get","text":"get ({ id }) - {Member} Get an organization by its id . Example const organization = await api . organizations . get ({ id : foobar-001 }); console . log ( organization . fields . name ); Returns A member exposing the organization fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/organizations/#create","text":"create ({ id opt , data }) - {Member} Create an organization. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new organization const data = { name : Acme Import Inc. , address : 1234 Roger Street , address2 : Suite 456 , city : Acmeville , region : null , country : Canada , postalCode : H1N0K1 }; // the ID is optional const firstOrganization = await api . organizations . create ({ data }); // or you can provide one const secondOrganization = await api . organizations . create ({ id : my-second-key , data }); Returns A member exposing the created organization fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/organizations/#update","text":"update ({ id , data }) - {Member} Update an organization by using its id . Example // define values to update const data = { name : Acme Export Inc. , address : 1234 Moore Street , address2 : Suite 757 , city : Acmeville , region : null , country : Canada , postalCode : H1N0K1 }; const organization = await api . organizations . update ({ id : my-second-key , data }); Returns A member exposing the updated organization fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/organizations/#delete","text":"delete ({ id }) - {Member} Delete an organization by using its id . Example const request = await api . organizations . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/payment-cards/","text":"Payment Cards api . paymentCards Member of RebillyAPI A form of payment instrument, payment cards enable customers to do transactions when buying your products. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of payment cards. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . paymentCards . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . paymentCards . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paymentCard = console . log ( paymentCard . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of payment cards. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a payment cards by its id . Example const paymentCard = await api . paymentCards . get ({ id : foobar-001 }); console . log ( paymentCard . fields . customerId ); Returns A member exposing the payment cards fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a payment card for a specific customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new payment card const data = { pan : 4111111111111111 , expYear : 2022 , expMonth : 11 , cvv : 123 , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }] }, // the customer ID for which // we are adding a payment card customerId : foobar-0001 }; // the ID is optional const firstCard = await api . paymentCards . create ({ data }); // or you can provide one const secondCard = await api . paymentCards . create ({ id : my-second-key , data }); Returns A member exposing the created payment card fields. Type Member API Spec See the detailed API spec for all payload fields and response data. authorize authorize ({ id , data }) - {Member} Authorize an amount for a payment card by using its id , for a specific website and gateway. Results in a hold placed on the cardholder\u2019s account for the authorized amount. An authorization response code is later used to capture the authorized funds. Example // first set the properties for the authorization const data = { websiteId : my-main-website , // currency three letter code currency : USD , gatewayAccountId : my-main-gateway , amount : 12.99 }; const paymentCard = await api . paymentCards . authorize ({ id : my-second-key , data }); Returns A member exposing the payment card fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deactivate deactivate ({ id }) - {Member} Deactivate a payment card by using its id . Once deactivated the card can no longer be used for payments. Example const paymentCard = await api . paymentCards . deactivate ({ id : my-second-key }); console . log ( paymentCard . fields . status ); Returns A member exposing the payment card fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllMigratable getAllMigratable ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of migratable payment cards. Each entry will be a member. Payment Card Migration Migrating payment cards lets you move cards in bulk from one gateway account to another. This is useful when the original gateway account is no longer available. Example // all parameters are optional const firstCollection = await api . paymentCards . getAllMigratable (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . paymentCards . getAllMigratable ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paymentCard = console . log ( paymentCard . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of migratable payment cards. Type Collection API Spec See the detailed API spec for all payload fields and response data. migrate migrate ({ data }) - {Member} Migrate payment cards in bulk from one gateway account to another using their id . This is useful when the original gateway account is no longer available. Example // first build the migration const data = { fromGatewayAccountId : original-gateway-id , toGatewayAccountId : target-gateway-id , paymentCardIds : [ foobar-0001 , foobar-0002 , foobar-0003 , foobar-0004 , foobar-0005 , foobar-0006 ] }; const result = await api . paymentCards . migrate ({ data }); // you can verify the amount of cards that // were successfully migrated console . log ( result . fields . migratedCards ); Returns A member exposing a single field ( migratedCards ) with the amount of cards that were successfully migrated. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllMatchedRules getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a payment card id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . paymentCards . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"Payment Cards"},{"location":"reference/resources/payment-cards/#payment-cards-apipaymentcards","text":"Member of RebillyAPI A form of payment instrument, payment cards enable customers to do transactions when buying your products.","title":"Payment Cards api.paymentCards"},{"location":"reference/resources/payment-cards/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of payment cards. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . paymentCards . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . paymentCards . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paymentCard = console . log ( paymentCard . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of payment cards. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/payment-cards/#get","text":"get ({ id }) - {Member} Get a payment cards by its id . Example const paymentCard = await api . paymentCards . get ({ id : foobar-001 }); console . log ( paymentCard . fields . customerId ); Returns A member exposing the payment cards fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/payment-cards/#create","text":"create ({ id opt , data }) - {Member} Create a payment card for a specific customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new payment card const data = { pan : 4111111111111111 , expYear : 2022 , expMonth : 11 , cvv : 123 , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }] }, // the customer ID for which // we are adding a payment card customerId : foobar-0001 }; // the ID is optional const firstCard = await api . paymentCards . create ({ data }); // or you can provide one const secondCard = await api . paymentCards . create ({ id : my-second-key , data }); Returns A member exposing the created payment card fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/payment-cards/#authorize","text":"authorize ({ id , data }) - {Member} Authorize an amount for a payment card by using its id , for a specific website and gateway. Results in a hold placed on the cardholder\u2019s account for the authorized amount. An authorization response code is later used to capture the authorized funds. Example // first set the properties for the authorization const data = { websiteId : my-main-website , // currency three letter code currency : USD , gatewayAccountId : my-main-gateway , amount : 12.99 }; const paymentCard = await api . paymentCards . authorize ({ id : my-second-key , data }); Returns A member exposing the payment card fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"authorize"},{"location":"reference/resources/payment-cards/#deactivate","text":"deactivate ({ id }) - {Member} Deactivate a payment card by using its id . Once deactivated the card can no longer be used for payments. Example const paymentCard = await api . paymentCards . deactivate ({ id : my-second-key }); console . log ( paymentCard . fields . status ); Returns A member exposing the payment card fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deactivate"},{"location":"reference/resources/payment-cards/#getallmigratable","text":"getAllMigratable ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of migratable payment cards. Each entry will be a member. Payment Card Migration Migrating payment cards lets you move cards in bulk from one gateway account to another. This is useful when the original gateway account is no longer available. Example // all parameters are optional const firstCollection = await api . paymentCards . getAllMigratable (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . paymentCards . getAllMigratable ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paymentCard = console . log ( paymentCard . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of migratable payment cards. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllMigratable"},{"location":"reference/resources/payment-cards/#migrate","text":"migrate ({ data }) - {Member} Migrate payment cards in bulk from one gateway account to another using their id . This is useful when the original gateway account is no longer available. Example // first build the migration const data = { fromGatewayAccountId : original-gateway-id , toGatewayAccountId : target-gateway-id , paymentCardIds : [ foobar-0001 , foobar-0002 , foobar-0003 , foobar-0004 , foobar-0005 , foobar-0006 ] }; const result = await api . paymentCards . migrate ({ data }); // you can verify the amount of cards that // were successfully migrated console . log ( result . fields . migratedCards ); Returns A member exposing a single field ( migratedCards ) with the amount of cards that were successfully migrated. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"migrate"},{"location":"reference/resources/payment-cards/#getallmatchedrules","text":"getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a payment card id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . paymentCards . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"getAllMatchedRules"},{"location":"reference/resources/payment-tokens/","text":"Payment Tokens api . paymentTokens Member of RebillyAPI Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours. Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens. See Rebilly.js library getAll getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of payment tokens. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . paymentTokens . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . paymentTokens . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paymentToken = console . log ( paymentToken . fields . id )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of payment tokens. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a payment token by its id . Example const paymentToken = await api . paymentTokens . get ({ id : foobar-001 }); console . log ( paymentToken . fields . method ); Returns A member exposing the payment token fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a payment token from a payment instrument. It can then be used to complete an order as a surrogate for a payment instrument. A payment token can represent either payment card or bank account. Allowed method values: ach cash payment-card paypal Alipay China UnionPay Flexepin Gpaysafe Jeton OchaPay SMSVoucher UPayCard WeChat Pay Example // first set the properties for the new payment token const data = { method : payment-card , paymentInstrument : { pan : 4111111111111111 , expYear : 2022 , expMonth : 12 , cvv : 123 }, billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }] } }; const token = await api . paymentTokens . create ({ data }); Returns A member exposing the created payment token fields. Type Member API Spec See the detailed API spec for all payload fields and response data. expire expire ({ id }) - {Member} Expire a payment token by using its id . This will prevent the token from being used in new orders. Example const paymentToken = await api . paymentTokens . expire ({ id : my-second-key }); Returns A member exposing the expired payment token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Payment Tokens"},{"location":"reference/resources/payment-tokens/#payment-tokens-apipaymenttokens","text":"Member of RebillyAPI Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours. Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens. See Rebilly.js library","title":"Payment Tokens api.paymentTokens"},{"location":"reference/resources/payment-tokens/#getall","text":"getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of payment tokens. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . paymentTokens . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . paymentTokens . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paymentToken = console . log ( paymentToken . fields . id )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of payment tokens. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/payment-tokens/#get","text":"get ({ id }) - {Member} Get a payment token by its id . Example const paymentToken = await api . paymentTokens . get ({ id : foobar-001 }); console . log ( paymentToken . fields . method ); Returns A member exposing the payment token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/payment-tokens/#create","text":"create ({ id opt , data }) - {Member} Create a payment token from a payment instrument. It can then be used to complete an order as a surrogate for a payment instrument. A payment token can represent either payment card or bank account. Allowed method values: ach cash payment-card paypal Alipay China UnionPay Flexepin Gpaysafe Jeton OchaPay SMSVoucher UPayCard WeChat Pay Example // first set the properties for the new payment token const data = { method : payment-card , paymentInstrument : { pan : 4111111111111111 , expYear : 2022 , expMonth : 12 , cvv : 123 }, billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }] } }; const token = await api . paymentTokens . create ({ data }); Returns A member exposing the created payment token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/payment-tokens/#expire","text":"expire ({ id }) - {Member} Expire a payment token by using its id . This will prevent the token from being used in new orders. Example const paymentToken = await api . paymentTokens . expire ({ id : my-second-key }); Returns A member exposing the expired payment token fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"expire"},{"location":"reference/resources/paypal-accounts/","text":"Paypal Accounts api . paypalAccounts Member of RebillyAPI A form of payment instrument, paypal accounts enable customers to do transactions when buying your products. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of paypal accounts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . paypalAccounts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . paypalAccounts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paypalAccount = console . log ( paypalAccount . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of paypal accounts. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a paypal accounts by its id . Example const paypalAccount = await api . paypalAccounts . get ({ id : foobar-001 }); console . log ( paypalAccount . fields . customerId ); Returns A member exposing the paypal accounts fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a paypal account for a specific customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new paypal account const data = { username : myPaypalUser , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }] }, // the customer ID for which // we are adding a paypal account customerId : foobar-0001 }; // the ID is optional const firstCard = await api . paypalAccounts . create ({ data }); // or you can provide one const secondCard = await api . paypalAccounts . create ({ id : my-second-key , data }); Returns A member exposing the created paypal account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. activate activate ({ id , data }) - {Member} Activate a Paypal account using its id for a specific website and gateway account. Example // first set the properties for the activation const data = { websiteId : my-main-website , // currency three letter code currency : USD , gatewayAccountId : my-main-gateway , amount : 12.99 , redirectURLs : { success : https://www.acme.com/success , decline : https://www.acme.com/decline , cancel : https://www.acme.com/cancel , error : https://www.acme.com/error } }; const paypalAccount = await api . paypalAccounts . activate ({ id : my-second-key , data }); Returns A member exposing the paypal account fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deactivate deactivate ({ id }) - {Member} Deactivate a paypal account by using its id . Once deactivated the card can no longer be actively used. Example const paypalAccount = await api . paypalAccounts . deactivate ({ id : my-second-key }); console . log ( paypalAccount . fields . status ); Returns A member exposing the paypal account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Paypal Accounts"},{"location":"reference/resources/paypal-accounts/#paypal-accounts-apipaypalaccounts","text":"Member of RebillyAPI A form of payment instrument, paypal accounts enable customers to do transactions when buying your products.","title":"Paypal Accounts api.paypalAccounts"},{"location":"reference/resources/paypal-accounts/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of paypal accounts. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . paypalAccounts . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . paypalAccounts . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( paypalAccount = console . log ( paypalAccount . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of paypal accounts. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/paypal-accounts/#get","text":"get ({ id }) - {Member} Get a paypal accounts by its id . Example const paypalAccount = await api . paypalAccounts . get ({ id : foobar-001 }); console . log ( paypalAccount . fields . customerId ); Returns A member exposing the paypal accounts fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/paypal-accounts/#create","text":"create ({ id opt , data }) - {Member} Create a paypal account for a specific customer. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new paypal account const data = { username : myPaypalUser , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }] }, // the customer ID for which // we are adding a paypal account customerId : foobar-0001 }; // the ID is optional const firstCard = await api . paypalAccounts . create ({ data }); // or you can provide one const secondCard = await api . paypalAccounts . create ({ id : my-second-key , data }); Returns A member exposing the created paypal account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/paypal-accounts/#activate","text":"activate ({ id , data }) - {Member} Activate a Paypal account using its id for a specific website and gateway account. Example // first set the properties for the activation const data = { websiteId : my-main-website , // currency three letter code currency : USD , gatewayAccountId : my-main-gateway , amount : 12.99 , redirectURLs : { success : https://www.acme.com/success , decline : https://www.acme.com/decline , cancel : https://www.acme.com/cancel , error : https://www.acme.com/error } }; const paypalAccount = await api . paypalAccounts . activate ({ id : my-second-key , data }); Returns A member exposing the paypal account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"activate"},{"location":"reference/resources/paypal-accounts/#deactivate","text":"deactivate ({ id }) - {Member} Deactivate a paypal account by using its id . Once deactivated the card can no longer be actively used. Example const paypalAccount = await api . paypalAccounts . deactivate ({ id : my-second-key }); console . log ( paypalAccount . fields . status ); Returns A member exposing the paypal account fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deactivate"},{"location":"reference/resources/plans/","text":"Plans api . plans Member of RebillyAPI Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences. getAll getAll ({ limit opt , offset opt , sort opt , q opt }) -> {Collection} Get a collection of plans. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . plans . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . plans . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( plan = console . log ( plan . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of plans. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a plan by its id . Example const plan = await api . plans . get ({ id : foobar-001 }); console . log ( plan . fields . name ); Returns A member exposing the plan fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a plan. Optionally provide a specific id to use, or let Rebilly generate one. A plan can have both a trial and recurring part but you must provide at lease one of them to create it. See the API spec for more details. Subscriptions At least one plan is required to be able to create new subscriptions. Example // first set the properties for the new plan const data = { name : My strongest plan , currency : USD , setupAmount : 12.99 , // you could also include a trial if needed recurringPeriodUnit : month , recurringPeriodLength : 1 , recurringAmount : 25.99 }; // the ID is optional const firstPlan = await api . plans . create ({ data }); // or you can provide one const secondPlan = await api . plans . create ({ id : my-second-key , data }); Returns A member exposing the created plan fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a plan by using its id . Example // define values to update const data = { name : My strongest plan , currency : USD , setupAmount : 12.99 , recurringPeriodUnit : month , recurringPeriodLength : 1 , recurringAmount : 25.99 , isActive : false }; const plan = await api . plans . update ({ id : my-second-key , data }); Returns A member exposing the updated plan fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a plan by using its id . Active Subscriptions You cannot delete plans that have active subscriptions. Example const request = await api . plans . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Plans"},{"location":"reference/resources/plans/#plans-apiplans","text":"Member of RebillyAPI Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences.","title":"Plans api.plans"},{"location":"reference/resources/plans/#getall","text":"getAll ({ limit opt , offset opt , sort opt , q opt }) -> {Collection} Get a collection of plans. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . plans . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . plans . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( plan = console . log ( plan . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of plans. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/plans/#get","text":"get ({ id }) - {Member} Get a plan by its id . Example const plan = await api . plans . get ({ id : foobar-001 }); console . log ( plan . fields . name ); Returns A member exposing the plan fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/plans/#create","text":"create ({ id opt , data }) - {Member} Create a plan. Optionally provide a specific id to use, or let Rebilly generate one. A plan can have both a trial and recurring part but you must provide at lease one of them to create it. See the API spec for more details. Subscriptions At least one plan is required to be able to create new subscriptions. Example // first set the properties for the new plan const data = { name : My strongest plan , currency : USD , setupAmount : 12.99 , // you could also include a trial if needed recurringPeriodUnit : month , recurringPeriodLength : 1 , recurringAmount : 25.99 }; // the ID is optional const firstPlan = await api . plans . create ({ data }); // or you can provide one const secondPlan = await api . plans . create ({ id : my-second-key , data }); Returns A member exposing the created plan fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/plans/#update","text":"update ({ id , data }) - {Member} Update a plan by using its id . Example // define values to update const data = { name : My strongest plan , currency : USD , setupAmount : 12.99 , recurringPeriodUnit : month , recurringPeriodLength : 1 , recurringAmount : 25.99 , isActive : false }; const plan = await api . plans . update ({ id : my-second-key , data }); Returns A member exposing the updated plan fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/plans/#delete","text":"delete ({ id }) - {Member} Delete a plan by using its id . Active Subscriptions You cannot delete plans that have active subscriptions. Example const request = await api . plans . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/previews/","text":"Previews api . previews Member of RebillyAPI Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine. Testing Webhooks We recommend Hookbin for testing webhooks. It collects your requests and lets you inspect them using a unique URL. webhook webhook ({ data }) - {Member} Preview a global webhook. You must create a credential hash prior to previewing the webhook. See credentialHashes.createWebhookCredential See api.webhooks Example // first build the webhook data including // the credential hash const data = { eventsFilter : [], status : active , method : POST , headers : {}, // hookb.in is a great tool for // previewing webhooks url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const request = await api . previews . webhooks ({ data }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. triggerWebhookRuleAction triggerWebhookRuleAction ({ data }) - {Member} Preview a webhook part of an action within an event rule. You must create a credential hash prior to previewing the webhook. A webhook action can be part of a system event or custom event . See credentialHashes.createWebhookCredential Example // first build the webhook data including // the credential hash const data = { body : JSON . stringify ({ hello : world }), status : active , method : POST , headers : {}, query : {}, // hookb.in is a great tool for // previewing webhooks url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const webhook = await api . previews . triggerWebhookRuleAction ({ data }); Returns A member exposing the test webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data. sendEmailRuleAction sendEmailRuleAction ({ data }) - {Member} Preview an email part of an action within an event rule. You must create a credential hash prior to previewing the webhook. A send email action can be part of a system event or custom event . See credentialHashes.createEmailCredential Example // first build the email data including // the credential hash const data = { bodyText : hello world , bodyHTML : ` strong hello world /strong ` , sender : john.doe+test@grr.la , recipients : [ john.doe+test@grr.la ], subject : testing email preview , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const email = await api . previews . sendEmailRuleAction ({ data }); Returns A member exposing the test email fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Previews"},{"location":"reference/resources/previews/#previews-apipreviews","text":"Member of RebillyAPI Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine. Testing Webhooks We recommend Hookbin for testing webhooks. It collects your requests and lets you inspect them using a unique URL.","title":"Previews api.previews"},{"location":"reference/resources/previews/#webhook","text":"webhook ({ data }) - {Member} Preview a global webhook. You must create a credential hash prior to previewing the webhook. See credentialHashes.createWebhookCredential See api.webhooks Example // first build the webhook data including // the credential hash const data = { eventsFilter : [], status : active , method : POST , headers : {}, // hookb.in is a great tool for // previewing webhooks url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const request = await api . previews . webhooks ({ data }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"webhook"},{"location":"reference/resources/previews/#triggerwebhookruleaction","text":"triggerWebhookRuleAction ({ data }) - {Member} Preview a webhook part of an action within an event rule. You must create a credential hash prior to previewing the webhook. A webhook action can be part of a system event or custom event . See credentialHashes.createWebhookCredential Example // first build the webhook data including // the credential hash const data = { body : JSON . stringify ({ hello : world }), status : active , method : POST , headers : {}, query : {}, // hookb.in is a great tool for // previewing webhooks url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const webhook = await api . previews . triggerWebhookRuleAction ({ data }); Returns A member exposing the test webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"triggerWebhookRuleAction"},{"location":"reference/resources/previews/#sendemailruleaction","text":"sendEmailRuleAction ({ data }) - {Member} Preview an email part of an action within an event rule. You must create a credential hash prior to previewing the webhook. A send email action can be part of a system event or custom event . See credentialHashes.createEmailCredential Example // first build the email data including // the credential hash const data = { bodyText : hello world , bodyHTML : ` strong hello world /strong ` , sender : john.doe+test@grr.la , recipients : [ john.doe+test@grr.la ], subject : testing email preview , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const email = await api . previews . sendEmailRuleAction ({ data }); Returns A member exposing the test email fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"sendEmailRuleAction"},{"location":"reference/resources/products/","text":"Products api . products Member of RebillyAPI Create and manage products. You may attach them to products. Products can have a tax category, accounting code and may require shipping. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of products. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . products . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . products . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( product = console . log ( product . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of products. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a product by its id . Example const product = await api . products . get ({ id : foobar-001 }); console . log ( product . fields . name ); Returns A member exposing the product fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a product. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new product const data = { name : my first product , description : made to be of the highest quality , taxCategoryId : , requiresShipping : true , accountingCode : 100 , customFields : [] }; // the ID is optional const firstProduct = await api . products . create ({ data }); // or you can provide one const secondProduct = await api . products . create ({ id : my-second-key , data }); Returns A member exposing the created product fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a product by using its id . Example // define values to update const data = { name : my first product , description : made to be of the highest quality , taxCategoryId : 20010 , requiresShipping : false , accountingCode : 77 , customFields : [] }; const product = await api . products . update ({ id : my-second-key , data }); Returns A member exposing the updated product fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a product by using its id . Example const request = await api . products . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Products"},{"location":"reference/resources/products/#products-apiproducts","text":"Member of RebillyAPI Create and manage products. You may attach them to products. Products can have a tax category, accounting code and may require shipping.","title":"Products api.products"},{"location":"reference/resources/products/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of products. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . products . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . products . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( product = console . log ( product . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of products. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/products/#get","text":"get ({ id }) - {Member} Get a product by its id . Example const product = await api . products . get ({ id : foobar-001 }); console . log ( product . fields . name ); Returns A member exposing the product fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/products/#create","text":"create ({ id opt , data }) - {Member} Create a product. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new product const data = { name : my first product , description : made to be of the highest quality , taxCategoryId : , requiresShipping : true , accountingCode : 100 , customFields : [] }; // the ID is optional const firstProduct = await api . products . create ({ data }); // or you can provide one const secondProduct = await api . products . create ({ id : my-second-key , data }); Returns A member exposing the created product fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/products/#update","text":"update ({ id , data }) - {Member} Update a product by using its id . Example // define values to update const data = { name : my first product , description : made to be of the highest quality , taxCategoryId : 20010 , requiresShipping : false , accountingCode : 77 , customFields : [] }; const product = await api . products . update ({ id : my-second-key , data }); Returns A member exposing the updated product fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/products/#delete","text":"delete ({ id }) - {Member} Delete a product by using its id . Example const request = await api . products . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/profile/","text":"Profile api . profile Member of RebillyAPI Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in. The profile includes information about the currently authenticated user like his name, email and preferences. get get ({ id }) - {Member} Get currently authenticated user's profile. Example const profile = await api . profile . get (); console . log ( profile . fields . email ); Returns A member exposing the profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update the authenticated user's profile. Example // define values to update const data = { reportingCurrency : USD , preferences : [], totpRequired : false }; const profile = await api . profile . update ({ data }); Returns A member exposing the updated profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updatePassword updatePassword ({ id , data }) - {Member} Update the authenticated user's password. Current Password Required The user's current password is required to enable the update. This feature is best used in a self-service environment where the user triggers his own password update. Example // define values to update const data = { currentPassword : previousUserPassword123 , newPassword : newUserPassword123 }; const profile = await api . profile . updatePassword ({ data }); Returns A member exposing the user's profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data. resetTotp resetTotp () - {Member} Renew the user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication. Example const profile = await api . profile . resetTotp (); console . log ( profile . fields . toptSecret ); Returns A member exposing the user's profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Profile"},{"location":"reference/resources/profile/#profile-apiprofile","text":"Member of RebillyAPI Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in. The profile includes information about the currently authenticated user like his name, email and preferences.","title":"Profile api.profile"},{"location":"reference/resources/profile/#get","text":"get ({ id }) - {Member} Get currently authenticated user's profile. Example const profile = await api . profile . get (); console . log ( profile . fields . email ); Returns A member exposing the profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/profile/#update","text":"update ({ id , data }) - {Member} Update the authenticated user's profile. Example // define values to update const data = { reportingCurrency : USD , preferences : [], totpRequired : false }; const profile = await api . profile . update ({ data }); Returns A member exposing the updated profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/profile/#updatepassword","text":"updatePassword ({ id , data }) - {Member} Update the authenticated user's password. Current Password Required The user's current password is required to enable the update. This feature is best used in a self-service environment where the user triggers his own password update. Example // define values to update const data = { currentPassword : previousUserPassword123 , newPassword : newUserPassword123 }; const profile = await api . profile . updatePassword ({ data }); Returns A member exposing the user's profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updatePassword"},{"location":"reference/resources/profile/#resettotp","text":"resetTotp () - {Member} Renew the user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication. Example const profile = await api . profile . resetTotp (); console . log ( profile . fields . toptSecret ); Returns A member exposing the user's profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"resetTotp"},{"location":"reference/resources/sessions/","text":"Sessions api . sessions Member of RebillyAPI Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys. This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API. See account.signIn get get ({ id }) - {Member} Get a session by its id . Example const session = await api . sessions . get ({ id : foobar-001 }); console . log ( session . fields . name ); Returns A member exposing the session fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a session. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new session const data = { permissions : [ { resourceName : plans , methods : [ GET , POST , PUT , HEAD , DELETE ] } ] // optionally you can define an `expiredTime` to // limit the duration of the session //expiredTime: 2017-09-18T19:17:39Z }; // the ID is optional const firstSession = await api . sessions . create ({ data }); // or you can provide one const secondSession = await api . sessions . create ({ id : my-second-key , data }); Returns A member exposing the created session fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a session by using its id . Example // define values to update const data = { permissions : [ { resourceName : plans , methods : [ GET , POST , PUT , DELETE ] }, { resourceName : customers , methods : [ GET , POST , PUT , DELETE ] } ] }; const session = await api . sessions . update ({ id : my-second-key , data }); Returns A member exposing the updated session fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a session by using its id . Example const request = await api . sessions . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Sessions"},{"location":"reference/resources/sessions/#sessions-apisessions","text":"Member of RebillyAPI Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys. This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API. See account.signIn","title":"Sessions api.sessions"},{"location":"reference/resources/sessions/#get","text":"get ({ id }) - {Member} Get a session by its id . Example const session = await api . sessions . get ({ id : foobar-001 }); console . log ( session . fields . name ); Returns A member exposing the session fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/sessions/#create","text":"create ({ id opt , data }) - {Member} Create a session. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new session const data = { permissions : [ { resourceName : plans , methods : [ GET , POST , PUT , HEAD , DELETE ] } ] // optionally you can define an `expiredTime` to // limit the duration of the session //expiredTime: 2017-09-18T19:17:39Z }; // the ID is optional const firstSession = await api . sessions . create ({ data }); // or you can provide one const secondSession = await api . sessions . create ({ id : my-second-key , data }); Returns A member exposing the created session fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/sessions/#update","text":"update ({ id , data }) - {Member} Update a session by using its id . Example // define values to update const data = { permissions : [ { resourceName : plans , methods : [ GET , POST , PUT , DELETE ] }, { resourceName : customers , methods : [ GET , POST , PUT , DELETE ] } ] }; const session = await api . sessions . update ({ id : my-second-key , data }); Returns A member exposing the updated session fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/sessions/#delete","text":"delete ({ id }) - {Member} Delete a session by using its id . Example const request = await api . sessions . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/shipping-zones/","text":"Shipping Zones api . shippingZones Member of RebillyAPI Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates. getAll getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of shipping zones. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . shippingZones . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . shippingZones . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( shippingZone = console . log ( shippingZone . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of shipping zones. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a shipping zone by its id . Example const shippingZone = await api . shippingZones . get ({ id : foobar-001 }); console . log ( shippingZone . fields . name ); Returns A member exposing the shipping zone fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a shipping zone. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new shipping zone const data = { name : free shipping , rates : [ { name : free shipping , price : 0 , currency : USD } ], countries : [ US ] }; // the ID is optional const firstZone = await api . shippingZones . create ({ data }); // or you can provide one const secondZone = await api . shippingZones . create ({ id : my-second-key , data }); Returns A member exposing the created shipping zone fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a shipping zone by using its id . Example // define values to update const data = { name : normal shipping , rates : [ { name : flat rate , price : 9.99 , currency : USD } ], // when null it will match any country countries : null }; const shippingZone = await api . shippingZones . update ({ id : my-second-key , data }); Returns A member exposing the updated shipping zone fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a shipping zone by using its id . Example const request = await api . shippingZones . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Shipping Zones"},{"location":"reference/resources/shipping-zones/#shipping-zones-apishippingzones","text":"Member of RebillyAPI Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates.","title":"Shipping Zones api.shippingZones"},{"location":"reference/resources/shipping-zones/#getall","text":"getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of shipping zones. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . shippingZones . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . shippingZones . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( shippingZone = console . log ( shippingZone . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of shipping zones. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/shipping-zones/#get","text":"get ({ id }) - {Member} Get a shipping zone by its id . Example const shippingZone = await api . shippingZones . get ({ id : foobar-001 }); console . log ( shippingZone . fields . name ); Returns A member exposing the shipping zone fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/shipping-zones/#create","text":"create ({ id opt , data }) - {Member} Create a shipping zone. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new shipping zone const data = { name : free shipping , rates : [ { name : free shipping , price : 0 , currency : USD } ], countries : [ US ] }; // the ID is optional const firstZone = await api . shippingZones . create ({ data }); // or you can provide one const secondZone = await api . shippingZones . create ({ id : my-second-key , data }); Returns A member exposing the created shipping zone fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/shipping-zones/#update","text":"update ({ id , data }) - {Member} Update a shipping zone by using its id . Example // define values to update const data = { name : normal shipping , rates : [ { name : flat rate , price : 9.99 , currency : USD } ], // when null it will match any country countries : null }; const shippingZone = await api . shippingZones . update ({ id : my-second-key , data }); Returns A member exposing the updated shipping zone fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/shipping-zones/#delete","text":"delete ({ id }) - {Member} Delete a shipping zone by using its id . Example const request = await api . shippingZones . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/status/","text":"Status api . status Member of RebillyAPI Get the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not. get get () - {Member} Get the API's status. Tip You can poll this endpoint on interval to check the status of the API. Example const status = await api . status . get ({ id : foobar-001 }); console . log ( status . fields . status ); Returns A member exposing the status fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Status"},{"location":"reference/resources/status/#status-apistatus","text":"Member of RebillyAPI Get the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not.","title":"Status api.status"},{"location":"reference/resources/status/#get","text":"get () - {Member} Get the API's status. Tip You can poll this endpoint on interval to check the status of the API. Example const status = await api . status . get ({ id : foobar-001 }); console . log ( status . fields . status ); Returns A member exposing the status fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/subscriptions/","text":"Subscriptions api . subscriptions Member of RebillyAPI Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination. getAll getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of subscriptions. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . subscriptions . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . subscriptions . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( subscription = console . log ( subscription . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of subscriptions. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a subscription by its id . Example const subscription = await api . subscriptions . get ({ id : foobar-001 }); console . log ( subscription . fields . billingAddress . firstName ); Returns A member exposing the subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of subscriptions in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . subscriptions . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . subscriptions . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a subscription for a specific customer, website and plan combination. Optionally provide a specific id to use, or let Rebilly generate one. An initialInvoiceId can be defined which will allow you to insert the subscription as an invoice item to an existing invoice. Example // first set the properties for the new subscription const data = { customerId : foobar-0001 , websiteId : my-main-website , planId : my-plan-id , // you can append this subscription to // an existing invoice by passing its ID initialInvoiceId : my-existing-invoice-id , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, deliveryAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, quantity : 1 , customFields : {} }; // the ID is optional const firstInvoice = await api . subscriptions . create ({ data }); // or you can provide one const secondInvoice = await api . subscriptions . create ({ id : my-second-id , data }); Returns A member exposing the created subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a subscription using its id . Example // define the values to update const data = { // determines if a payment attempt will be automatic autopay : false , // set the next renewal time renewalTime : 2018-09-26T15:34:29Z }; const subscription = await api . subscriptions . update ({ id : my-second-id , data }); Returns A member exposing the updated subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data. cancel cancel ({ id , data }) - {Member} Cancel an subscription using its id . The policy will be used to determine when the subscription will end. Allowed policy values: at-next-renewal now-with-prorata-credit now Example // define the cancellation details const data = { policy : at-next-renewal , canceledBy : merchant , cancelCategory : did-not-use , cancelDescription : the user did not use the product }; const subscription = await api . subscriptions . cancel ({ id : my-second-id , data }); Returns A member exposing the canceled subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data. change-plan change-plan ({ id }) - {Member} Change the customer's subscription plan. The renewalPolicy will be used to determine when the change will be completed. This feature is useful for upgrading and downgrading the customer's subscription. Allowed renewalPolicy values: reset retain Example // define the subscription details const data = { planId : my-other-plan , renewalPolicy : retain , prorated : false }; const abandonedInvoice = await api . subscriptions . changePlan ({ id : my-subscription-id , data }); Returns A member exposing the changed subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getLeadSource getLeadSource ({ id }) - {Member} Get a lead source by using the subscription id . Example const lead = await api . subscriptions . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createLeadSource createLeadSource ({ id , data }) - {Member} Create a lead source for a subscription id . A subscription can only have one lead source present at a time. subscription Tracking The lead source entity lets you track your subscriptions throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . subscriptions . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created subscription lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateLeadSource updateLeadSource ({ id , data }) - {Member} Update the lead source for a subscription id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . subscriptions . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update subscription lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteLeadSource deleteLeadSource ({ id }) - {Member} Delete a lead source using the subscription id . Example const request = await api . subscriptions . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllMatchedRules getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a subscription id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . subscriptions . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection getAllTimelineMessages getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of subscription timeline messages for a transaction id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . subscriptions . getAllTimelineMessages ({ id : my-transaction ); // alternatively you can specify one or more of them const params = { id : my-transaction , limit : 20 , offset : 100 }; const secondCollection = await api . subscriptions . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of subscription timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data. getTimelineMessage getTimelineMessage ({ id , messageId }) - {Member} Get a subscription timeline message by its id and messageId combination. Example const message = await api . subscriptions . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the subscription timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createTimelineComment createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a subscription account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . subscriptions . createTimelineComment ({ id : my-subscription-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #subscriptions-subscription-id` ; const params = { id : my-subscription-id data : { message , }, }; const secondComment = await api . subscriptions . createTimelineComment ( params ); Returns A member exposing the created subscription timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteTimelineMessage deleteTimelineMessage ({ id , messageId }) - {Member} Delete a subscription timeline message by using its id and messageId combination. Example const request = await api . subscriptions . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec","title":"Subscriptions"},{"location":"reference/resources/subscriptions/#subscriptions-apisubscriptions","text":"Member of RebillyAPI Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination.","title":"Subscriptions api.subscriptions"},{"location":"reference/resources/subscriptions/#getall","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of subscriptions. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . subscriptions . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . subscriptions . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( subscription = console . log ( subscription . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of subscriptions. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/subscriptions/#get","text":"get ({ id }) - {Member} Get a subscription by its id . Example const subscription = await api . subscriptions . get ({ id : foobar-001 }); console . log ( subscription . fields . billingAddress . firstName ); Returns A member exposing the subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/subscriptions/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of subscriptions in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . subscriptions . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . subscriptions . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/subscriptions/#create","text":"create ({ id opt , data }) - {Member} Create a subscription for a specific customer, website and plan combination. Optionally provide a specific id to use, or let Rebilly generate one. An initialInvoiceId can be defined which will allow you to insert the subscription as an invoice item to an existing invoice. Example // first set the properties for the new subscription const data = { customerId : foobar-0001 , websiteId : my-main-website , planId : my-plan-id , // you can append this subscription to // an existing invoice by passing its ID initialInvoiceId : my-existing-invoice-id , billingAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, deliveryAddress : { firstName : Johnny , lastName : Brown , emails : [{ label : main , value : johnny+test@grr.la , primary : true }], }, quantity : 1 , customFields : {} }; // the ID is optional const firstInvoice = await api . subscriptions . create ({ data }); // or you can provide one const secondInvoice = await api . subscriptions . create ({ id : my-second-id , data }); Returns A member exposing the created subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/subscriptions/#update","text":"update ({ id , data }) - {Member} Update a subscription using its id . Example // define the values to update const data = { // determines if a payment attempt will be automatic autopay : false , // set the next renewal time renewalTime : 2018-09-26T15:34:29Z }; const subscription = await api . subscriptions . update ({ id : my-second-id , data }); Returns A member exposing the updated subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/subscriptions/#cancel","text":"cancel ({ id , data }) - {Member} Cancel an subscription using its id . The policy will be used to determine when the subscription will end. Allowed policy values: at-next-renewal now-with-prorata-credit now Example // define the cancellation details const data = { policy : at-next-renewal , canceledBy : merchant , cancelCategory : did-not-use , cancelDescription : the user did not use the product }; const subscription = await api . subscriptions . cancel ({ id : my-second-id , data }); Returns A member exposing the canceled subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"cancel"},{"location":"reference/resources/subscriptions/#change-plan","text":"change-plan ({ id }) - {Member} Change the customer's subscription plan. The renewalPolicy will be used to determine when the change will be completed. This feature is useful for upgrading and downgrading the customer's subscription. Allowed renewalPolicy values: reset retain Example // define the subscription details const data = { planId : my-other-plan , renewalPolicy : retain , prorated : false }; const abandonedInvoice = await api . subscriptions . changePlan ({ id : my-subscription-id , data }); Returns A member exposing the changed subscription fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"change-plan"},{"location":"reference/resources/subscriptions/#getleadsource","text":"getLeadSource ({ id }) - {Member} Get a lead source by using the subscription id . Example const lead = await api . subscriptions . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getLeadSource"},{"location":"reference/resources/subscriptions/#createleadsource","text":"createLeadSource ({ id , data }) - {Member} Create a lead source for a subscription id . A subscription can only have one lead source present at a time. subscription Tracking The lead source entity lets you track your subscriptions throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . subscriptions . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created subscription lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createLeadSource"},{"location":"reference/resources/subscriptions/#updateleadsource","text":"updateLeadSource ({ id , data }) - {Member} Update the lead source for a subscription id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : subscriptions , content : subscription business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . subscriptions . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update subscription lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateLeadSource"},{"location":"reference/resources/subscriptions/#deleteleadsource","text":"deleteLeadSource ({ id }) - {Member} Delete a lead source using the subscription id . Example const request = await api . subscriptions . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteLeadSource"},{"location":"reference/resources/subscriptions/#getallmatchedrules","text":"getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a subscription id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . subscriptions . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"getAllMatchedRules"},{"location":"reference/resources/subscriptions/#getalltimelinemessages","text":"getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of subscription timeline messages for a transaction id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . subscriptions . getAllTimelineMessages ({ id : my-transaction ); // alternatively you can specify one or more of them const params = { id : my-transaction , limit : 20 , offset : 100 }; const secondCollection = await api . subscriptions . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of subscription timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllTimelineMessages"},{"location":"reference/resources/subscriptions/#gettimelinemessage","text":"getTimelineMessage ({ id , messageId }) - {Member} Get a subscription timeline message by its id and messageId combination. Example const message = await api . subscriptions . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the subscription timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTimelineMessage"},{"location":"reference/resources/subscriptions/#createtimelinecomment","text":"createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a subscription account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . subscriptions . createTimelineComment ({ id : my-subscription-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #subscriptions-subscription-id` ; const params = { id : my-subscription-id data : { message , }, }; const secondComment = await api . subscriptions . createTimelineComment ( params ); Returns A member exposing the created subscription timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createTimelineComment"},{"location":"reference/resources/subscriptions/#deletetimelinemessage","text":"deleteTimelineMessage ({ id , messageId }) - {Member} Delete a subscription timeline message by using its id and messageId combination. Example const request = await api . subscriptions . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec","title":"deleteTimelineMessage"},{"location":"reference/resources/three-d-secure/","text":"Three D Secure (3DS) api . threeDSecure Member of RebillyAPI Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure. The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases. 3D Secure requires cardholder interaction to be completed. Special Feature If you're not certain how to use this feature or if it is suited for you, contact us via support chat. getAll getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of 3DS entries. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . threeDSecure . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . threeDSecure . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of 3DS entries. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a 3DS entry by its id . Example const entry = await api . threeDSecure . get ({ id : foobar-001 }); console . log ( entry . fields . customerId ); Returns A member exposing the 3DS entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ data }) - {Member} Create a 3DS entry for a customer and a specific combination of gateway account, payment card and website. Example // first set the properties for the new entry const data = { customerId : foobar-001 , websiteId : my-website-id , paymentCardId : a-certain-card-id , gatewayAccountId : main-gateway-id , enrolled : Y , // enrollment electronic // commerce indicator enrollmentEci : abc , // electronic commerce indicator eci : 0 , // cardholder authentication verification value cavv : 1234 , // transaction Id xid : er9349gju09u40394guj , payerAuthResponseStatus : Y , signatureVerification : Y , amount : 12.99 , currency : USD }; const entry = await api . threeDSecure . create ({ data }); Returns A member exposing the created 3DS entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Three D Secure (3DS)"},{"location":"reference/resources/three-d-secure/#three-d-secure-3ds-apithreedsecure","text":"Member of RebillyAPI Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure. The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases. 3D Secure requires cardholder interaction to be completed. Special Feature If you're not certain how to use this feature or if it is suited for you, contact us via support chat.","title":"Three D Secure (3DS) api.threeDSecure"},{"location":"reference/resources/three-d-secure/#getall","text":"getAll ({ limit opt , offset opt }) -> {Collection} Get a collection of 3DS entries. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . threeDSecure . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . threeDSecure . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . Returns A collection of 3DS entries. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/three-d-secure/#get","text":"get ({ id }) - {Member} Get a 3DS entry by its id . Example const entry = await api . threeDSecure . get ({ id : foobar-001 }); console . log ( entry . fields . customerId ); Returns A member exposing the 3DS entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/three-d-secure/#create","text":"create ({ data }) - {Member} Create a 3DS entry for a customer and a specific combination of gateway account, payment card and website. Example // first set the properties for the new entry const data = { customerId : foobar-001 , websiteId : my-website-id , paymentCardId : a-certain-card-id , gatewayAccountId : main-gateway-id , enrolled : Y , // enrollment electronic // commerce indicator enrollmentEci : abc , // electronic commerce indicator eci : 0 , // cardholder authentication verification value cavv : 1234 , // transaction Id xid : er9349gju09u40394guj , payerAuthResponseStatus : Y , signatureVerification : Y , amount : 12.99 , currency : USD }; const entry = await api . threeDSecure . create ({ data }); Returns A member exposing the created 3DS entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/tracking/","text":"Tracking api . tracking Member of RebillyAPI Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing getAllApiLogs getAllApiLogs ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of API logs. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . tracking . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of API log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data. getApiLog getApiLog ({ id }) - {Member} Get an API log entry by its id . Example const entry = await api . tracking . getApiLog ({ id : foobar-001 }); console . log ( entry . fields . request ); Returns A member exposing the API log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadApiLogsCSV downloadApiLogsCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of API logs in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadApiLogsCSV method is exactly the same as the getAllApiLogs method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . tracking . downloadApiLogsCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . tracking . downloadApiLogsCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. getAllSubscriptionLogs getAllSubscriptionLogs ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of subscription logs. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . tracking . getAllSubscriptionLogs (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllSubscriptionLogs ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . subscriptionId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of subscription log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data. getSubscriptionLog getSubscriptionLog ({ id }) - {Member} Get a subscription log entry by its id . Example const entry = await api . tracking . getSubscriptionLog ({ id : foobar-001 }); console . log ( entry . fields . subscriptionId ); Returns A member exposing the subscription log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllWebhookNotificationLogs getAllWebhookNotificationLogs ({ limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of website webhook logs. Each entry will be a member. Website Webhooks These logs will only track website webhooks. Example // all parameters are optional const firstCollection = await api . tracking . getAllWebhookNotificationLogs (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllWebhookNotificationLogs ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . eventName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of website webhook log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data. getWebhookNotificationLog getWebhookNotificationLog ({ id }) - {Member} Get a website webhook log entry by its id . Website Webhooks These logs will only track website webhooks. Example const entry = await api . tracking . getWebhookNotificationLog ({ id : foobar-001 }); console . log ( entry . fields . eventName ); Returns A member exposing the website webhook log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllListsChangesHistory getAllListsChangesHistory ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of changes applied to the lists (Rules Engine). Each entry will be a member. See api.lists Example // all parameters are optional const firstCollection = await api . tracking . getAllListsChangesHistory (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllListsChangesHistory ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of list changes. Type Collection API Spec See the detailed API spec for all payload fields and response data. getAllWebhookTrackingLogs getAllWebhookTrackingLogs ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of global webhook logs. Each entry will be a member. Since 0.13.0 Example // all parameters are optional const firstCollection = await api . tracking . getAllWebhookTrackingLogs (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllWebhookTrackingLogs ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of global webhook log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data. getWebhookTrackingLog getWebhookTrackingLog ({ id }) - {Member} Get a global webhook log entry by its id . Since 0.13.0 Example const entry = await api . tracking . getWebhookTrackingLog ({ id : foobar-001 }); console . log ( entry . fields . eventType ); Returns A member exposing the global webhook log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Tracking"},{"location":"reference/resources/tracking/#tracking-apitracking","text":"Member of RebillyAPI Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing","title":"Tracking api.tracking"},{"location":"reference/resources/tracking/#getallapilogs","text":"getAllApiLogs ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of API logs. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . tracking . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . customerId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of API log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllApiLogs"},{"location":"reference/resources/tracking/#getapilog","text":"getApiLog ({ id }) - {Member} Get an API log entry by its id . Example const entry = await api . tracking . getApiLog ({ id : foobar-001 }); console . log ( entry . fields . request ); Returns A member exposing the API log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getApiLog"},{"location":"reference/resources/tracking/#downloadapilogscsv","text":"downloadApiLogsCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of API logs in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadApiLogsCSV method is exactly the same as the getAllApiLogs method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . tracking . downloadApiLogsCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . tracking . downloadApiLogsCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadApiLogsCSV"},{"location":"reference/resources/tracking/#getallsubscriptionlogs","text":"getAllSubscriptionLogs ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of subscription logs. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . tracking . getAllSubscriptionLogs (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllSubscriptionLogs ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . subscriptionId )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of subscription log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllSubscriptionLogs"},{"location":"reference/resources/tracking/#getsubscriptionlog","text":"getSubscriptionLog ({ id }) - {Member} Get a subscription log entry by its id . Example const entry = await api . tracking . getSubscriptionLog ({ id : foobar-001 }); console . log ( entry . fields . subscriptionId ); Returns A member exposing the subscription log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getSubscriptionLog"},{"location":"reference/resources/tracking/#getallwebhooknotificationlogs","text":"getAllWebhookNotificationLogs ({ limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of website webhook logs. Each entry will be a member. Website Webhooks These logs will only track website webhooks. Example // all parameters are optional const firstCollection = await api . tracking . getAllWebhookNotificationLogs (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllWebhookNotificationLogs ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . eventName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of website webhook log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllWebhookNotificationLogs"},{"location":"reference/resources/tracking/#getwebhooknotificationlog","text":"getWebhookNotificationLog ({ id }) - {Member} Get a website webhook log entry by its id . Website Webhooks These logs will only track website webhooks. Example const entry = await api . tracking . getWebhookNotificationLog ({ id : foobar-001 }); console . log ( entry . fields . eventName ); Returns A member exposing the website webhook log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getWebhookNotificationLog"},{"location":"reference/resources/tracking/#getalllistschangeshistory","text":"getAllListsChangesHistory ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of changes applied to the lists (Rules Engine). Each entry will be a member. See api.lists Example // all parameters are optional const firstCollection = await api . tracking . getAllListsChangesHistory (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllListsChangesHistory ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of list changes. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllListsChangesHistory"},{"location":"reference/resources/tracking/#getallwebhooktrackinglogs","text":"getAllWebhookTrackingLogs ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of global webhook logs. Each entry will be a member. Since 0.13.0 Example // all parameters are optional const firstCollection = await api . tracking . getAllWebhookTrackingLogs (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 }; const secondCollection = await api . tracking . getAllWebhookTrackingLogs ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( entry = console . log ( entry . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of global webhook log entries. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllWebhookTrackingLogs"},{"location":"reference/resources/tracking/#getwebhooktrackinglog","text":"getWebhookTrackingLog ({ id }) - {Member} Get a global webhook log entry by its id . Since 0.13.0 Example const entry = await api . tracking . getWebhookTrackingLog ({ id : foobar-001 }); console . log ( entry . fields . eventType ); Returns A member exposing the global webhook log entry fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getWebhookTrackingLog"},{"location":"reference/resources/transactions/","text":"Transactions api . transactions Member of RebillyAPI A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of transactions. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . transactions . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . transactions . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( transaction = console . log ( transaction . fields . type )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of transactions. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id , expand opt }) - {Member} Get a transaction by its id . Define expand to include additional data Example const transaction = await api . transactions . get ({ id : foobar-001 }); console . log ( transaction . fields . billingAddress . firstName ); Returns A member exposing the transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of transactions in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . transactions . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . transactions . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a transaction for a specific customer and website. Optionally provide a specific id to use, or let Rebilly generate one. A scheduledTime can be defined which will allow you schedule the transaction to be processed at a future date. Example // first set the properties for the new transaction const data = { customerId : foobar-0001 , websiteId : my-main-website , paymentInstrument : { method : payment-card , paymentCardId : my-payment-card-id , gatewayAccountId : my-gateway-account-id }, currency : USD , amount : 12.99 , description : manual transaction , // optionally you can specify a scheduled time // to process the transaction at a later date // scheduledTime: 2017-09-28T16:13:44Z }; // the ID is optional const firstTransaction = await api . transactions . create ({ data }); // or you can provide one const secondTransaction = await api . transactions . create ({ id : my-second-id , data }); Returns A member exposing the created transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data. cancel cancel ({ id , data }) - {Member} Cancel a pending or scheduled transaction by using its id . Once handled a transaction cannot be canceled. Example const transaction = await api . transactions . cancel ({ id : my-second-id , data }); console . log ( transaction . fields . status ); Returns A member exposing the canceled transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data. refund refund ({ id , data }) - {Member} Refund a transaction in full or using a partial amount, by using its id . Currency The refund will be in the same currency as the original transaction. Example // define the refund amount const data = { amount : 12.99 }; const refund = await api . transactions . switch ({ id : my-transaction-id , data }); console . log ( refund . fields . status ); Returns A member exposing the switched transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getGatewayLogs getGatewayLogs ({ id , data }) - {Collection} Get a collection of gateway logs for a transaction by using its id . Example const collection = await api . transactions . switch ({ id : my-transaction-id }); collection . items . forEach ( log = console . log ( log . fields . url )); Returns A collection of transaction gateway logs. Type Collection API Spec See the detailed API spec for all payload fields and response data. getLeadSource getLeadSource ({ id }) - {Member} Get a lead source by using the transaction id . Example const lead = await api . transactions . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createLeadSource createLeadSource ({ id , data }) - {Member} Create a lead source for a transaction id . A transaction can only have one lead source present at a time. transaction Tracking The lead source entity lets you track your transactions throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : transactions , content : transaction business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . transactions . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created transaction lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. updateLeadSource updateLeadSource ({ id , data }) - {Member} Update the lead source for a transaction id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : transactions , content : transaction business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . transactions . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update transaction lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteLeadSource deleteLeadSource ({ id }) - {Member} Delete a lead source using the transaction id . Example const request = await api . transactions . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. getAllMatchedRules getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a transaction id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . transactions . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection getAllTimelineMessages getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of transaction timeline messages for a transaction id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . transactions . getAllTimelineMessages ({ id : my-transaction ); // alternatively you can specify one or more of them const params = { id : my-transaction , limit : 20 , offset : 100 }; const secondCollection = await api . transactions . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of transaction timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data. getTimelineMessage getTimelineMessage ({ id , messageId }) - {Member} Get a transaction timeline message by its id and messageId combination. Example const message = await api . transactions . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the transaction timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data. createTimelineComment createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a transaction account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . transactions . createTimelineComment ({ id : my-transaction-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #transactions-transaction-id` ; const params = { id : my-transaction-id data : { message , }, }; const secondComment = await api . transactions . createTimelineComment ( params ); Returns A member exposing the created transaction timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data. deleteTimelineMessage deleteTimelineMessage ({ id , messageId }) - {Member} Delete a transaction timeline message by using its id and messageId combination. Example const request = await api . transactions . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Transactions"},{"location":"reference/resources/transactions/#transactions-apitransactions","text":"Member of RebillyAPI A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future.","title":"Transactions api.transactions"},{"location":"reference/resources/transactions/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of transactions. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . transactions . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . transactions . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( transaction = console . log ( transaction . fields . type )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of transactions. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/transactions/#get","text":"get ({ id , expand opt }) - {Member} Get a transaction by its id . Define expand to include additional data Example const transaction = await api . transactions . get ({ id : foobar-001 }); console . log ( transaction . fields . billingAddress . firstName ); Returns A member exposing the transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/transactions/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of transactions in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . transactions . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . transactions . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/transactions/#create","text":"create ({ id opt , data }) - {Member} Create a transaction for a specific customer and website. Optionally provide a specific id to use, or let Rebilly generate one. A scheduledTime can be defined which will allow you schedule the transaction to be processed at a future date. Example // first set the properties for the new transaction const data = { customerId : foobar-0001 , websiteId : my-main-website , paymentInstrument : { method : payment-card , paymentCardId : my-payment-card-id , gatewayAccountId : my-gateway-account-id }, currency : USD , amount : 12.99 , description : manual transaction , // optionally you can specify a scheduled time // to process the transaction at a later date // scheduledTime: 2017-09-28T16:13:44Z }; // the ID is optional const firstTransaction = await api . transactions . create ({ data }); // or you can provide one const secondTransaction = await api . transactions . create ({ id : my-second-id , data }); Returns A member exposing the created transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/transactions/#cancel","text":"cancel ({ id , data }) - {Member} Cancel a pending or scheduled transaction by using its id . Once handled a transaction cannot be canceled. Example const transaction = await api . transactions . cancel ({ id : my-second-id , data }); console . log ( transaction . fields . status ); Returns A member exposing the canceled transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"cancel"},{"location":"reference/resources/transactions/#refund","text":"refund ({ id , data }) - {Member} Refund a transaction in full or using a partial amount, by using its id . Currency The refund will be in the same currency as the original transaction. Example // define the refund amount const data = { amount : 12.99 }; const refund = await api . transactions . switch ({ id : my-transaction-id , data }); console . log ( refund . fields . status ); Returns A member exposing the switched transaction fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"refund"},{"location":"reference/resources/transactions/#getgatewaylogs","text":"getGatewayLogs ({ id , data }) - {Collection} Get a collection of gateway logs for a transaction by using its id . Example const collection = await api . transactions . switch ({ id : my-transaction-id }); collection . items . forEach ( log = console . log ( log . fields . url )); Returns A collection of transaction gateway logs. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getGatewayLogs"},{"location":"reference/resources/transactions/#getleadsource","text":"getLeadSource ({ id }) - {Member} Get a lead source by using the transaction id . Example const lead = await api . transactions . getLeadSource ({ id : my-second-id }); console . log ( lead . fields . affiliate ); Returns A member exposing the lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getLeadSource"},{"location":"reference/resources/transactions/#createleadsource","text":"createLeadSource ({ id , data }) - {Member} Create a lead source for a transaction id . A transaction can only have one lead source present at a time. transaction Tracking The lead source entity lets you track your transactions throughout your different campaigns. Example // first set the properties for the new lead source const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : transactions , content : transaction business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . transactions . createLeadSource ({ id : my-second-id , data }); Returns A member exposing the created transaction lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createLeadSource"},{"location":"reference/resources/transactions/#updateleadsource","text":"updateLeadSource ({ id , data }) - {Member} Update the lead source for a transaction id . Example // define the values to update const data = { medium : foobar , source : www.google.com , campaign : my-first-campaign , term : transactions , content : transaction business , affiliate : Acme , subAffiliate : null , salesAgent : null , clickId : null , path : null , ipAddress : 12.34.56.78 , currency : USD , amount : 0 }; const lead = await api . transactions . updateLeadSource ({ id : my-second-id , data }); Returns A member exposing the update transaction lead source fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updateLeadSource"},{"location":"reference/resources/transactions/#deleteleadsource","text":"deleteLeadSource ({ id }) - {Member} Delete a lead source using the transaction id . Example const request = await api . transactions . deleteLeadSource ({ id : my-second-id }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteLeadSource"},{"location":"reference/resources/transactions/#getallmatchedrules","text":"getAllMatchedRules ({ id }) - {Collection} Get all previously matched event rules for a transaction id . The rules are defined within system events and are part of the Rules Engine. See events Example const rules = await api . transactions . getAllMatchedRules ({ id : foobar-001 }); Returns A collection of matched rules for this dispute. Type Collection","title":"getAllMatchedRules"},{"location":"reference/resources/transactions/#getalltimelinemessages","text":"getAllTimelineMessages ({ id , limit opt , offset opt , sort opt , filter opt }) -> {Collection} Get a collection of transaction timeline messages for a transaction id . Each entry will be a member. Example // all parameters are optional except for the `id` const firstCollection = await api . transactions . getAllTimelineMessages ({ id : my-transaction ); // alternatively you can specify one or more of them const params = { id : my-transaction , limit : 20 , offset : 100 }; const secondCollection = await api . transactions . getAllTimelineMessages ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( message = console . log ( message . fields . eventType )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of transaction timeline messages. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAllTimelineMessages"},{"location":"reference/resources/transactions/#gettimelinemessage","text":"getTimelineMessage ({ id , messageId }) - {Member} Get a transaction timeline message by its id and messageId combination. Example const message = await api . transactions . getTimelineMessage ({ id : foobar-001 , messageId : message-202 }); console . log ( message . fields . eventType ); Returns A member exposing the transaction timeline message fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTimelineMessage"},{"location":"reference/resources/transactions/#createtimelinecomment","text":"createTimelineComment ({ id , data }) - {Member} Create a timeline comment associated to a transaction account by defining its id and data . The comment message to be posted must be defined in message string attribute of the data object. Mentions to users and references to resources can be set inside the message string. See the detailed API spec for details. Example // Create a comment const firstComment = await api . transactions . createTimelineComment ({ id : my-transaction-id , data : { message : Your comment here }}); // Using params object, mentions and references const message = `Example of mentions @user@mydomain.com and references #transactions-transaction-id` ; const params = { id : my-transaction-id data : { message , }, }; const secondComment = await api . transactions . createTimelineComment ( params ); Returns A member exposing the created transaction timeline comment fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"createTimelineComment"},{"location":"reference/resources/transactions/#deletetimelinemessage","text":"deleteTimelineMessage ({ id , messageId }) - {Member} Delete a transaction timeline message by using its id and messageId combination. Example const request = await api . transactions . deleteTimelineMessage ({ id : foobar-001 , messageId : message-202 }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"deleteTimelineMessage"},{"location":"reference/resources/users/","text":"Users api . users Member of RebillyAPI Create and manage users. A user represents a person who can login to Rebilly, and take actions subject to their granted permissions. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of users. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . users . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . users . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( user = console . log ( user . fields . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of users. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a user by its id . Example const user = await api . users . get ({ id : foobar-001 }); console . log ( user . fields . firstName ); Returns A member exposing the user fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a user. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new user const data = { email : john.doe+test@grr.la , firstName : John , lastName : Doe , businessPhone : 151412345676 , mobilePhone : 151412345676 , password : genericPasswordValue , permissions : [], reportingCurrency : USD , // totp requires the use of a smart phone // with Google Authenticator installed totpRequired : false , totpSecret : , totpUrl : , country : US , preferences : {} }; // the ID is optional const firstProduct = await api . users . create ({ data }); // or you can provide one const secondProduct = await api . users . create ({ id : my-second-key , data }); Returns A member exposing the created user fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a user by using its id . Example // define values to update const data = { email : john.doe+test@grr.la , firstName : John , lastName : Doe , reportingCurrency : CAD , country : CA , }; const user = await api . users . update ({ id : my-second-key , data }); Returns A member exposing the updated user fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a user by using its id . Example const request = await api . users . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data. updatePassword updatePassword ({ id , data }) - {Member} Update the password of a user identified by its id . Current Password Required The user's current password is required to enable the update. Example // define values to update const data = { currentPassword : previousUserPassword123 , newPassword : newUserPassword123 }; const user = await api . users . updatePassword ({ id : my-second-key , data }); Returns A member exposing the user's fields. Type Member API Spec See the detailed API spec for all payload fields and response data. resetPassword resetPassword ({ token , data }) - {Member} Reset a user's password using an existing forgot password token . Example const token = 4f6cf35x2c4y483za0a9158621f77a21 ; // define values to update const data = { newPassword : newUserPassword123 }; const user = await api . users . resetPassword ({ token , data }); Returns A member exposing the user's fields. Type Member API Spec See the detailed API spec for all payload fields and response data. resetTotp resetTotp ( id ) - {Member} Renew a user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication. Example const profile = await api . users . resetTotp ({ id : my-second-key }); console . log ( profile . users . toptSecret ); Returns A member exposing the user's profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Users"},{"location":"reference/resources/users/#users-apiusers","text":"Member of RebillyAPI Create and manage users. A user represents a person who can login to Rebilly, and take actions subject to their granted permissions.","title":"Users api.users"},{"location":"reference/resources/users/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection} Get a collection of users. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . users . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . users . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( user = console . log ( user . fields . firstName )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. Returns A collection of users. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/users/#get","text":"get ({ id }) - {Member} Get a user by its id . Example const user = await api . users . get ({ id : foobar-001 }); console . log ( user . fields . firstName ); Returns A member exposing the user fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/users/#create","text":"create ({ id opt , data }) - {Member} Create a user. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new user const data = { email : john.doe+test@grr.la , firstName : John , lastName : Doe , businessPhone : 151412345676 , mobilePhone : 151412345676 , password : genericPasswordValue , permissions : [], reportingCurrency : USD , // totp requires the use of a smart phone // with Google Authenticator installed totpRequired : false , totpSecret : , totpUrl : , country : US , preferences : {} }; // the ID is optional const firstProduct = await api . users . create ({ data }); // or you can provide one const secondProduct = await api . users . create ({ id : my-second-key , data }); Returns A member exposing the created user fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/users/#update","text":"update ({ id , data }) - {Member} Update a user by using its id . Example // define values to update const data = { email : john.doe+test@grr.la , firstName : John , lastName : Doe , reportingCurrency : CAD , country : CA , }; const user = await api . users . update ({ id : my-second-key , data }); Returns A member exposing the updated user fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/users/#delete","text":"delete ({ id }) - {Member} Delete a user by using its id . Example const request = await api . users . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/users/#updatepassword","text":"updatePassword ({ id , data }) - {Member} Update the password of a user identified by its id . Current Password Required The user's current password is required to enable the update. Example // define values to update const data = { currentPassword : previousUserPassword123 , newPassword : newUserPassword123 }; const user = await api . users . updatePassword ({ id : my-second-key , data }); Returns A member exposing the user's fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"updatePassword"},{"location":"reference/resources/users/#resetpassword","text":"resetPassword ({ token , data }) - {Member} Reset a user's password using an existing forgot password token . Example const token = 4f6cf35x2c4y483za0a9158621f77a21 ; // define values to update const data = { newPassword : newUserPassword123 }; const user = await api . users . resetPassword ({ token , data }); Returns A member exposing the user's fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"resetPassword"},{"location":"reference/resources/users/#resettotp","text":"resetTotp ( id ) - {Member} Renew a user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication. Example const profile = await api . users . resetTotp ({ id : my-second-key }); console . log ( profile . users . toptSecret ); Returns A member exposing the user's profile fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"resetTotp"},{"location":"reference/resources/webhooks/","text":"Webhooks api . webhooks Member of RebillyAPI Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice. They allow you to collect information about those events. Rebilly can send this information to an URL of your choice. getAll getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of webhooks. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . webhooks . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . webhooks . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( webhook = console . log ( webhook . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of webhooks. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a webhook by its id . Example const webhook = await api . webhooks . get ({ id : foobar-001 }); console . log ( webhook . fields . id ); Returns A member exposing the webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a webhook. Optionally provide a specific id to use, or let Rebilly generate one. Use eventsFilter to limit the events that can trigger the webhook, or leave empty to trigger for any event. Allowed eventsFilter values: gateway-account-requested subscription-trial-ended subscription-activated subscription-canceled subscription-renewed transaction-processed payment-card-expired payment-declined invoice-modified dispute-created suspended-payment-completed Example // first set the properties for the new webhook const data = { // leave filter empty to enable // the webhook for all events eventsFilter : [], status : active , method : POST , headers : {}, url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; // the ID is optional const firstWebhook = await api . webhooks . create ({ data }); // or you can provide one const secondWebhook = await api . webhooks . create ({ id : my-second-key , data }); Returns A member exposing the created webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a webhook by using its id . To soft delete a webhook, set its status to inactive . Example // define values to update const data = { eventsFilter : [ suspended-payment-completed ], status : active , method : POST , headers : {}, url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const webhook = await api . webhooks . update ({ id : my-second-key , data }); Returns A member exposing the updated webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Webhooks"},{"location":"reference/resources/webhooks/#webhooks-apiwebhooks","text":"Member of RebillyAPI Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice. They allow you to collect information about those events. Rebilly can send this information to an URL of your choice.","title":"Webhooks api.webhooks"},{"location":"reference/resources/webhooks/#getall","text":"getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection} Get a collection of webhooks. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . webhooks . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . webhooks . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( webhook = console . log ( webhook . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. Returns A collection of webhooks. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/webhooks/#get","text":"get ({ id }) - {Member} Get a webhook by its id . Example const webhook = await api . webhooks . get ({ id : foobar-001 }); console . log ( webhook . fields . id ); Returns A member exposing the webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/webhooks/#create","text":"create ({ id opt , data }) - {Member} Create a webhook. Optionally provide a specific id to use, or let Rebilly generate one. Use eventsFilter to limit the events that can trigger the webhook, or leave empty to trigger for any event. Allowed eventsFilter values: gateway-account-requested subscription-trial-ended subscription-activated subscription-canceled subscription-renewed transaction-processed payment-card-expired payment-declined invoice-modified dispute-created suspended-payment-completed Example // first set the properties for the new webhook const data = { // leave filter empty to enable // the webhook for all events eventsFilter : [], status : active , method : POST , headers : {}, url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; // the ID is optional const firstWebhook = await api . webhooks . create ({ data }); // or you can provide one const secondWebhook = await api . webhooks . create ({ id : my-second-key , data }); Returns A member exposing the created webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/webhooks/#update","text":"update ({ id , data }) - {Member} Update a webhook by using its id . To soft delete a webhook, set its status to inactive . Example // define values to update const data = { eventsFilter : [ suspended-payment-completed ], status : active , method : POST , headers : {}, url : https://hookb.in/Oe90ZRmdeWUGWg1MGKQV , // created prior to the test credentialHash : dcf6e32f2daee457a1db8ce5fdfbe200 }; const webhook = await api . webhooks . update ({ id : my-second-key , data }); Returns A member exposing the updated webhook fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/websites/","text":"Websites api . websites Member of RebillyAPI The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business. getAll getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of websites. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . websites . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . websites . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( website = console . log ( website . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of websites. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ id }) - {Member} Get a website by its id . Example const website = await api . websites . get ({ id : foobar-001 }); console . log ( website . fields . name ); Returns A member exposing the website fields. Type Member API Spec See the detailed API spec for all payload fields and response data. downloadCSV downloadCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of websites in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . websites . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . websites . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data. create create ({ id opt , data }) - {Member} Create a website. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new website const data = { name : My website , url : https://www.acme.com , servicePhone : 15451234567 , serviceEmail : support@acme.com , // used to build the checkout page URI, // this value would result in // https://checkout.rebilly.com/acme/page checkoutPageUri : acme , customFields : {} }; // the ID is optional const firstWebsite = await api . websites . create ({ data }); // or you can provide one const secondWebsite = await api . websites . create ({ id : my-second-key , data }); Returns A member exposing the created website fields. Type Member API Spec See the detailed API spec for all payload fields and response data. update update ({ id , data }) - {Member} Update a website by using its id . Example // define values to update const data = { name : My website , url : https://www.acme.com , servicePhone : 15451234567 , serviceEmail : support@acme.com , // used to build the checkout page URI, // this value would result in // https://checkout.rebilly.com/acme-checkout/page checkoutPageUri : acme-checkout , customFields : {} }; const website = await api . websites . update ({ id : my-second-key , data }); Returns A member exposing the updated website fields. Type Member API Spec See the detailed API spec for all payload fields and response data. delete delete ({ id }) - {Member} Delete a website by using its id . Example const request = await api . websites . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Websites"},{"location":"reference/resources/websites/#websites-apiwebsites","text":"Member of RebillyAPI The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.","title":"Websites api.websites"},{"location":"reference/resources/websites/#getall","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of websites. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . websites . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . websites . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( website = console . log ( website . fields . name )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of websites. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/websites/#get","text":"get ({ id }) - {Member} Get a website by its id . Example const website = await api . websites . get ({ id : foobar-001 }); console . log ( website . fields . name ); Returns A member exposing the website fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/websites/#downloadcsv","text":"downloadCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File} Get a collection of websites in CSV format. The first row of data will include the headers of the fields included within the CSV list. Note The downloadCSV method is exactly the same as the getAll method, with the only difference that the former returns a file instead of a collection. Example // all parameters are optional const firstFile = await api . websites . downloadCSV (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondFile = await api . websites . downloadCSV ( params ); // access the file data to view the CSV content console . log ( secondFile . data ); Tip You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node. Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A file with the response data. Type File API Spec See the detailed API spec for all payload fields and response data.","title":"downloadCSV"},{"location":"reference/resources/websites/#create","text":"create ({ id opt , data }) - {Member} Create a website. Optionally provide a specific id to use, or let Rebilly generate one. Example // first set the properties for the new website const data = { name : My website , url : https://www.acme.com , servicePhone : 15451234567 , serviceEmail : support@acme.com , // used to build the checkout page URI, // this value would result in // https://checkout.rebilly.com/acme/page checkoutPageUri : acme , customFields : {} }; // the ID is optional const firstWebsite = await api . websites . create ({ data }); // or you can provide one const secondWebsite = await api . websites . create ({ id : my-second-key , data }); Returns A member exposing the created website fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"create"},{"location":"reference/resources/websites/#update","text":"update ({ id , data }) - {Member} Update a website by using its id . Example // define values to update const data = { name : My website , url : https://www.acme.com , servicePhone : 15451234567 , serviceEmail : support@acme.com , // used to build the checkout page URI, // this value would result in // https://checkout.rebilly.com/acme-checkout/page checkoutPageUri : acme-checkout , customFields : {} }; const website = await api . websites . update ({ id : my-second-key , data }); Returns A member exposing the updated website fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"update"},{"location":"reference/resources/websites/#delete","text":"delete ({ id }) - {Member} Delete a website by using its id . Example const request = await api . websites . delete ({ id : my-second-key }); // the request does not return any fields but // you can confirm the success using the status code console . log ( request . response . status ); // 204 Returns An empty member without fields. Check the response property to validate the expected status code. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"delete"},{"location":"reference/resources/experimental/customers/","text":"Customers api . customers Member of RebillyExperimentalAPI Experimental Access customer lifetime metrics. getCustomerLifetimeSummaryMetrics getCustomerLifetimeSummaryMetrics ({ id }) - {Member} Get a the summary of a customer's lifetime metrics by using its id . Example const metrics = await api . customers . getCustomerLifetimeSummaryMetrics ({ id : foobar-0001 }); console . log ( metrics . fields . revenueAmount ); Returns A member exposing the customer's lifetime metrics. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Customers"},{"location":"reference/resources/experimental/customers/#customers-apicustomers","text":"Member of RebillyExperimentalAPI Experimental Access customer lifetime metrics.","title":"Customers api.customers"},{"location":"reference/resources/experimental/customers/#getcustomerlifetimesummarymetrics","text":"getCustomerLifetimeSummaryMetrics ({ id }) - {Member} Get a the summary of a customer's lifetime metrics by using its id . Example const metrics = await api . customers . getCustomerLifetimeSummaryMetrics ({ id : foobar-0001 }); console . log ( metrics . fields . revenueAmount ); Returns A member exposing the customer's lifetime metrics. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getCustomerLifetimeSummaryMetrics"},{"location":"reference/resources/experimental/exports/","text":"Exports api . exports Member of RebillyExperimentalAPI Experimental Queue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported. getAll getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of queued exports. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . exports . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . exports . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( file = console . log ( exports . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of queued exports. Type Collection API Spec See the detailed API spec for all payload fields and response data. get get ({ resource , id }) - {Member} Get a queued export by its id for a specific resource . Transactions Currently the only supported resource is transaction . Example const queuedExport = await api . exports . get ({ resource : transaction , id : foobar-001 }); console . log ( queuedExport . fields . status ); Returns A member exposing the customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data. queue queue ({ resource , id }) - {Member} Queue an export for a specific resource . The processing time for the export can vary from a few seconds to a few minutes depending on the amount of data requested. Transactions Currently the only supported resource is transaction . Example // first prepare the details of the export const data = { name : my-first-export , // only CSV is currently supported format : csv , // define filters, criteria, etc. // to reduce the amount of values exported arguments : {}, dateRange : { range : all }, // list email addresses that will receive // a notification once the download is ready emailNotification : [ ] }; const queuedExport = await api . exports . queue ({ resource : transaction , data }); console . log ( queuedExport . fields . status ); Returns A member exposing the newly queued export fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Exports"},{"location":"reference/resources/experimental/exports/#exports-apiexports","text":"Member of RebillyExperimentalAPI Experimental Queue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported.","title":"Exports api.exports"},{"location":"reference/resources/experimental/exports/#getall","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection} Get a collection of queued exports. Each entry will be a member. Example // all parameters are optional const firstCollection = await api . exports . getAll (); // alternatively you can specify one or more of them const params = { limit : 20 , offset : 100 , sort : -createdTime }; const secondCollection = await api . exports . getAll ( params ); // access the collection items, each item is a Member secondCollection . items . forEach ( file = console . log ( exports . fields . status )); Parameters Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details. Returns A collection of queued exports. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getAll"},{"location":"reference/resources/experimental/exports/#get","text":"get ({ resource , id }) - {Member} Get a queued export by its id for a specific resource . Transactions Currently the only supported resource is transaction . Example const queuedExport = await api . exports . get ({ resource : transaction , id : foobar-001 }); console . log ( queuedExport . fields . status ); Returns A member exposing the customer fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"get"},{"location":"reference/resources/experimental/exports/#queue","text":"queue ({ resource , id }) - {Member} Queue an export for a specific resource . The processing time for the export can vary from a few seconds to a few minutes depending on the amount of data requested. Transactions Currently the only supported resource is transaction . Example // first prepare the details of the export const data = { name : my-first-export , // only CSV is currently supported format : csv , // define filters, criteria, etc. // to reduce the amount of values exported arguments : {}, dateRange : { range : all }, // list email addresses that will receive // a notification once the download is ready emailNotification : [ ] }; const queuedExport = await api . exports . queue ({ resource : transaction , data }); console . log ( queuedExport . fields . status ); Returns A member exposing the newly queued export fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"queue"},{"location":"reference/resources/experimental/histograms/","text":"Histograms api . histograms Member of RebillyExperimentalAPI Experimental Histograms are for a particular kinds of reports with cohorts and periods. getTransactionHistogramReport getTransactionHistogramReport ({ periodStart , periodEnd , aggregationField , aggregationPeriod , metric }) - {Member} Get transaction report histogram data. The returned values can be used to render a histogram. Example const params = { periodStart : 2017-09-21T00:00:00Z , // seven day period periodEnd : 2017-09-28T23:59:59Z , aggregationField : website , aggregationPeriod : day , metric : approval }; const report = await api . histograms . getTransactionHistogramReport ( params ); console . log ( report . fields . data ); Returns A member exposing a list of date based values. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"Histograms"},{"location":"reference/resources/experimental/histograms/#histograms-apihistograms","text":"Member of RebillyExperimentalAPI Experimental Histograms are for a particular kinds of reports with cohorts and periods.","title":"Histograms api.histograms"},{"location":"reference/resources/experimental/histograms/#gettransactionhistogramreport","text":"getTransactionHistogramReport ({ periodStart , periodEnd , aggregationField , aggregationPeriod , metric }) - {Member} Get transaction report histogram data. The returned values can be used to render a histogram. Example const params = { periodStart : 2017-09-21T00:00:00Z , // seven day period periodEnd : 2017-09-28T23:59:59Z , aggregationField : website , aggregationPeriod : day , metric : approval }; const report = await api . histograms . getTransactionHistogramReport ( params ); console . log ( report . fields . data ); Returns A member exposing a list of date based values. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTransactionHistogramReport"},{"location":"reference/resources/experimental/reports/","text":"Reports api . reports Member of RebillyExperimentalAPI Experimental Retrieve summary information about your customers, subscriptions, transactions, and more. getApiLogSummary getApiLogSummary ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Get transaction report histogram data. The returned values can be used to render a histogram. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getApiLogSummary ( params ); Returns A member exposing the report fields. Type Member getCumulativeSubscriptionsPlans getCumulativeSubscriptionsPlans ({ periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Collection} Retrieve a cumulative subscriptions report aggregated by day and plans. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getApiLogSummary ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data. getCumulativeSubscriptions getCumulativeSubscriptions ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a cumulative subscriptions report. Example const params = { aggregationField : day , periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getCumulativeSubscriptions ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getDccMarkup getDccMarkup ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , tz opt }) - {Member} Retrieve a DCC markup report. Example const params = { aggregationField : day , periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , filter : `gatewayAccounts:f9b4fa10-df1d-48a3-85b3-ff6bd7ce0ed2; \\ transactionResult:approved,canceled,declined,unknown` , tz : 0 }; const report = await api . reports . getDccMarkup ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getDisputes getDisputes ({ aggregationField , periodMonth , limit opt , offset opt , filter opt , tz opt }) - {Member} Retrieve a disputes report. Example const params = { aggregationField : website , periodMonth : 2017-09 , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getDisputes ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getEventsTriggeredSummary getEventsTriggeredSummary ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve an events triggered summary report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getEventsTriggeredSummary ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getRulesMatchedSummary getRulesMatchedSummary ({ eventType , periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve an events triggered summary report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRulesMatchedSummary ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getFutureRenewals getFutureRenewals ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve a future renewals report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getFutureRenewals ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getRenewalSales getRenewalSales ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve a renewal sales report. Example const params = { periodStart : 2017-09 , periodEnd : 2017-09 , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRenewalSales ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getRetentionPercentage getRetentionPercentage ({ aggregationField , aggregationPeriod , periodStart , periodEnd , includeSwitchedSubscriptions opt , limit opt , offset opt , filter opt , tz opt }) - {Member} Retrieve a retention percentage report. Example const params = { aggregationField : month , aggregationPeriod : month , periodStart : 2016-09-01T00:00:00Z , periodEnd : 2017-09-01T00:00:00Z , includeSwitchedSubscriptions : false , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRetentionPercentage ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getRetentionValue getRetentionValue ({ aggregationField , aggregationPeriod , periodStart , periodEnd , includeRefunds opt , includeDisputes opt , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a retention value report. Example const params = { aggregationField : month , aggregationPeriod : month , periodStart : 2016-09-01T00:00:00Z , periodEnd : 2017-09-01T00:00:00Z , includeRefunds : true , includeDisputes : false , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRetentionValue ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getRetryTransaction getRetryTransaction ({ periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a payment retry report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRetryTransaction ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getStatistics getStatistics () - {Member} Retrieve a statistics report. Returns overall values relative to total revenue, customer count, cancels, refunds and their respective growth. Example const report = await api . reports . getStatistics (); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getSubscriptionCancellation getSubscriptionCancellation ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a subscription cancellation report. Example const params = { aggregationField : day , periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getSubscriptionCancellation ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getSubscriptionRenewalList getSubscriptionRenewalList ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Collection} Retrieve a list of subscription renewals data. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getSubscriptionRenewalList ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data. getSubscriptionRenewal getSubscriptionRenewal ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve a subscription renewal report. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getSubscriptionRenewal ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getTimeSeriesTransaction getTimeSeriesTransaction ({ periodStart , periodEnd , type , subaggregate , limit opt , offset opt , tz opt }) - {Member} Retrieve a transactions report aggregated by time periods. Example const params = { periodStart : 2017-08-29T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , type : count , subaggregate : gateway-account , limit : 20 , offset : 0 }; const report = await api . reports . getTimeSeriesTransaction ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getTransactionsPlan getTransactionsPlan ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Collection} Retrieve transactions with their plan data. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getTransactionsPlan ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data. getTransactionsTimeDispute getTransactionsTimeDispute ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a dispute delays in days report, how much time between a transaction and a dispute. Example const params = { aggregationField : website , periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getTransactionsTimeDispute ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getTransactions getTransactions ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a transactions report. Example const params = { aggregationField : website , periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getTransactions ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data. getPaymentsSuccessByDeclineReason getPaymentsSuccessByDeclineReason ({ periodStart , periodEnd , limit opt , offset opt , filter opt }) - {Collection} Retrieve a report of payments successful retries throughput. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 }; const report = await api . reports . getPaymentsSuccessByDeclineReason ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"Reports"},{"location":"reference/resources/experimental/reports/#reports-apireports","text":"Member of RebillyExperimentalAPI Experimental Retrieve summary information about your customers, subscriptions, transactions, and more.","title":"Reports api.reports"},{"location":"reference/resources/experimental/reports/#getapilogsummary","text":"getApiLogSummary ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Get transaction report histogram data. The returned values can be used to render a histogram. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getApiLogSummary ( params ); Returns A member exposing the report fields. Type Member","title":"getApiLogSummary"},{"location":"reference/resources/experimental/reports/#getcumulativesubscriptionsplans","text":"getCumulativeSubscriptionsPlans ({ periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Collection} Retrieve a cumulative subscriptions report aggregated by day and plans. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getApiLogSummary ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getCumulativeSubscriptionsPlans"},{"location":"reference/resources/experimental/reports/#getcumulativesubscriptions","text":"getCumulativeSubscriptions ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a cumulative subscriptions report. Example const params = { aggregationField : day , periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getCumulativeSubscriptions ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getCumulativeSubscriptions"},{"location":"reference/resources/experimental/reports/#getdccmarkup","text":"getDccMarkup ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , tz opt }) - {Member} Retrieve a DCC markup report. Example const params = { aggregationField : day , periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , filter : `gatewayAccounts:f9b4fa10-df1d-48a3-85b3-ff6bd7ce0ed2; \\ transactionResult:approved,canceled,declined,unknown` , tz : 0 }; const report = await api . reports . getDccMarkup ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getDccMarkup"},{"location":"reference/resources/experimental/reports/#getdisputes","text":"getDisputes ({ aggregationField , periodMonth , limit opt , offset opt , filter opt , tz opt }) - {Member} Retrieve a disputes report. Example const params = { aggregationField : website , periodMonth : 2017-09 , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getDisputes ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getDisputes"},{"location":"reference/resources/experimental/reports/#geteventstriggeredsummary","text":"getEventsTriggeredSummary ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve an events triggered summary report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getEventsTriggeredSummary ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getEventsTriggeredSummary"},{"location":"reference/resources/experimental/reports/#getrulesmatchedsummary","text":"getRulesMatchedSummary ({ eventType , periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve an events triggered summary report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRulesMatchedSummary ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRulesMatchedSummary"},{"location":"reference/resources/experimental/reports/#getfuturerenewals","text":"getFutureRenewals ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve a future renewals report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getFutureRenewals ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getFutureRenewals"},{"location":"reference/resources/experimental/reports/#getrenewalsales","text":"getRenewalSales ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve a renewal sales report. Example const params = { periodStart : 2017-09 , periodEnd : 2017-09 , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRenewalSales ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRenewalSales"},{"location":"reference/resources/experimental/reports/#getretentionpercentage","text":"getRetentionPercentage ({ aggregationField , aggregationPeriod , periodStart , periodEnd , includeSwitchedSubscriptions opt , limit opt , offset opt , filter opt , tz opt }) - {Member} Retrieve a retention percentage report. Example const params = { aggregationField : month , aggregationPeriod : month , periodStart : 2016-09-01T00:00:00Z , periodEnd : 2017-09-01T00:00:00Z , includeSwitchedSubscriptions : false , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRetentionPercentage ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRetentionPercentage"},{"location":"reference/resources/experimental/reports/#getretentionvalue","text":"getRetentionValue ({ aggregationField , aggregationPeriod , periodStart , periodEnd , includeRefunds opt , includeDisputes opt , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a retention value report. Example const params = { aggregationField : month , aggregationPeriod : month , periodStart : 2016-09-01T00:00:00Z , periodEnd : 2017-09-01T00:00:00Z , includeRefunds : true , includeDisputes : false , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRetentionValue ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRetentionValue"},{"location":"reference/resources/experimental/reports/#getretrytransaction","text":"getRetryTransaction ({ periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a payment retry report. Example const params = { periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getRetryTransaction ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getRetryTransaction"},{"location":"reference/resources/experimental/reports/#getstatistics","text":"getStatistics () - {Member} Retrieve a statistics report. Returns overall values relative to total revenue, customer count, cancels, refunds and their respective growth. Example const report = await api . reports . getStatistics (); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getStatistics"},{"location":"reference/resources/experimental/reports/#getsubscriptioncancellation","text":"getSubscriptionCancellation ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a subscription cancellation report. Example const params = { aggregationField : day , periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getSubscriptionCancellation ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getSubscriptionCancellation"},{"location":"reference/resources/experimental/reports/#getsubscriptionrenewallist","text":"getSubscriptionRenewalList ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Collection} Retrieve a list of subscription renewals data. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getSubscriptionRenewalList ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getSubscriptionRenewalList"},{"location":"reference/resources/experimental/reports/#getsubscriptionrenewal","text":"getSubscriptionRenewal ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Member} Retrieve a subscription renewal report. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getSubscriptionRenewal ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getSubscriptionRenewal"},{"location":"reference/resources/experimental/reports/#gettimeseriestransaction","text":"getTimeSeriesTransaction ({ periodStart , periodEnd , type , subaggregate , limit opt , offset opt , tz opt }) - {Member} Retrieve a transactions report aggregated by time periods. Example const params = { periodStart : 2017-08-29T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , type : count , subaggregate : gateway-account , limit : 20 , offset : 0 }; const report = await api . reports . getTimeSeriesTransaction ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTimeSeriesTransaction"},{"location":"reference/resources/experimental/reports/#gettransactionsplan","text":"getTransactionsPlan ({ periodStart , periodEnd , limit opt , offset opt , tz opt }) - {Collection} Retrieve transactions with their plan data. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getTransactionsPlan ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getTransactionsPlan"},{"location":"reference/resources/experimental/reports/#gettransactionstimedispute","text":"getTransactionsTimeDispute ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a dispute delays in days report, how much time between a transaction and a dispute. Example const params = { aggregationField : website , periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getTransactionsTimeDispute ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTransactionsTimeDispute"},{"location":"reference/resources/experimental/reports/#gettransactions","text":"getTransactions ({ aggregationField , periodStart , periodEnd , limit opt , offset opt , filter opt , criteria opt , tz opt }) - {Member} Retrieve a transactions report. Example const params = { aggregationField : website , periodStart : 2017-09-22T00:00:00Z , periodEnd : 2017-09-29T23:59:59Z , limit : 20 , offset : 0 , tz : 0 }; const report = await api . reports . getTransactions ( params ); Returns A member exposing the report fields. Type Member API Spec See the detailed API spec for all payload fields and response data.","title":"getTransactions"},{"location":"reference/resources/experimental/reports/#getpaymentssuccessbydeclinereason","text":"getPaymentsSuccessByDeclineReason ({ periodStart , periodEnd , limit opt , offset opt , filter opt }) - {Collection} Retrieve a report of payments successful retries throughput. Example const params = { periodStart : 2017-09-21T00:00:00Z , periodEnd : 2017-09-28T23:59:59Z , limit : 20 , offset : 0 }; const report = await api . reports . getPaymentsSuccessByDeclineReason ( params ); Returns A collection exposing the report items. Type Collection API Spec See the detailed API spec for all payload fields and response data.","title":"getPaymentsSuccessByDeclineReason"},{"location":"reference/resources/shared/base-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime .","title":"Base get all"},{"location":"reference/resources/shared/base-signature/","text":"getAll ({ limit opt , offset opt , sort opt }) -> {Collection}","title":"Base signature"},{"location":"reference/resources/shared/criteria-less-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value.","title":"Criteria less get all"},{"location":"reference/resources/shared/criteria-less-signature/","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt }) -> {Collection}","title":"Criteria less signature"},{"location":"reference/resources/shared/filter-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details.","title":"Filter get all"},{"location":"reference/resources/shared/filter-signature/","text":"getAll ({ limit opt , offset opt , sort opt filter opt }) -> {Collection}","title":"Filter signature"},{"location":"reference/resources/shared/full-expanded-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . expand string Optional A string representing an entity to expand within each member. Use , (comma) to expand multiple entities. filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details.","title":"Full expanded get all"},{"location":"reference/resources/shared/full-expanded-signature/","text":"getAll ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {Collection}","title":"Full expanded signature"},{"location":"reference/resources/shared/full-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . filter string Optional A list of one or more member fields and their values, used to filter the collection results. Example: status : active . See the filters guide for more details. q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value. criteria string Optional A stringified JSON object representing a Rebilly compatible criteria. See the criteria guide for more details.","title":"Full get all"},{"location":"reference/resources/shared/full-signature/","text":"getAll ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {Collection}","title":"Full signature"},{"location":"reference/resources/shared/paged-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 .","title":"Paged get all"},{"location":"reference/resources/shared/paged-signature/","text":"getAll ({ limit opt , offset opt }) -> {Collection}","title":"Paged signature"},{"location":"reference/resources/shared/search-get-all/","text":"Name Type Attribute Description limit number Optional The amount of members to return per request. Defaults to 100 . offset number Optional Member index from which to start returning results. Defaults to 0 . sort string Optional The member field on which to sort on. Sorting is ascending by default. Use - (dash) to make it descending. Example: createdTime and -createdTime . q string Optional A string to search for within the indexed member fields. This is useful for members that have any field match the search value.","title":"Search get all"},{"location":"reference/resources/shared/search-signature/","text":"getAll ({ limit opt , offset opt , sort opt , q opt }) -> {Collection}","title":"Search signature"},{"location":"reference/resources/shared/csv/full-expanded-signature/","text":"downloadCSV ({ limit opt , offset opt , sort opt , expand opt , filter opt , q opt , criteria opt }) -> {File}","title":"Full expanded signature"},{"location":"reference/resources/shared/csv/full-signature/","text":"downloadCSV ({ limit opt , offset opt , sort opt , filter opt , q opt , criteria opt }) -> {File}","title":"Full signature"},{"location":"reference/types/collection/","text":"Collection Type One of the three types returned by both the standard and experimental clients, the Collection type represents a list of Members (e.g. a list of customers, a list of transactions). Frozen Object Like the Member, the Collection type is immutable (frozen). Attempting to modify the Collection directly will result in a TypeError . You can retrieve a plain JSON object for mutation using the getJSON method. Properties Each collection instance exposes the same properties. Name Type Description items Array Member An array of member entities. See the Member type for details. total number An integer defining the total amount of members that exist regardless of the requested limit. limit number An integer defining the count of values returned by the API request. Reflects the limit value passed to the function which returned the Collection. offset number A zero-based index defining the starting position for the requested members. response Object The original response stripped down to the status code, status text and headers. Exposes three more properties: {status, statusText, headers} . getJSON Function Returns a plain mutable JSON object exposing the items of the current collection instance. Discards all other property. config Object An object literal with the original request query string parameters. Example After retrieving a list of customers we have access to all properties: const customers = await api . customers . getAll ({ limit : 50 , offset : 25 }); /** * Properties: * customers.items * customers.total * customers.limit * customers.offset * customers.response * customers.getJSON */ We can see the limit is equal to the value requested: console . log ( customers . limit ); // 50 //the item count is also the same console . log ( customers . items . length ); // 50 And check the response's status code: console . log ( customers . response . status ); We can loop through the customers and check their ID: //each `customer` is a Member instance with fields customers . items . forEach ( customer = console . log ( customer . fields . id )) Or get the plain JSON object and modify it: const mutableList = customers . getJSON (); mutableList . newProperty = true ; // only the `items` property are still available console . log ( mutableList . items . length ); // 50","title":"Collection"},{"location":"reference/types/collection/#collection-type","text":"One of the three types returned by both the standard and experimental clients, the Collection type represents a list of Members (e.g. a list of customers, a list of transactions). Frozen Object Like the Member, the Collection type is immutable (frozen). Attempting to modify the Collection directly will result in a TypeError . You can retrieve a plain JSON object for mutation using the getJSON method.","title":"Collection Type"},{"location":"reference/types/collection/#properties","text":"Each collection instance exposes the same properties. Name Type Description items Array Member An array of member entities. See the Member type for details. total number An integer defining the total amount of members that exist regardless of the requested limit. limit number An integer defining the count of values returned by the API request. Reflects the limit value passed to the function which returned the Collection. offset number A zero-based index defining the starting position for the requested members. response Object The original response stripped down to the status code, status text and headers. Exposes three more properties: {status, statusText, headers} . getJSON Function Returns a plain mutable JSON object exposing the items of the current collection instance. Discards all other property. config Object An object literal with the original request query string parameters. Example After retrieving a list of customers we have access to all properties: const customers = await api . customers . getAll ({ limit : 50 , offset : 25 }); /** * Properties: * customers.items * customers.total * customers.limit * customers.offset * customers.response * customers.getJSON */ We can see the limit is equal to the value requested: console . log ( customers . limit ); // 50 //the item count is also the same console . log ( customers . items . length ); // 50 And check the response's status code: console . log ( customers . response . status ); We can loop through the customers and check their ID: //each `customer` is a Member instance with fields customers . items . forEach ( customer = console . log ( customer . fields . id )) Or get the plain JSON object and modify it: const mutableList = customers . getJSON (); mutableList . newProperty = true ; // only the `items` property are still available console . log ( mutableList . items . length ); // 50","title":"Properties"},{"location":"reference/types/file/","text":"File Type One of the three types returned by both the standard and experimental clients, the File type allows you to access the arraybuffer data from API requests that return files. The files can be either exported CSV data or generated invoice PDFs. Tip You can generate a binary file to download from the file content directly in the browser, or save it locally via the file system in Node. See ArrayBuffer Properties Each file instance exposes the same properties. Name Type Description data Object An arraybuffer containing the file data returned by the request. response Object The original response stripped down to the status code, status text and headers. Exposes three more properties: {status, statusText, headers} . config Object An object literal with the original request query string parameters. Example After retrieving an invoice PDF we have access to all properties: const pdf = await api . invoices . downloadPDF ({ id : foobar-001 }); /** * Properties: * pdf.data * pdf.response */ We can access the arraybuffer : console . log ( pdf . data ); And check the response's status code: console . log ( pdf . response . status );","title":"File"},{"location":"reference/types/file/#file-type","text":"One of the three types returned by both the standard and experimental clients, the File type allows you to access the arraybuffer data from API requests that return files. The files can be either exported CSV data or generated invoice PDFs. Tip You can generate a binary file to download from the file content directly in the browser, or save it locally via the file system in Node. See ArrayBuffer","title":"File Type"},{"location":"reference/types/file/#properties","text":"Each file instance exposes the same properties. Name Type Description data Object An arraybuffer containing the file data returned by the request. response Object The original response stripped down to the status code, status text and headers. Exposes three more properties: {status, statusText, headers} . config Object An object literal with the original request query string parameters. Example After retrieving an invoice PDF we have access to all properties: const pdf = await api . invoices . downloadPDF ({ id : foobar-001 }); /** * Properties: * pdf.data * pdf.response */ We can access the arraybuffer : console . log ( pdf . data ); And check the response's status code: console . log ( pdf . response . status );","title":"Properties"},{"location":"reference/types/member/","text":"Member Type One of the three types returned by both the standard and experimental clients, the Member type represents an instance of a single resource entity in Rebilly (e.g. one customer, one transaction). Frozen Object Like the Collection, the Member type is immutable (frozen). Attempting to modify the Member directly will result in a TypeError . You can retrieve a plain JSON object for mutation using the getJSON method. Properties Each member instance exposes the same properties. Name Type Description fields Object An object literal with key/value pairs for each field returned by the API in the response. response Object The original response stripped down to the status code, status text and headers. Exposes three more properties: {status, statusText, headers} . getJSON Function Returns a plain mutable JSON object exposing the fields of the current member instance. Discards the response property. config Object An object literal with the original request query string parameters. Example After retrieving a single customer entity we have access to all three properties: const customer = await api . customers . get ({ id : foobar-0001 }); /** * Properties: * customer.fields * customer.response * customer.getJSON */ We can access the field containing its firstName : console . log ( customer . fields . primaryAddress . firstName ); And check the response's status code: console . log ( customer . response . status ); Or get the plain JSON object and modify it: const mutableCustomer = customer . getJSON (); mutableCustomer . newProperty = true ; // the fields are still available console . log ( mutableCustomer . fields . primaryAddress . firstName );","title":"Member"},{"location":"reference/types/member/#member-type","text":"One of the three types returned by both the standard and experimental clients, the Member type represents an instance of a single resource entity in Rebilly (e.g. one customer, one transaction). Frozen Object Like the Collection, the Member type is immutable (frozen). Attempting to modify the Member directly will result in a TypeError . You can retrieve a plain JSON object for mutation using the getJSON method.","title":"Member Type"},{"location":"reference/types/member/#properties","text":"Each member instance exposes the same properties. Name Type Description fields Object An object literal with key/value pairs for each field returned by the API in the response. response Object The original response stripped down to the status code, status text and headers. Exposes three more properties: {status, statusText, headers} . getJSON Function Returns a plain mutable JSON object exposing the fields of the current member instance. Discards the response property. config Object An object literal with the original request query string parameters. Example After retrieving a single customer entity we have access to all three properties: const customer = await api . customers . get ({ id : foobar-0001 }); /** * Properties: * customer.fields * customer.response * customer.getJSON */ We can access the field containing its firstName : console . log ( customer . fields . primaryAddress . firstName ); And check the response's status code: console . log ( customer . response . status ); Or get the plain JSON object and modify it: const mutableCustomer = customer . getJSON (); mutableCustomer . newProperty = true ; // the fields are still available console . log ( mutableCustomer . fields . primaryAddress . firstName );","title":"Properties"}]}